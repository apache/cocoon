<!-- === Compilation Targets =================================================== -->

  <!-- compiles everything -->
  <target name="compile" depends="compile-core, compile-scratchpad, compile-deprecated, compile-tests"/>

  <!-- compiles the core -->
  <target name="compile-core" depends="prepare">

    <!-- copy those files that need to be in the classpath -->
    <copy todir="${build.dest}">
      <fileset dir="${java}">
        <exclude name="**/*.java"/>
        <exclude name="**/*.xroles"/>
        <exclude name="**/*.xconf"/>
      </fileset>
    </copy>

    <!-- compile mock classes -->
    <mkdir dir="${build.mocks}"/>
    <javac srcdir="${mocks}"
           destdir="${build.mocks}"
           debug="${compiler.debug}"
           optimize="${compiler.optimize}"
           deprecation="${compiler.deprecation}"
           target="${target.vm}"
           nowarn="${compiler.nowarn}"
           compiler="${compiler}"
           classpathref="classpath"/>

    <!-- compile core source files -->
    <javac srcdir="${java}"
           destdir="${build.dest}"
           debug="${compiler.debug}"
           optimize="${compiler.optimize}"
           deprecation="${compiler.deprecation}"
           target="${target.vm}"
           nowarn="${compiler.nowarn}"
           compiler="${compiler}"
           classpathref="classpath"/>
  </target>

  <!-- compiles the scratchpad -->
  <target name="compile-scratchpad" depends="prepare" unless="unless.exclude.scratchpad">

    <mkdir dir="${build.scratchpad.dest}"/>

    <copy todir="${build.scratchpad.dest}">
      <fileset dir="${scratchpad.src}">
        <exclude name="**/*.java"/>
        <exclude name="**/*.xroles"/>
        <exclude name="**/*.xconf"/>
      </fileset>
    </copy>

    <!-- compile mock classes -->
    <mkdir dir="${build.mocks}"/>
    <javac srcdir="${scratchpad.mocks}"
           destdir="${build.mocks}"
           debug="${compiler.debug}"
           optimize="${compiler.optimize}"
           deprecation="${compiler.deprecation}"
           target="${target.vm}"
           nowarn="${compiler.nowarn}"
           compiler="${compiler}"
           classpathref="classpath"/>

    <javac srcdir="${scratchpad.src}" 
           destdir="${build.scratchpad.dest}"
           debug="${compiler.debug}"
           optimize="${compiler.optimize}"
           deprecation="${compiler.deprecation}"
           target="${target.vm}"
           compiler="${compiler}"
           classpathref="scratchpad.classpath"/>
  </target>

  <!-- compiles deprecated code -->
  <target name="compile-deprecated" depends="prepare" unless="unless.exclude.deprecated">
    <mkdir dir="${build.deprecated}"/>

    <xpatch file="${build.dest}/org/apache/cocoon/cocoon.roles" 
            srcdir="${deprecated.conf}"
            includes="**/*.xroles"/>
            
    <javac srcdir="${deprecated.src}"
           destdir="${build.deprecated}"
           debug="${compiler.debug}"
           optimize="${compiler.optimize}"
           deprecation="${compiler.deprecation}"
           target="${target.vm}"
           compiler="${compiler}"
           classpathref="classpath"/>
  </target>

  <target name="compile-tests" depends="compile-core, compile-deprecated">
    <mkdir dir="${build.test}"/>
    
    <!-- Copy test files to build test dir -->
    <copy todir="${build.test}" filtering="on">
      <fileset dir="${test}" excludes="**/*.java"/>
    </copy>

    <path id="test.classpath">
      <path refid="classpath"/>
      <pathelement location="${build.dest}" />
       <!-- FIXME Resolver tests depend on deprecated stuff -->
      <pathelement location="${build.deprecated}" />
      <pathelement location="${build.test}" />
      <fileset dir="${tools.lib}">
        <include name="*.jar"/>
      </fileset>
    </path>

    <!-- Compile tests -->
    <javac srcdir="${test}"
           destdir="${build.test}"
           debug="${compiler.debug}"
           optimize="${compiler.optimize}"
           deprecation="${compiler.deprecation}"
           target="${target.vm}"
           compiler="${compiler}"
           classpathref="test.classpath"/>

    <jar jarfile="${build}/${name}-tests.jar">
      <fileset dir="${build.test}" includes="**/*.class"/>
    </jar>
  </target>

<!-- === Package Targets ======================================================= -->

  <!-- packages everything -->
  <target name="package" depends="package-core, package-scratchpad, package-deprecated"/>

  <!-- package the core -->
  <target name="package-core" depends="compile-core, block-roles">
    <jar jarfile="${build}/${name}.jar" manifest="${java}/Manifest.mf">
      <fileset dir="${build.dest}">
         <exclude name="**/Manifest.mf"/>
      </fileset>
    </jar>
  </target>

  <!-- package the scratchpad -->
  <target name="package-scratchpad" depends="compile-scratchpad" unless="unless.exclude.scratchpad">
    <jar jarfile="${build}/${name}-scratchpad.jar">
      <fileset dir="${build.scratchpad.dest}"/>
    </jar>
  </target>

  <!-- package deprecated code -->
  <target name="package-deprecated" depends="compile-deprecated" unless="unless.exclude.deprecated">
    <jar jarfile="${build}/${name}-deprecated.jar">
      <fileset dir="${build.deprecated}"/>
    </jar>
  </target>

<!-- === Block Targets ========================================================= -->

  <!-- prepares the blocks build -->
  <target name="prepare-blocks" depends="prepare">
    <mkdir dir="${build.blocks}"/>

    <xslt in="${gump.descriptor}"
          out="${build.temp}/blocks-build.xml"
          processor="trax"
          style="${tools}/src/blocks-build.xsl"/>
  </target>

  <!-- patch the cocoon role file -->
  <target name="block-roles" depends="prepare-blocks">
    <ant antfile="${build.temp}/blocks-build.xml"
         inheritAll="true"
         inheritRefs="false"
         target="patch-roles"/>
  </target>
  
  <!-- compiles and packages all blocks -->
  <target name="blocks" depends="compile,prepare-blocks">
    <ant antfile="${build.temp}/blocks-build.xml"
         inheritAll="true"
         inheritRefs="false"
         target="compile"/>
  </target>


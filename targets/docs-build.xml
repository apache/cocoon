<?xml version="1.0"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project name="docs">

  <description>
    Documentation Targets
  </description>

  <target name="prepare-docs" unless="exclude.documentation" depends="blocks">

    <!-- Set classpath for documentation -->
    <path id="documentation.classpath">
      <path refid="classpath"/>
      <fileset dir="${build.blocks}">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${blocks}">
        <include name="*/lib/*.jar"/>
      </fileset>
      <path location="${tools.jar}"/>
      <path location="${build.context}/WEB-INF/classes"/>
    </path>

    <mkdir dir="${build.context}"/>
    <mkdir dir="${build.context}/images"/>

    <!-- make filtered copy of XML docs -->
    <copy todir="${build.context}" filtering="on">
      <fileset dir="${documentation}">
        <exclude name="images/**"/>
      </fileset>
    </copy>

    <!-- Add some other documents -->
    <copy file="status.xml"
      tofile="${build.context}/xdocs/status.xml" filtering="on"/>

	<!-- generate sitemap components docs using SitemapTask -->
    <sitemap-components docDir="${build.context}/xdocs/userdocs" source="${java}"/>
    <echo message="Building component docs from blocks."/>
    <sitemap-components docDir="${build.context}/xdocs/userdocs" source="${blocks}"/>
    <!--
    -->

    <!-- Forrest needs its own file at src/documentation/sitemap.xmap, so we
    overwrite it with the old Cocoon-specific sitemap here -->
    <move file="${build.context}/sitemap-localdocs.xmap"
      tofile="${build.context}/sitemap.xmap"/>

    <!-- Copy images -->
    <copy todir="${build.context}/images" filtering="off">
      <fileset dir="${documentation}/images"/>
    </copy>

    <!-- Copy entity catalog and entities -->
    <copy todir="${build.context}/WEB-INF/entities" filtering="on">
      <fileset dir="${webapp}/WEB-INF/entities"/>
    </copy>
    <copy todir="${build.context}/WEB-INF/classes" filtering="on">
      <fileset dir="${webapp}/WEB-INF/classes"/>
    </copy>

    <!-- Copy the logkit configuration -->
    <copy todir="${build.context}" filtering="on" file="${webapp}/WEB-INF/logkit.xconf"/>

  </target>

  <!-- Set a variable if the generated docs are already up-to-date. -->
  <target name="docs_check" depends="prepare-docs">
    <uptodate property="docs.notrequired" targetfile="${build.docs}/index.html" >
      <srcfiles dir="." includes="status.xml"/>
      <srcfiles dir="${build}" includes="jars.xml"/>
      <srcfiles dir="${documentation}/xdocs" includes="**/*.xml"/>
    </uptodate>
  </target>

  <!-- If generated docs are already up-to-date, print a message saying so. -->
  <target name="docs_done" depends="docs_check" if="docs.notrequired">
    <echo>-------------------------------------------------------------
Not rebuilding docs, as they are up-to-date:
  ${build.docs}/index.html is more recent than
  status.xml, ${documentation}/xdocs/*.xml
-------------------------------------------------------------
</echo>
  </target>

  <!-- Create docs -->
<!-- FIXME: Temporarily disable forrest until we fix the 0.6 vs 0.5 and cocoon version number conflict 
      depends="validate-jars, prepare-docs, cocoon-validate-xdocs, docs_done, javadocs, do-forrest"
-->
  <target name="docs"
      depends="validate-jars, prepare-docs, cocoon-validate-xdocs, docs_done, javadocs"
      unless="docs.notrequired" description="Builds the documentation">
    <!-- The docs are created using forrest, so we simply copy them for now -->
    <mkdir dir="${build.docs}"/>

<echo message="
FIXME: Not copying the forrest-built docs to ${build.docs}
because you now need to run forrest manually and copy them yourself."/>
<!-- FIXME: Temporarily disable forrest until we fix the 0.6 vs 0.5 and cocoon version number conflict 
    <copy todir="${build.docs}" filtering="off">
      <fileset dir="${build.site}"/>
    </copy>
-->
    <copy todir="${build.docs}/apidocs" filtering="off">
      <fileset dir="${build.javadocs}"/>
    </copy>
<echo message="
NOTE: Now that the docs are prepared, run 'forrest' from the command-line.
It will generate docs into ${build.site}"/>
  </target>

  <!-- Prepares the printer-docs -->
<!--
  <target name="prepare-printer-docs" depends="prepare-docs">
    <mkdir dir="${build.context.printer}"/>
-->
    <!-- copy prepared docs -->
<!--
    <copy todir="${build.context.printer}" filtering="off">
      <fileset dir="${build.context}"/>
    </copy>
-->
    <!-- copy printer skin -->
<!--
    <copy todir="${build.context.printer}/stylesheets" filtering="off" overwrite="yes">
      <fileset dir="${build.context}/stylesheets/printer_skin"/>
    </copy>
  </target>
-->
  <!-- Set a variable if the generated printer docs are already up-to-date. -->
<!--
  <target name="printer-docs_check" depends="prepare">
    <uptodate property="printer-docs.notrequired" targetfile="${build.docs.printer}/index.html" >
      <srcfiles dir="." includes="status.xml"/>
      <srcfiles dir="${docs}" includes="**/*.xml"/>
    </uptodate>
  </target>
-->
  <!-- If generated printer docs are already up-to-date, print a message saying so. -->
<!--
  <target name="printer-docs_done" depends="printer-docs_check" if="printer-docs.notrequired">
    <echo message="Not rebuilding printer docs, as they are up-to-date:"/>
    <echo message="  ${build.docs.printer}/index.html is more recent than"/>
    <echo message="  status.xml, ${docs}/*.xml"/>
  </target>
-->
  <!-- Create printer friendly docs -->
<!--
  <target name="printer-docs" depends="prepare-printer-docs, cocoon-validate-xdocs, printer-docs_done" description="Builds printer-friendly documentation">
    <mkdir dir="${build.docs.printer}"/>

    <java classname="org.apache.cocoon.Main" fork="true" dir="${build.context.printer}" failonerror="true" maxmemory="128m">
      <arg value="-c."/>
      <arg value="-d../printer-docs"/>
      <arg value="-w../temp/printer"/>
      <arg value="-b../brokenlinks.txt"/>
      <arg value="-k./logkit.xconf"/>
      <arg value="-u${build.docs.printer.loglevel}"/>
      <arg value="-V"/>
      <arg value="index.html"/>
      <classpath>
        <path refid="documentation.classpath"/>
      </classpath>
    </java>
  </target>
-->
<!-- === Javadoc ============================================================= -->

  <!-- Check if javadocs have to be generated -->
  <!-- Obsolete:
  <target name="javadocs-check">
    <mkdir dir="${build.javadocs}"/>
    <condition property="javadocs.notrequired" value="true">
     <or>
      <uptodate targetfile="${build.javadocs}/packages.html" >
       <srcfiles dir= "${java}" includes="**/*.java,**/package.html"/>
       <srcfiles dir= "${deprecated.src}" includes="**/*.java,**/package.html"/>
      </uptodate>
      <istrue value="${internal.exclude.javadocs}"/>
     </or>
    </condition>
  </target>
  -->
  <!-- Creates Javadocs -->
  <!-- Obsolete:
  <target name="javadocs" depends="prepare, javadocs-check" unless="javadocs.notrequired" description="Builds the API documentation (javadocs)">

    <condition property="javadoc.additionalparam" value="-breakiterator -tag todo:all:Todo:">
      <equals arg1="1.4" arg2="${ant.java.version}"/>
    </condition>
    <condition property="javadoc.additionalparam" value="">
      <not><equals arg1="1.4" arg2="${ant.java.version}"/></not>
    </condition>

    <javadoc destdir="${build.javadocs}"
             author="true"
             version="true"
             use="true"
             noindex="false"
             splitindex="true"
             windowtitle="${Name} API ${version} [${TODAY}]"
             doctitle="${Name} API ${version}"
             bottom="Copyright &#169; ${year} Apache Software Foundation. All Rights Reserved."
             stylesheetfile="${resources.javadoc}/javadoc.css"
             useexternalfile="yes"
             additionalparam="${javadoc.additionalparam}">

        <link packagelistloc="${{resources.javadoc}}/avalon-excalibur"
              offline="true" href="http://excalibur.apache.org/apidocs"/>
        <link packagelistloc="${{resources.javadoc}}/avalon-framework"
              offline="true" href="http://avalon.apache.org/framework/api"/>
        <link packagelistloc="${{resources.javadoc}}/j2ee"
              offline="true" href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api"/>
        <link packagelistloc="${{resources.javadoc}}/j2se"
              offline="true" href="http://java.sun.com/j2se/1.4.2/docs/api"/>
        <link packagelistloc="${{resources.javadoc}}/jstl"
              offline="true" href="http://java.sun.com/products/jsp/jstl/1.1/docs/api"/>
        <link packagelistloc="${{resources.javadoc}}/xalan"
              offline="true" href="http://xml.apache.org/xalan-j/apidocs"/>
        <link packagelistloc="${{resources.javadoc}}/xerces"
              offline="true" href="http://xml.apache.org/xerces2-j/javadocs/api"/>

      <packageset dir="${java}">
        <include name="**"/>
      </packageset>
      <packageset dir="${deprecated.src}">
        <include name="**"/>
      </packageset>
      <classpath refid="classpath"/>
    </javadoc>

  </target>
  -->

  <!-- Creates Javadocs -->
  <target name="javadocs"
          depends="prepare-blocks"
          description="Builds the API documentation (javadocs)"
          unless="internal.exclude.javadocs">
    <ant antfile="${build.temp}/blocks-build.xml"
         inheritAll="true"
         inheritRefs="false"
         target="javadocs"/>
  </target>

</project>

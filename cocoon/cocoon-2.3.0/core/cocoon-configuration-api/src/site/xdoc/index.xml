<?xml version="1.0" encoding="UTF-8"?><!--
      Licensed to the Apache Software Foundation (ASF) under one
      or more contributor license agreements.  See the NOTICE file
      distributed with this work for additional information
      regarding copyright ownership.  The ASF licenses this file
      to you under the Apache License, Version 2.0 (the
      "License"); you may not use this file except in compliance
      with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing,
      software distributed under the License is distributed on an
      "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
      KIND, either express or implied.  See the License for the
      specific language governing permissions and limitations
      under the License.
    --><document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/XDOC/2.0" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd"><properties><title>Cocoon Configuration API - Introduction</title><author email="cocoon-docs@apache.org">Apache Cocoon Documentation Team</author></properties><body>
         <div id="contentBody"><div id="bodyText"><h1 class="docTitle">Introduction</h1><p>The Configuration API is a simple but powerful API for handling configuration
issues inside your application. It provides a standard mechanism for getting
configuration values inside your application code. The Configuration API is only
the public API your should be built upon. Besides the API you will need an
implementation of the API. Currently there is one implementation for using
Spring: The <a href="../subprojects/configuration/spring-configurator/index.html">Cocoon Spring Configurator</a>.</p><section name="The Settings Object" style="background:none;padding:0;"/><p>The Configuration API defines the <tt>Settings</tt> bean
(<tt>org.apache.cocoon.configuration.Settings</tt>). You can use this bean to
get configuration values for your application. Configuration values are stored
in a key/value pair fashion (similar to the properties) and the settings object
provides several methods to access this information.</p><p>Please note, that this is just the client API your code should rely on. The
Configurator API does in no way define how the actual configuration takes place!
</p><section name="Utility classes" style="background:none;padding:0;"/><p>The <tt>org.apache.cocoon.configuration.MutableSettings</tt> class is a
default implementation of the settings object. For example, this class can be
used as a mock object for unit testing.</p><p>The <tt>org.apache.cocoon.configuration.PropertyHelper</tt> class contains
various helper methods for dealing with properties and settings.</p><p>The <tt>org.apache.cocoon.configuration.PropertyProvider</tt> interface is an
interface that can be used by implementations of the Configuration API to allow
custom code to be executed for configuring a settings object.</p></div></div>
       </body></document>
<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--
  - Input Modules sample sitemap.
  -
  - $Id$
  -->
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <!-- =========================== Components ============================== -->

  <map:components>
    <!-- Load variables.properties file -->
    <map:include-properties dir="."/>

    <map:actions>
      <!-- Action to store locale name as cookie. -->
      <map:action name="cookie-locale" src="org.apache.cocoon.acting.LocaleAction">
        <store-in-cookie>true</store-in-cookie>
      </map:action>
    </map:actions>
  </map:components>

  <!-- =========================== Resources =============================== -->

  <map:resources>
    <!--
      - This resource is used to create a composite page from menu and content
      -->
    <map:resource name="composite">
      <map:aggregate element="composite">
        <map:part src="menu.xml"/>
        <map:part src="cocoon:/content/{../1}.xml" label="content"/>
      </map:aggregate>
      <map:transform src="composite2page.xsl">
        <map:parameter name="page" value="{../0}"/>
      </map:transform>
      <map:serialize type="servletService">
        <map:parameter name="service" value="servlet:style:/service/common/simple-page2html"/>
      </map:serialize>
    </map:resource>
  </map:resources>

  <!-- =========================== Views =================================== -->

  <map:views>
    <map:view name="content" from-label="content">
      <map:serialize type="xml"/>
    </map:view>

    <map:view name="pretty-content" from-label="content">
      <map:serialize type="servletService">
        <map:parameter name="service" value="servlet:style:/service/system/xml2html"/>
      </map:serialize>
    </map:view>

    <map:view name="links" from-position="last">
      <map:serialize type="links"/>
    </map:view>
  </map:views>

  <!-- =========================== Pipelines ================================= -->

  <map:pipelines>
    <map:pipeline>

      <!-- Default URL matcher. Matches '/' URLs -->
      <map:match pattern="">
        <map:redirect-to uri="welcome"/>
      </map:match>

      <map:match pattern="requestparam">
        <map:redirect-to uri="content/requestparam.xml?foo=foo+param&amp;bar=bar+param"/>
      </map:match>
      <map:match pattern="*">
        <map:call resource="composite"/>
      </map:match>


      <!--
        - Index page content
        -->

      <map:match pattern="content/welcome.xml">
        <map:generate src="menu.xml"/>
        <map:transform src="menu2page.xsl"/>
        <map:serialize type="xml"/>
      </map:match>

      <!--
        - Input module specific content
        -->

      <map:match pattern="content/request.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="request:attributeNames" value="{request:attributeNames}"/>
          <map:parameter name="request:authType" value="{request:authType}"/>
          <map:parameter name="request:characterEncoding" value="{request:characterEncoding}"/>
          <map:parameter name="request:cookieMap" value="{request:cookieMap}"/>
          <map:parameter name="request:cookies" value="{request:cookies}"/>
          <map:parameter name="request:contentLength" value="{request:contentLength}"/>
          <map:parameter name="request:contentType" value="{request:contentType}"/>
          <map:parameter name="request:contextPath" value="{request:contextPath}"/>
          <map:parameter name="request:headers" value="{request:headers}"/>
          <map:parameter name="request:headerNames" value="{request:headerNames}"/>
          <map:parameter name="request:locale" value="{request:locale}"/>
          <map:parameter name="request:locales" value="{request:locales}"/>
          <map:parameter name="request:method" value="{request:method}"/>
          <map:parameter name="request:parameterNames" value="{request:parameterNames}"/>
          <map:parameter name="request:pathInfo" value="{request:pathInfo}"/>
          <map:parameter name="request:pathTranslated" value="{request:pathTranslated}"/>
          <map:parameter name="request:protocol" value="{request:protocol}"/>
          <map:parameter name="request:queryString" value="{request:queryString}"/>
          <map:parameter name="request:remoteAddr" value="{request:remoteAddr}"/>
          <map:parameter name="request:remoteHost" value="{request:remoteHost}"/>
          <map:parameter name="request:remoteUser" value="{request:remoteUser}"/>
          <map:parameter name="request:requestURI" value="{request:requestURI}"/>
          <map:parameter name="request:requestedSessionId" value="{request:requestedSessionId}"/>
          <map:parameter name="request:requestedSessionIdFromCookie" value="{request:requestedSessionIdFromCookie}"/>
          <map:parameter name="request:requestedSessionIdFromURL" value="{request:requestedSessionIdFromURL}"/>
          <map:parameter name="request:requestedSessionIdValid" value="{request:requestedSessionIdValid}"/>
          <map:parameter name="request:scheme" value="{request:scheme}"/>
          <map:parameter name="request:secure" value="{request:secure}"/>
          <map:parameter name="request:serverName" value="{request:serverName}"/>
          <map:parameter name="request:serverPort" value="{request:serverPort}"/>
          <map:parameter name="request:servletPath" value="{request:servletPath}"/>
          <!--<map:parameter name="session [truncated]" value="{request:concat('org. ... .', substring(session, 36))}"/>-->
          <map:parameter name="request:sitemapURI" value="{request:sitemapURI}"/>
          <map:parameter name="request:userPrincipal" value="{request:userPrincipal}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="Request Input Module (RequestModule)"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/baselink.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="baselink:SitemapBaseLink" value="{baselink:SitemapBaseLink}"/>
          <map:parameter name="baselink:RequestBaseLink" value="{baselink:RequestBaseLink}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="BaseLink Input Module (BaseLinkModule)"/>
          <map:parameter name="description" value="Returns a relative path (../,
            ../../, etc) linking to either the base of the current request URI or the base
            of the sitemap. In this demonstration, the request URI is {0} (an internal
            request not equivalent to what the user sees)"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/requestparam.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="request-param:foo" value="{request-param:foo}"/>
          <map:parameter name="request-param:bar" value="{request-param:bar}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="Request Parameter Input Module (RequestParameterModule)"/>
          <map:parameter name="description" value="Provides access to request
            parameters. Edit the URL of this page to see the request parameter
            values change (parts after the '?' are request parameters) ."/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/session.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="session:attributeNames" value="{session:attributeNames}"/>
          <map:parameter name="session:creationTime" value="{session:creationTime}"/>
          <map:parameter name="session:lastAccessedTime" value="{session:lastAccessedTime}"/>
          <map:parameter name="session:maxInactiveInterval" value="{session:maxInactiveInterval}"/>
          <map:parameter name="session:id" value="{session:id}"/>
          <map:parameter name="session:new" value="{session:new}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="Session Input Module (SessionModule)"/>
          <map:parameter name="description" value="SessionModule provides access to Session object properties."/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/system-property.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="system-property:java.version" value="{system-property:java.version}"/>
          <map:parameter name="system-property:java.vendor" value="{system-property:java.vendor}"/>
          <map:parameter name="system-property:java.vendor.url" value="{system-property:java.vendor.url}"/>
          <map:parameter name="system-property:java.home" value="{system-property:java.home}"/>
          <map:parameter name="system-property:java.vm.specification.version" value="{system-property:java.vm.specification.version}"/>
          <map:parameter name="system-property:java.vm.specification.vendor" value="{system-property:java.vm.specification.vendor}"/>
          <map:parameter name="system-property:java.vm.specification.name" value="{system-property:java.vm.specification.name}"/>
          <map:parameter name="system-property:java.vm.version" value="{system-property:java.vm.version}"/>
          <map:parameter name="system-property:java.vm.vendor" value="{system-property:java.vm.vendor}"/>
          <map:parameter name="system-property:java.vm.name" value="{system-property:java.vm.name}"/>
          <map:parameter name="system-property:java.specification.version" value="{system-property:java.specification.version}"/>
          <map:parameter name="system-property:java.specification.vendor" value="{system-property:java.specification.vendor}"/>
          <map:parameter name="system-property:java.specification.name" value="{system-property:java.specification.name}"/>
          <map:parameter name="system-property:java.specification.name" value="{system-property:java.specification.name}"/>
          <map:parameter name="system-property:java.class.path" value="{system-property:java.class.path}"/>
          <map:parameter name="system-property:java.ext.dirs" value="{system-property:java.ext.dirs}"/>
          <map:parameter name="system-property:os.name" value="{system-property:os.name}"/>
          <map:parameter name="system-property:os.arch" value="{system-property:os.arch}"/>
          <map:parameter name="system-property:os.version" value="{system-property:os.version}"/>
          <map:parameter name="system-property:file.separator" value="{system-property:file.separator}"/>
          <map:parameter name="system-property:path.separator" value="{system-property:path.separator}"/>
          <map:parameter name="system-property:line.separator" value="{system-property:line.separator}"/>
          <map:parameter name="system-property:user.name" value="{system-property:user.name}"/>
          <map:parameter name="system-property:user.home" value="{system-property:user.home}"/>
          <map:parameter name="system-property:user.dir" value="{system-property:user.dir}"/>
          <!-- Function call -->
          <map:parameter name="system-property:substring-before(user.home, user.name)" value="{system-property:substring-before(user.home, user.name)}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="System Properties Input Module (SystemPropertiesModule)"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/xml.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="myxml:/forrestconf/@version" value="{myxml:/forrestconf/@version}"/>
          <map:parameter name="myxml:/forrestconf/skin" value="{myxml:/forrestconf/skin}"/>
          <map:parameter name="myxml:/*/base-url" value="{myxml:/*/base-url}"/>
          <!--
            <map:parameter name="slashdot-headline" value="{slashdot:/*:RDF/item[1]/title}"/>
          -->
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="XML File Input Module (XMLFileModule)"/>
          <map:parameter name="description" value="XMLFileModule uses an XML file as
            a data source, with XPath expressions as the key values. In this example,
            the keys identify nodes in context://samples/modules/forrestconf.xml"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/xxml.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="myxml:/forrestconf/@version" value="{myxml:/forrestconf/@version}"/>
          <map:parameter name="myxml:/forrestconf/skin" value="{myxml:/forrestconf/skin}"/>
          <map:parameter name="myxml:/*/base-url" value="{myxml:/*/base-url}"/>
          <map:parameter name="a/forestconf/@version" value="{varxml:/forrestconf/@version}"/>
          <map:parameter name="a/forrestconf/skin" value="{varxml:/forrestconf/skin}"/>
          <map:parameter name="a/*/base-url" value="{varxml:/*/base-url}"/>
          <!--
            <map:parameter name="slashdot-headline" value="{slashdot:/*:RDF/item[1]/title}"/>
          -->
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="XML File Input Module (XMLFileModule)"/>
          <map:parameter name="description" value="XMLFileModule uses an XML file as
            a data source, with XPath expressions as the key values. In this example,
            the keys identify nodes in context://samples/modules/forrestconf.xml"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/defaults.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="defaults:skin" value="{defaults:skin}"/>
          <map:parameter name="defaults:base-url" value="{defaults:base-url}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="Defaults Input Module (DefaultsModule)"/>
          <map:parameter name="description" value="DefaultsModule contains 'default'
            values, hardcoded into cocoon.xconf. It is simply a lookup table
            containing static values."/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/chain.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="chain:skin" value="{chain:skin}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="Chaining Input module (ChainMetaModule)"/>
          <map:parameter name="description" value="ChainMetaModule iterates through
            a set of modules until one returns a non-null value for the specified
            key. In this example, we chain together request-param, request-attr,
            session-attr and defaults modules.  The 'skin' value is taken from the
            first that returns a non-null value, usually 'defaults'. Try adding
            '?skin=myskin' to the URL, and it should change."/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/cookie.xml">
        <map:act type="cookie-locale"/>
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="cookie:locale" value="{cookie:locale}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="Cookie module (CookieModule)"/>
          <map:parameter name="description" value="Returns the value of the named HTTP
            cookie. The example used LocaleAction to store the current locale name as
            cookie. If the value is empty, use the browser's reload button.
            (Cookies just created cannot be read out. Only when the browser presents it
            on the next request, it will be available.)"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/date.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="date:date" value="{date:date}"/>
          <map:parameter name="date:MMM d, yyyy" value="{date:MMM d, yyyy}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="Date Input module (DateMetaModule)"/>
          <map:parameter name="description" value="Returns the current
            date and time.  The format is specified in cocoon.xconf or as the
            data specified in the input module reference"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/session-attr.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="session-attr:fruit" value="{session-attr:fruit}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="Session Attribute Input Module (SessionAttributeModule)"/>
          <map:parameter name="description" value="SessionAttributeModule provides access
            to Session attributes."/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/randomnumber.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="random:x" value="{random:x}"/>
          <map:parameter name="random-100-to-500:y" value="{random-100-to-500:y}"/>
          <map:parameter name="random-5000-to-10000:z" value="{random-5000-to-10000:z}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="Random number module (RandomNumberModule)"/>
          <map:parameter name="description" value="Returns a random number in a
            user-configurable range (by default 0 to (2^63)-1 (cca. 9.22337204 × 10^18)"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/realpath.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="realpath:/" value="{realpath:/}"/>
          <map:parameter name="realpath:/images" value="{realpath:/images}"/>
          <map:parameter name="realpath:/WEB-INF" value="{realpath:/WEB-INF}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="RealPath Module (RealPathModule)"/>
          <map:parameter name="description" value="Returns the real path of a
            context-relative virtual path (if not deployed from a .war)."/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/properties.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="cocoon-properties:name" value="{cocoon-properties:name}"/>
          <map:parameter name="cocoon-properties:Name" value="{cocoon-properties:Name}"/>
          <map:parameter name="cocoon-properties:fullname" value="{cocoon-properties:fullname}"/>
          <map:parameter name="cocoon-properties:version" value="{cocoon-properties:version}"/>
          <map:parameter name="cocoon-properties:released.version" value="{cocoon-properties:released.version}"/>
          <map:parameter name="cocoon-properties:year" value="{cocoon-properties:year}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="Properties File Module (PropertiesFileModule)"/>
          <map:parameter name="description" value="PropertiesFileModule provides access
            to properties from a properties file. In this example the keys identify properties in
            resource://org/apache/cocoon/cocoon.properties"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/url-encode.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="url-encode:foo bar" value="{url-encode:foo bar}"/>
          <map:parameter name="url-encode:foo/bar" value="{url-encode:foo/bar}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="URL Encoding Module (URLEncodeModule)"/>
          <map:parameter name="description" value="URLEncodeModule performs
            URL encoding of the passed parameter"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/url-decode.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="url-decode:foo%20bar" value="{url-decode:foo%20bar}"/>
          <map:parameter name="url-decode:foo%2Fbar" value="{url-decode:foo%2Fbar}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="URL Decoding Module (URLDecodeModule)"/>
          <map:parameter name="description" value="URLDecodeModule performs
            URL decoding of the passed parameter"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/naming.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="naming:java:comp/env/greeting" value="{naming:java:comp/env/greeting}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="Naming Module (NamingInputModule)"/>
          <map:parameter name="description" value="NamingInputModule provides access
            to JNDI resources. This sample does not work with built-in Jetty as it
            does not provide JNDI."/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="content/global.xml">
        <map:generate type="jx" src="properties.xml">
          <map:parameter name="global:global-sitemap" value="{global:global-sitemap}"/>
          <map:parameter name="global:global-sub-sitemap" value="{global:global-sub-sitemap}"/>
          <map:parameter name="global:global-sitemap-override" value="{global:global-sitemap-override}"/>
        </map:generate>
        <map:transform src="properties2page.xsl">
          <map:parameter name="title" value="Settings Input Module (SettingsInputModule)"/>
          <map:parameter name="description" value="SettingsInputModule contains 'global'
            values defined in the sitemap properties. Children sitemaps can override values defined
            in the parent sitemap."/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

    </map:pipeline>
  </map:pipelines>
</map:sitemap>

<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

<!-- ========================= Components ================================ -->

 <map:components>
  <map:generators default="file"/>

  <map:transformers default="xslt">

   <!-- This transformer is used to extract the form instance data from the xml document. See
        the javadocs of this class for more information on the default configuration and 
        configuration options.
        The instance data is stored as an attribute with the same name as the form using an
        output module. Here we decide to use the RequestAttributeMap module. This would allows
        a) to store instances for several forms and b) to access a particular instance and value
        using JXPath syntax.
        Per default, the map key is the name of the form as is the root node of the new Document.
    -->
   <map:transformer name="sfinstance" 
                    logger="sitemap.transformer.simpleform" 
                    src="org.apache.cocoon.transformation.SimpleFormInstanceExtractionTransformer">
       <output name="request-attr-map"/>
   </map:transformer>

   <!-- the SimpleFormTransformer acts upon HTML4 form element tags and replaces their
        value attribute or their content in case of the textarea element with data obtained
        from an input module attribute with the same name. In addition, it checks the result 
        of the FormValidatorAction when it encounters <error/> tags and includes / excludes
        them depending on the result. 

        While many configuration options are available at run time, the input module has
        to be configured at declaration time. Thus a second instance of the SimpleFormTransformer
        is needed.

        How is the instance data accessed?
        If the user submitted data, those parameters shall be used, otherwise,
        it is stored as Document (DOM) in a Map that is stored in a request attribute.
        Thus, first a request attribute is read, passing a fixed attribute name because the name 
        of the map is fixed. This is the default name for attributes set by the RequestAttributeMap
        module.
        Next, a JXPath expression is applied to this map. The expression is the name attribute of the
        HTML form tag currently transformed! Since both map key and root node is the same (here: "person"),
        and we don't want to reflect this in our HTML form, the simplemap input module is used to
        prepend the string "/person/" to the jxpath expression.
    -->
   <map:transformer name="simpleform" 
                    logger="sitemap.transformer.simpleform" 
                    src="org.apache.cocoon.transformation.SimpleFormTransformer">
    <input-module name="chain">
       <input-module name="request-param"/>
       <input-module name="simplemap">
          <prefix>/person/</prefix>
          <input-module name="jxpath">
            <!-- "jxpath" does not pass the attribute name to the module it
                 obtains the value to act from. Thus an additional attribute
                 name needs to be injected. 
            -->
            <from-parameter>org.apache.cocoon.components.modules.output.OutputModule</from-parameter>
            <input-module name="request-attr"/>
          </input-module>
       </input-module>
    </input-module>
   </map:transformer>
   
  </map:transformers>
  
  
  <map:readers default="resource"/>
  <map:serializers default="html"/>
  <map:matchers default="wildcard"/>
  <map:selectors default="browser"/>
 </map:components>

<!-- =========================== Resources ================================= -->

 <map:resources>
  <map:resource name="dynamic-page">
     <map:generate src="{target}.xsp" type="serverpages"/>
     <map:transform src="context://samples/stylesheets/dynamic-page2html.xsl">
        <map:parameter name="servletPath" value="{request:servletPath}"/>
        <map:parameter name="sitemapURI" value="{request:sitemapURI}"/>
        <map:parameter name="contextPath" value="{request:contextPath}"/>
        <map:parameter name="file" value="{target}.xsp"/>
        <map:parameter name="remove" value="{remove}"/>
     </map:transform>
     <map:serialize/>
  </map:resource>
 </map:resources>

<!-- =========================== Views =================================== -->

 <map:views>
  <map:view name="content" from-label="content">
   <map:serialize type="xml"/>
  </map:view>

  <map:view name="pretty-content" from-label="data">
    <map:transform src="context://stylesheets/system/xml2html.xsl"/>
    <map:serialize type="html"/>
  </map:view>
  
  <map:view name="links" from-position="last">
   <map:serialize type="links"/>
  </map:view>

 </map:views>

<!-- =========================== Pipelines ================================= -->

 <map:pipelines>

  <map:pipeline>

   <map:match pattern="">
     <map:redirect-to uri="simpleform"/>
   </map:match>
   
   <!-- ============ form validation using xsp and logicsheet ============== -->

   <map:match pattern="formval">
     <map:act type="form-validator">
        <map:parameter name="descriptor" value="descriptor.xml"/>
        <map:parameter name="validate-set" value="car-reservation"/>
        <map:call resource="dynamic-page">
           <map:parameter name="target" value="OK"/>
           <map:parameter name="remove" value="{../0}"/>
        </map:call>
     </map:act>
     <map:call resource="dynamic-page">
        <map:parameter name="target" value="ERROR"/>
        <map:parameter name="remove" value="{0}"/>
     </map:call>
   </map:match>


   <!-- ============ form validation using transformers ======================== -->

   <map:match pattern="*">

    <!-- Check the request parameters using the FormValidatorAction -->
    <map:act type="form-validator">
      <!-- parameters to the action -->
      <!-- file that contains the validation rules and rule sets -->
      <map:parameter name="descriptor" value="descriptor.xml"/>
      <!-- rule set to use -->
      <map:parameter name="validate-set" value="testform"/>
      
      <!-- this is only applied if the validation has been successful -->
      <!--map:generate src="success.xml"/>
      <map:transform type="simpleform"/>
      <map:transform src="context://samples/stylesheets/page/simple-page2html.xsl">
         <map:parameter name="servletPath" value="{request:servletPath}"/>
         <map:parameter name="sitemapURI" value="{request:sitemapURI}"/>
         <map:parameter name="contextPath" value="{request:contextPath}"/>
         <map:parameter name="file" value=".xml"/>
      </map:transform>
      <map:serialize/-->
      <!-- because of the above serializer the "success" pipeline ends here. -->

    </map:act>
    <!-- continue processing -->
    <!-- since the "success" pipeline ends with a serializer, the following is only 
         applied if validation has not been successful.
     -->

    <map:generate type="file" src="{1}.xml"/>    
    <map:transform type="sfinstance"/> <!-- extract the instance data -->
    <map:transform type="simpleform"/><!-- fill in the instance data, request parameters, and error tags -->
     <map:transform src="context://samples/stylesheets/page/simple-page2html.xsl">
        <map:parameter name="servletPath" value="{request:servletPath}"/>
        <map:parameter name="sitemapURI" value="{request:sitemapURI}"/>
        <map:parameter name="contextPath" value="{request:contextPath}"/>
        <map:parameter name="file" value=".xml"/>
     </map:transform>
    <map:serialize/>
   </map:match>
        
  </map:pipeline>
 </map:pipelines>

</map:sitemap>

<!-- end of file -->

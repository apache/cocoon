<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<document>
 <header>
  <title>Installing Cocoon</title>
  <authors>
   <person name="Stefano Mazzocchi" email="stefano@apache.org"/>
   <person name="Brett McLaughlin" email="bmclaugh@algx.net"/>
   <person name="Russell Castagnaro" email="russell@synctank.com"/>
  </authors>
 </header>

 <body>

 <s1 title="System Requirements">
  <p>
   Cocoon requires the following systems to be already installed in your
   system:
  </p>

  <ul>
   <li><strong>Java Virtual Machine</strong>
    A Java 1.1 or greater compatible virtual machine must be present for both
    command line and servlet type usage of Cocoon. Note that all servlet engines
    require a JVM to run so if you are already using servlets you already have
    one installed.
   </li>
   <li><strong>Servlet Engine</strong>
    A Servlet 2.x compliant servlet engine  must be present in order to support
    servlet operation and dynamic request handling. Note that this requirement
    is optional for command line operation.
   </li>
  </ul>
 </s1>

 <s1 title="Required Components">
  <p>
   Cocoon is a publishing framework and was designed to be highly modular to
   allow users to choose their preferred implementation for the required
   component and to allow better and faster parallel development.
  </p>

  <p>
   Previous releases of Cocoon forced you to download all the basic required
   packages for the installation, but this generated lots of problems for
   lack of synch between the projects and the complexity of the operation.
   For this reason, Cocoon now ships with all the required packages,
   a sort of a simple distribution to make things easier for you. We apologize
   for the increased size of the distribution, but we think this will be
   worthwhile even for users with low bandwidth.
  </p>

  <p>
   In the <code>/bin</code> directory you'll find the <code>cocoon.jar</code>
   jar package that contains the Cocoon binary files, while the <code>/lib</code> 
   directory contains all the libraries required for complete Cocoon operation.
   While these packages may not be the most up-to-date versions, they are
   guaranteed and tested to work properly with Cocoon so, we suggest that you
   use them. Note, however, that they were all redistributed untouched from
   their original distributions.
  </p>
  
  <p>
   If you use Java 1.2.x, you also have to treat the file 
   <code>[jdk_home]/lib/tools.jar</code> as another Cocoon component and include
   this into your classpath. This package contains the java compiler that
   is required for Cocoon page compilation.
  </p>

  <note>
   The Ant and Stylebook packages are only used in the build system and
   are <strong>not</strong> used by Cocoon at run-time. So you can safely
   ignore them in the installation.
  </note>
 </s1>

 <s1 title="Installing Cocoon">
  <p>
   Being Cocoon a servlet, you should be able to install it on every compliant
   servlet engine by associating the "org.apache.cocoon.Cocoon" servlet
   with the requests you want it to handle. In order to do this, there is no
   standard way, so we try to provide detailed information for the most used
   servlet systems.
  </p>

  <s2 title="Installing Cocoon on Apache JServ">
   <p>
    First thing to do is to make sure that Cocoon and all the needed components
    (as explained in the previous section) are visible. This implies adding
    this to the servlet engine classpath by adding a bunch of classpath lines
    to your <code>jserv.properties</code> file for each jar package.
   </p>

<source>wrapper.classpath=[path-to-jar]/[jar-name].jar</source>

   <p>
    Here is an example:
   </p>

<source>
wrapper.classpath=/usr/local/java/jdk/lib/tools.jar
wrapper.classpath=/usr/local/java/cocoon/bin/cocoon.jar
wrapper.classpath=/usr/local/java/cocoon/lib/xerces.jar
wrapper.classpath=/usr/local/java/cocoon/lib/xalan.jar
wrapper.classpath=/usr/local/java/cocoon/lib/fop.jar
...
</source>

   <note>
    The <code>./bin/cocoon.jar</code> package <strong>must</strong> be added to the 
    servlet engine classpath in order for the XSP subsystem to work correctly.
    We perfectly understand this as a limitation to Cocoon flexibility, and 
    we are working hard to make it possible for multiple cocoon instances to
    reside in the same JVM, unfortunately some limitations in Java 1.1 make 
    this impossible at this time.
   </note>

   <note>
    JServ is a Servlet 2.0 compliant servlet engine and will not work if you
    place the Servlet_2.2.jar in its classpath. So ignore the servlet_2.2.jar
    package that is shipped with Cocoon if you use Jserv.
   </note>

   <p>
    At this point, you must set the Cocoon configurations. To do this, you
    must choose the servlet zone(s) where you want Cocoon to reside.
    If you don't know what a servlet zone is, open the
    <code>zone.properties</code> file.
   </p>

   <p>
    To configure Cocoon, you must pass the <code>cocoon.properties</code>
    file location to the servlet by adding the following line to the servlet zone:
   </p>

<source>servlet.org.apache.cocoon.Cocoon.initArgs=properties=[path-to-cocoon]/bin/cocoon.properties</source>

   <p>
    Note that you should not need to change anything from the template
    properties file found in the distribution (under <code>/conf/</code>),
    but you must edit it for more complex operation. Please refer directly to
    the file that contains breaf indications and comments on the different
    configurations, but you don't need to care about that at this point.
   </p>

   <p>
    Now your cocoon servlet is properly configured, but you should tell Apache
    to direct any call to an XML file (or any other file you want Cocoon to
    process) to the Cocoon servlet. To do this, you should add the following line
    to your <code>jserv.conf</code> file:
   </p>

<source>Action cocoon /servlet/org.apache.cocoon.Cocoon
AddHandler cocoon xml</source>

   <p>
    where <em>xml</em> is the file extention you want Cocoon to handle
    and <em>/servlet/</em> is the mount point of your servlet zone (and the
    above is the standard name for servlet mapping for Apache JServ).
   </p>
   
   <p>
    You need to make sure that you have the following line uncommented in your
    <code>httpd.conf</code> or Apache will not be able to start:
   </p>
   
<source>LoadModule action_module /path/to/mod_actions.so</source>

   <p>
    Restart both Apache and Apache JServ and try accessing the Cocoon status page:
   </p>

<source>http://localhost/Cocoon.xml</source>

   <p>
    Cocoon will show you how it's configured.
   </p>

   <p>
    If the page above is working, make the samples contained in the distribution
    (under <code>./samples</code>) visible from your web server (by either 
    copying the files under yout <code>htdocs</code> directory, or by making
    at alias for the sample directory) and call <code>./samples/index.xml</code>
    to see Cocoon in action.
   </p>

   <note>
    For any problem, please go to the FAQ list before submitting a bug
    report or a request for help on the mail lists. Thank you.
   </note>
  </s2>

  <s2 title="Installing Cocoon on Apache Tomcat">
      <p>
      To make Cocoon work with Tomcat, you must add a context to Tomcat that describes
      to Tomcat how to load Cocoon files. Then you must tell Apache to send 
      certain requests to Tomcat (and consequently Cocoon). Finally you must 
      provide the .xml files to be served by Cocoon. These steps are outlined below.
      </p>

      <p>
      A context in Tomcat describes to Tomcat how and when to load a particular servlet
      and Cocoon is one such servlet. First we need to make sure that Tomcat knows how to
      load the Cocoon .jar files. To begin with, you must copy any .jar files from
      <code>$COCOON_HOME/lib</code> to <code>$TOMCAT_HOME/lib</code> that are necessary for Cocoon to run.
      In addition, you must copy <code>$COCOON_HOME/bin/cocoon.jar</code> to <code>$TOMCAT_HOME/lib</code>.
      </p>
 
     <p>
      In recent version of Tomcat under Unix, Tomcat will automatically detect any <code>.jar</code> files
      in the <code>$TOMCAT_HOME/lib</code> directory. But under Windows, you must explicitly add the new
      <code>.jar</code> files in the appropriate place in the file <code>$TOMCAT_ROOT/bin/tomcat.bat</code>.
     </p>
 
     <p>
      Next you must tell Tomcat about the new context which will run Cocoon requests. To do
      this edit the file <code>$TOMCAT_HOME/conf/server.xml</code> and add the following line:
     </p>
 
 <source><![CDATA[
 <Context path="/cocoon" docBase="webapps/cocoon" debug="0" reloadable="true" >
 </Context>
 ]]></source>
 
      <p>
      This tells Tomcat that requests that come in under that partial path "/cocoon" should
      be mapped to the context defined in the directory "webapps/cocoon". We will set that up
      shortly.
      </p>
 
     <p>
      Next we need to tell Apache to forward the same partial pathnames to Tomcat. This is done
      by editing the tomcat <code>.conf</code> file (it's called <code>tomcat-apache.conf</code> if you're using Tomcat 3.1 and
      Apache 1.3.12) in your Apache setup. Add the following lines:
     </p>
 
 <source><![CDATA[
 Alias /cocoon $TOMCAT_HOME/webapps/cocoon
 <Directory "$TOMCAT_HOME/webapps/cocoon">
     Options Indexes FollowSymLinks
 </Directory>
 ApJServMount /cocoon /cocoon
 <Location /cocoon/WEB-INF/ >
     AllowOverride None
     deny from all
 </Location>
 ]]></source>
 
      <p>
      This tells Apache to direct requests that come in under that partial path "/cocoon" to
      the directory under Tomcat (<code>$TOMCAT_HOME/webapps/cocoon</code>).
      </p>
 
     <p>
      Finally, we need to set up the actual context that we have defined and pointed requests
      to above. To do this, we need to create a new directory in webapps called cocoon. Then
      we need to make a sub-directory that describes to Tomcat how to map particular files to
      Cocoon, then we need to fill the sub-directory with our Cocoon source files (<code>.xml</code> files).
     </p>
 
     <p>
      First make a directory and its subdirectory:
     </p>
 
 <source><![CDATA[
 mkdir $TOMCAT_HOME/webapps/cocoon
 mkdir $TOMCAT_HOME/webapps/cocoon/WEB-INF
 ]]></source>
 
     <p>
      Next copy the template files from the Cocoon distribution:
     </p>
 
 <source><![CDATA[
 cp $COCOON_HOME/src/WEB-INF/web.xml $TOMCAT_HOME/webapps/cocoon/WEB-INF
 cp $COCOON_HOME/conf/cocoon.properties $TOMCAT_HOME/webapps/cocoon/WEB-INF
 ]]></source>
 
     <p>
      Next you need to edit the <code>$TOMCAT_HOME/webapps/WEB-INF/web.xml</code> file to point to the
      Cocoon properties file in the same directory. Do this by changing the text
      <code>conf/cocoon.properties</code> to <code>WEB-INF/cocoon-properties</code>. Note that this path is a relative
      path must be so. Don't try to use an absolute path here. It won't work. Also note that
      the web.xml file describes how to map .xml requests to the Cocoon servlet.
     </p>
 
     <p>
      Next you need to populate the cocoon context with source <code>.xml</code> files. For testing purposes
      you can just use the samples that come along with Cocoon.
     </p>
 
  <source><![CDATA[
 cp -R $COCOON_HOME/samples $TOMCAT_HOME/webapps/cocoon/servlets
  ]]></source>
 
      <p>
      Finally, you need to stop Tomcat, stop Apache, then restart the two in order to make
      all of the new settings load. You should be able to access pages like 
      http://localhost/cocoon/Cocoon.xml and http://localhost/cocoon/servlets/index.xml
     </p>
 
 
   <note>
    Make sure that <code>xerces.jar</code> is located <strong>before</strong> 
    <code>xml.jar</code> otherwise Cocoon won't run. To do this, rename 
    <code>xml.jar</code> as <code>zxml.jar</code> to be placed later in
    alphabetical order.
   </note>
  </s2>

<s2 title="Installing Cocoon on New Atlanta's ServletExec 2.2">

<p>After you have obtained all the jar packages you need
(see the above section), you should add
them to your <code>Classpath.pref</code> file.
Then, add this to the <code>servlets.properties</code> file:</p>

<source>servlet.Cocoon.code=org.apache.cocoon.Cocoon
servlet.Cocoon.initArgs=properties=/web/var/tmp/cocoon/cocoon.properties
</source>

<p>and this to the <code>rules.properties</code> file:</p>

<source>*.xml=Cocoon</source>

<p>
to provide the initArgs and extension association for Cocoon.  Once
the web server is restarted to pick up the new configuration,
everything should work ok - try accessing the samples contained in the
distribution to see Cocoon in action or the /Cocoon.xml page for
Cocoon internal status.
</p>

<p>
You could also make these three configuration changes via
 the servlet/admin GUI interface if you're not into editing files.
</p>

</s2>

  <s2 title="Installing Cocoon on BEA WebLogic (version 4.5.1)">
   <p>
    After you have obtained all the jar packages you need (see the above
    section), you should add all of them (included the <code>cocoon.jar</code>
    package to your <code>weblogic.class.path</code> variable either
    using the <em>t3config</em> utility or use the <code>-Dweblogic.class.path</code>
    argument with the java runtime that invokes the system.
   </p>
   <p>
    Once you've done that, you should register Cocoon by adding these lines
    to your configuration files:
   </p>
<source>weblogic.httpd.register.*.xml=\org.apache.cocoon.Cocoon
weblogic.httpd.initArgs.*.xml=\properties=[path-to-cocoon]/bin/cocoon.properties</source>
   <p>
    making sure that you replaced <em>[path-to-cocoon]</em> with the actual
    path in your system.
   </p>

   <p>
    At this point, you should check if your system matches the global
    considerations about Cocoon properties. Usually, you might want to give
    the installation a try as it is and then read again that section if
    something goes wrong. Most installations don't need any changes to
    be operational.
   </p>

   <p>
    Everything should be configured fine. Restart Weblogic
    and try accessing the samples contained in the distribution to see
    Cocoon in action or the <code>/Cocoon.xml</code> page for Cocoon internal
    status.
   </p>

  </s2>
  
<s2 title="Installing Cocoon on BEA WebLogic (version 5.1)">
 <p>WLS 5.1 implements Servlet 2.2. so it plugs in easily. Here's a quick recipe:</p>

 <ul>
  <li>Add the xerces, xalan, fop, servlet, and cocoon JAR files (from the
   distribution) to your CLASSPATH. (See below). If you're using Java
   2, you should also add the tools.jar file from the JDK distribution
   to your CLASSPATH.</li>
  <li>Create a new subdirectory tree of your WLS run time directory
   "cocoonwar/WEB-INF" and copy the default web.xml file (from the
   src directory of the distribution) there.</li>
  <li>Copy the cocoon.properties from the conf directory of the
   distribution to cocoonwar/WEB-INF and updated the web.xml file to 
   refer to it.</li>
  <li>Copy the samples directory from the distribution to cocoonwar</li>
  <li>Map the web application into the WLS URI name space by adding the
   following line to your weblogic.properties file: <code>weblogic.httpd.webApp.cocoon=cocoonwar</code>
  </li>
 </ul>

 <p>Start WLS, point your browser at <em>http://localhost:7001/cocoon/samples/index.xml</em>
 and away you go.</p>

 <s3 title="Classpaths and XSP">
 
 <p>To support hot deployment of EJB's and Servlets, WebLogic Server
  uses its own class loader with its own classpath (the "WebLogic
  classpath"). Normally you'd put all the WebLogic Server container
  code, JDBC drivers, etc. in your Java CLASSPATH (so that WebLogic
  Server can start up) and add all your application code (stuff that
  needs to be able to be redeployable) to the WebLogic classpath.</p>

  <p>Cocoon is effectively "container" code, and the XSP processor uses
  dynamic classloading which only understands the Java CLASSPATH, so
  you should put all of the Cocoon jars in CLASSPATH.</p>

  <p>The big problem with this is that you can't use any code that loads
  from the WebLogic classpath within XSP's. This includes all of the
  WebLogic API, so is a PITA. To overcome this, either the way Cocoon
  loads classes needs to be modified, or the
  WebLogic Server class loader needs to be disabled (in which case you
  have to be willing to live without hot redeployment).</p>

  <p>To disable the WebLogic class loader, put your application classes,
  the Cocoon jars and _all_ of the WebLogic Server stuff into the Java
  CLASSPATH add -Dweblogic.system.disableWeblogicClassPath=true to the
  Java command at the end of you WebLogic start script.</p>
 </s3>
 
 <p>The above will also work for installing Cocoon in the BEA WebLogic
 Enterprise 5.1 J-Engine.</p>

</s2>

  <s2 title="Installing Cocoon on JRun">
   <p>
     To configure JRun, you must set up both JRun and the web server
     of your choice to work with Cocoon.  We assume that you already
     have a generic JRun installation that works with your web server.
   </p>
   <p>
     For the JRun portion, you must add all Cocoon jars to the java.classpath
     in [jrun-home]/jsm-default/properties with something like:
   </p>
<source>java.classpath=[previous jrun jars]:[cocoon-home]/lib/xerces.jar:
[cocoon-home]/lib/stylebook.jar:[cocoon-home]/lib/fop.jar:
[cocoon-home]/bin/cocoon.jar:[cocoon-home]/lib/xalan.jar:
[cocoon-home]/lib/turbine-pool.jar</source>
   <p>
    Note that all newlines are added for readability and should not
    actually be in the configuration file.  All jars should be listed
    upon the same line. 
   </p>

   <p>
    Now, modify [jrun-home]/jsm-default/services/jse/properties/rules.properties
    and add the line:
   </p>

<source>*.xml=org.apache.cocoon.Cocoon</source>

   <p>
    In [jrun-home]/jsm-default/services/jse/properties/servlets.properties,
    add the lines:
   </p>

<source>servlets.properties:servlet.org.apache.cocoon.Cocoon.code=org.apache.cocoon.Cocoon
servlets.properties:servlet.org.apache.cocoon.Cocoon.args=properties=[cocoon-home]/conf/cocoon.properties
servlets.properties:servlet.org.apache.cocoon.Cocoon.preload=false</source>

   <p>
    And finally, change the defaultdocs line in
    [jrun-home]/jsm-default/services/jse/properties/files.properties
    and add "index.xml" so that the line
    looks something like:
   </p>

<source>defaultdocs=index.html,index.jsp,index.xml</source>

   <p>
     Since JRun is web server independent, you must configure JRun and Cocoon to
     work with your webserver.  Again, we assume that you already have JRun
     installed and working for your particular webserver.  We give
     additional instructions only for making Cocoon work.
   </p>

  <s3 title="Cocoon with JRun and Apache">

   <p>
    Add the following to [apache path]/conf/httpd.conf
   </p>

<source>Action cocoon /servlet/org.apache.cocoon.Cocoon
AddHandler cocoon xml
Alias /cocoon/ "[cocoon-home]"</source>

   <p>
    The "Alias" line above is optional; but it will make
    testing the setup much easier.  To verify that all is working,
    make sure to test out the XSP demos.  If you get a
    java.lang.NoSuchMethodError: org.w3c.dom.Node error, try moving
    the xerces.jar to the front of JRun's java.classpath, restart
    JRun, and try the XSP again.
   </p>

  </s3>

  <s3 title="Cocoon with JRun and other web servers (iPlanet, IIS, etc)">
   <p>Add your sucessful installation method here.  Volunteers welcome!</p>
  </s3>

  </s2>

  <s2 title="Installing Cocoon on iPlanet Web Server 4.x">
   <p>This has been tested on v4.1 under NT 4.</p>
   
   <s3 title="If you prefer working with your file editor">
    <p>Edit your <code>servlets.properties</code> file in the config folder 
    of your server (something like <code>C:\Netscape\Server4\https-something.somewhere.com\config</code>), 
    add the following lines:</p>
    
<source><![CDATA[servlet.cocoon.code=org.apache.cocoon.Cocoon
servlet.cocoon.initArgs=properties=<yourpath to cocoon>/cocoon/conf/cocoon.properties]]>
</source>

    <p>In the <code>jvm12.conf</code>, add all the needed ".jar" to the <code>jvm.classpath</code> line 
    and uncomment it. This would make the following line, for example, if you 
    installed Netscape on D: drive:</p>

    <source>jvm.classpath=d:/Netscape/Server4/plugins/samples/servlets/beans.10/SDKBeans10.jar;d:/Netscape/Server4/plugins/samples/servlets/beans/SDKBeans.jar;d:/Netscape/Server4/bin/https/jar/Bugbase.jar;d:/Netscape/Server4/bin/https/jar/Calljsac.jar;D:/Netscape/Server4/docs/cocoon/bin/cocoon.jar;D:/Netscape/Server4/docs/cocoon/lib/fop_0_12_1.jar;D:/Netscape/Server4/docs/cocoon/lib/stylebook-1.0-b2.jar;D:/Netscape/Server4/docs/cocoon/lib/xalan_1_0_1.jar;D:/Netscape/Server4/docs/cocoon/lib/xerces_1_0_3.jar</source>

    <p>In the rules.properties file, add the following line (this is made to turn around a regexp bug in iWS):</p>

    <source>@.*[.]xml=cocoon</source>
   </s3>
   
   <s3 title="If you prefer the GUI interface">
    <p>Everything is in the "Servlets" tab of your server setting:</p>
    <ol>
     <li>You need to set first "Configure Servlet Attributes". <strong>Don't try to set the classpath here</strong>. It is of no use :-(</li>
      <sl>
       <li>Servlet Name: Cocoon</li>
       <li>Servlet Code (class name): org.apache.cocoon.Cocoon</li>
       <li>Servlet Args: properties=&lt;yourpath to cocoon&gt;/cocoon/conf/cocoon.properties (This is a disk path)</li>
      </sl>
     <li>Then, go to "Configure JVM Attributes" and add to the classpath the 
     path to the cocoon jar (like the jvm.classpath value in the above section)</li>
     <li>To finish, go to "Configure Servlet Virtual Path Translation" and add 
     the rule for "*.xml" to point to cocoon servlet:</li>
     <sl>
      <li>Virtual Path: @.*[.]xml</li>
      <li>Servlet Name: cocoon</li>
     </sl>
    </ol>
   </s3>
  </s2>
  
  <s2 title="Installing Cocoon on other platforms">
   <p>Yet to be written! <em>Volunteers welcome!</em></p>
  </s2>

 </s1>

 <s1 title="Working Systems">
  <p>
   Cocoon has been reported to be working on these systems:
  </p>

  <table>
  <tr>
   <th>Operating System</th>
   <th>Web Server</th>
   <th>Servlet Engine</th>
   <th>JVM</th>
  </tr>
  <tr>
   <td>RedHat Linux 6.0</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.0</td>
   <td>IBM JDK 1.1.8</td>
  </tr>
  <tr>
   <td>RedHat Linux 6.0</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.1b3</td>
   <td>IBM JDK 1.1.8</td>
  </tr>
  <tr>
   <td>RedHat Linux 6.0</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.0</td>
   <td>Blackdown JDK 1.2pre2</td>
  </tr>
  <tr>
   <td>RedHat Linux 6.1</td>
   <td>Apache 1.3.9</td>
   <td>JRun 2.3.3</td>
   <td>IBM JRE 1.1.8</td>
  </tr>
  <tr>
   <td>RedHat Linux 6.1 (i686)</td>
   <td>Apache 1.3.11</td>
   <td>Apache JServ 1.1</td>
   <td>Sun JDK 1.2.2</td>
  </tr>
  <tr>
   <td>RedHat Linux 6.1 (i686)</td>
   <td>Apache 1.3.11 + mod_ssl 2.5.0</td>
   <td>Apache JServ 1.1</td>
   <td>IBM JDK 1.1.8</td>
  </tr>
  <tr>
   <td>Windows 98</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.0</td>
   <td>Sun JDK 1.2.2</td>
  </tr>
  <tr>
   <td>Windows 98</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.0</td>
   <td>IBM JDK 1.1.7</td>
  </tr>
  <tr>
   <td>Windows 98</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.1b3</td>
   <td>Sun JDK 1.2.2</td>
  </tr>
  <tr>
   <td>Windows 98</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.1b3</td>
   <td>IBM JDK 1.1.7</td>
  </tr>
  <tr>
   <td>Windows 98</td>
   <td>MS Personal Web Server</td>
   <td>ServletExec 2.2</td>
   <td>Sun JDK 1.2.1</td>
  </tr>
  <tr>
   <td>Windows NT 4.0</td>
   <td>IIS 4.0</td>
   <td>ServletExec 2.2</td>
   <td>Sun JDK 1.2.1</td>
  </tr>
  <tr>
   <td>Windows NT 4.0</td>
   <td>IIS 4.0</td>
   <td>JRun 2.3.3</td>
   <td>Sun JDK 1.2.1</td>
  </tr>
  <tr>
   <td>Windows NT 4.0</td>
   <td>Apache 1.3.9</td>
   <td>JRun 2.3.3</td>
   <td>Sun JDK 1.2.2</td>
  </tr>
  <tr>
   <td>Windows NT 4.0</td>
   <td colspan="2">Apache Jakarta Tomcat 3.1 Milestone 1</td>
   <td>Sun JDK 1.2.2</td>
  </tr>
  <tr>
   <td>MacOS 8.6</td>
   <td>WebSTAR 4.0</td>
   <td>JRun 2.3</td>
   <td>MrJ 2.1.4</td>
  </tr>
  <tr>
   <td>MacOS 8.6</td>
   <td>WebSTAR 4.0</td>
   <td>ServletExec 2.1</td>
   <td>Mrj 2.1.4</td>
  </tr>
  <tr>
   <td>MacOS 8.6</td>
   <td>Quid Pro Quo 2.1.3</td>
   <td>ServletExec 2.2</td>
   <td>Mrj 2.1.4</td>
  </tr>
  <tr>
   <td>SunOS Netria 5.6</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.1b3</td>
   <td>Sun JDK 1.1.7</td>
  </tr>
  <tr>
   <td>FreeBSD 3.4</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.0</td>
   <td>Blackdown JDK 1.1.8</td>
  </tr>
  <tr>
   <td>SCO OpenServer 5</td>
   <td colspan="2">WebLogic 4.5.1</td>
   <td>SCO JDK 1.1.7A</td>
  </tr>
  <tr>
   <td>MacOS 8.5+</td>
   <td colspan="2">Resin 1.1b</td>
   <td>MRJ 2.2</td>
  </tr>
  <tr>
   <td>FreeBSD 3.4-STABLE with linux_base-6.1 for linux-emulation</td>
   <td colspan="2">Jetty Java HTTP Server v2.3.3</td>
   <td>Blackdown jdk-1.2.2-RC4-linux-i386-glibc</td>
  </tr>
  <tr>
   <td>SuSE 6.3 Linux</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.1</td>
   <td>Sun JDK 1.2.2</td>
  </tr>
  <tr>
   <td>OS/2 Warp 4 FP 12</td>
   <td colspan="2">Gefion Software LiteWebServer</td>
   <td>IBM JDK 1.1.8</td>
  </tr>
  <tr>
   <td>SGI IRIX 6.5.7</td>
   <td>Apache 1.3.12</td>
   <td>Apache JServ 1.1</td>
   <td>Sun JDK 1.2.1 (SGI)</td>
  </tr>
  <tr>
   <td>Microsoft Windows 2000 Professional</td>
   <td>Apache 1.3.12</td>
   <td>Apache JServ 1.1</td>
   <td>Sun JDK 1.2.2</td>
  </tr>
  <tr>
   <td>Windows NT 4.0 Sp6a</td>
   <td>Apache 1.3.11</td>
   <td>Apache JServ 1.1</td>
   <td>Sun JDK 1.2.2</td>
  </tr>
  <tr>
   <td>Solaris 2.5.1</td>
   <td>Netscape-Enterprise/3.6 SP3</td>
   <td>ServletExec 2.2</td>
   <td>Sun JDK 1.2.1</td>
  </tr>
  <tr>
   <td>Windows NT 4.0 SP4</td>
   <td colspan="2">BEA WebLogic Server 5.1 SP3</td>
   <td>Sun JDK 1.2.2</td>
  </tr>
  <tr>
   <td>RedHat Linux 6.2 (i686)</td>
   <td>Apache 1.3.12 + mod_ssl 2.6.5</td>
   <td>JRun 2.3.3</td>
   <td>Sun JDK 1.2.2 Standard Edition</td>  
  </tr>
  </table>

  <p>
   Please, submit your feedback on the cocoon user mail list (nowhere else!) if
   you were able to install Cocoon on a different combination not listed above.
   Thanks.
  </p>
 </s1>
</body>
</document>

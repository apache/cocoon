<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "../dtd/document-v10.dtd">

<document>
 <header>
  <title>Installing Cocoon</title>
  <authors>
   <person name="Stefano Mazzocchi" email="stefano@apache.org"/>
   <person name="Brett McLaughlin" email="bmclaugh@algx.net"/>
   <person name="Russell Castagnaro" email="russell@synctank.com"/>
  </authors>
 </header>
 
 <body>
 
 <s1 title="System Requirements">
  <p>
   Cocoon requires the following systems to be already installed in your
   system:
  </p>
  
  <ul>
   <li><strong>Java Virtual Machine</strong>
    A Java 1.1 or greater compatible virtual machine must be present for both
    command line and servlet type usage of Cocoon. Note that all servlet engines
    require a JVM to run so if you are already using servlets you already have
    one installed.
   </li>
   <li><strong>Servlet Engine</strong>
    A Servlet 2.x compliant servlet engine  must be present in order to support 
    servlet operation and dynamic request handling. Note that this requirement
    is optional for command line operation.
   </li>
  </ul>
 </s1>
 
 <s1 title="Required Components">
  <p>
   Cocoon is a publishing framework and was designed to be highly modular to
   allow users to choose their preferred implementation for the required
   component and to allow better and faster parallel development.
  </p>
  
  <p>
   Here is a list of supported components with their minimum version required
   to operate with this version of Cocoon:
  </p>
  
  <table>
   <caption>XML Parsers</caption>
    <tr>
     <th>Name</th>
     <th>Version</th>
     <th>Location</th>
    </tr>
    <tr>
     <td>Apache Xerces</td>
     <td>1.0.1 (java edition)</td>
     <td><link href="http://xml.apache.org/dist/">xml.apache.org</link></td>
    </tr>
    <tr>
     <td>Sun ProjectX</td>
     <td>TR2</td>
     <td><link href="http://developer.java.sun.com/developer/products/xml/">java.sun.com</link></td>
    </tr>
    <tr>
     <td colspan="3">Cocoon comes preconfigured for Xerces</td>
    </tr>
  </table>
   
  <table>
   <caption>XSLT Processor</caption>
    <tr>
     <th>Name</th>
     <th>Minimum Version</th>
     <th>Location</th>
    </tr>
    <tr>
     <td>Apache Xalan</td>
     <td>0.19.0</td>
     <td><link href="http://xml.apache.org/dist/">xml.apache.org</link></td>
    </tr>
    <tr>
     <td>James Clark's XT</td>
     <td>19991102</td>
     <td><link href="http://www.jclark.com/">www.jclark.com</link></td>
    </tr>
    <tr>
     <td colspan="3">Cocoon comes preconfigured for Xalan</td>
    </tr>
  </table>   
   
  <table>
   <caption>Other Packages</caption>
    <tr>
     <th>Name</th>
     <th>Minimum Version</th>
     <th>Location</th>
    </tr>
    <tr>
     <td>Apache FOP</td>
     <td>0.12.0</td>
     <td><link href="http://xml.apache.org/dist/">xml.apache.org</link></td>
    </tr>
    <tr>
     <td>FESI EcmaScript Engine</td>
     <td>1.2.1</td>
     <td><link href="http://home.worldcom.ch/jmlugrin/fesi/download.html">home.worldcom.ch/jmlugrin/fesi</link></td>
    </tr>
    <tr>
     <td>GNU Regexp</td>
     <td>1.0.8</td>
     <td><link href="http://www.cacas.org/java/gnu/regexp/">www.cacas.org/java/gnu/regexp</link></td>
    </tr>
    <tr>
     <td>JNDI API</td>
     <td>1.2.1</td>
     <td><link href="http://java.sun.com/products/jndi/index.html">java.sun.com</link></td>
    </tr>
  </table>   
  
  <note>
   Cocoon is strictly dependent on some printing classes contained into Xerces
   so, even if you use another parser, you should still keep Xerces visible
   to Cocoon.
  </note>
  
  <p>
   Being an Apache project, Cocoon focuses on Apache technologies but we are
   dedicated to support all compatible XML/XSL technologies and will welcome
   contributions to add support for other components not currently supported.
  </p>
  
  <p>
   So this is your shopping list for components for complete operation:
  </p>
   
   <ul>
    <li>Apache Xerces (required for the formatting classes <em>org.apache.xml.serialize</em>)</li>
    <li>Your favorite XML parser</li>
    <li>Your favorite XSLT processor</li>
    <li>Apache FOP (optional, unless you want PDF rendering)</li>
    <li>GNU Regexp (optional, unless you use <em>ProducerFromMap</em>)</li>
    <li>FESI (optional, unless you use <em>DCP</em>)</li>
    <li>JNDI (optional, unless you use the <em>LDAP processor</em>)</li>
   </ul>
   
  <p>
   All right. Now that you have downloaded all the components you need, go on
   and jump to the installation instructions for your servlet engine.
  </p>
 </s1>
 
 <s1 title="Installing Cocoon">
  <p>
   Being Cocoon a servlet, you should be able to install it on every compliant
   servlet engine by associating the "org.apache.cocoon.Cocoon" servlet
   with the requests you want it to handle. In order to do this, there is no
   standard way, so we try to provide detailed information for the most used
   servlet systems.
  </p>
  
  <s2 title="General considerations">
   <p>
    There are some general considerations that apply to all systems.
   </p>
   
   <p>
    Since there is no portable way, in a Java platform, to tell how much memory an object
    is using, the memory cache works in a rather cumbersome manner:  you set up
    a lower limit that the cache must always leave free for the JVM operation. 
    This means, that if the memory limit is 200Kb, Cocoon uses all your JVM
    heap size to store pages in memory and makes sure that 200Kb are available
    for other operations.
   </p>
   
   <p>
    This does not impact the JVM operation, if enough memory is left for the
    normal operation. You must be aware of the fact that leaving Cocoon with
    too little memory for operation does impact peformance since the JVM
    garbage collector has to do more work to keep up with execution and 
    memory cleanup. Sometimes, you may even end up having OutOfMemoryExceptions
    if your limit is lower than the memory required for the operation.
   </p>
   
   <p>
    A good way to control your memory is to setup your JVM with a fixed
    heap limit and to give it enough memory to start. This is done by using
    command line parameters for your java interpreter such as:
   </p>
   
   <ul>
    <li>Startup heap size:
     <ul>
      <li>java 1.1 - <code>-ms[size]</code></li>
      <li>java 1.2 - <code>-Xms[size]</code></li>
     </ul>
    </li>
    <li>Maximum heap size:
     <ul>
      <li>java 1.1 - <code>-mx[size]</code></li>
      <li>java 1.2 - <code>-Xmx[size]</code></li>
     </ul>
    </li>
   </ul>
     
   <p>
    A well balanced system should have something like 8Mb start heap, 2Mb
    Cocoon memory limit and 64Mb or greater max heap, but these depend heavily
    on your system load/configuration to be generally meaningful.
   </p>
   
   <p>
    To change the cocoon object store memory limit open you should change the
    following property in the <code>cocoon.properties</code> file.
   </p>
   
<source>store.memory = 200000</source>   
    
   <p>
    Another important part of Cocoon is the page compiler used inside the
    XSP processor which store the generated/compiled pages on file system. 
    The default directory is <code>./repository</code> which is usually relative
    to the web server or servlet engine working directory.
   </p>
   
   <p>
    If you experience
    troubles (such as not having reading/writing permissions) or you want to 
    locate this directory somewhere else, you have to change the
   </p>
   
<source>processor.xsp.repository = ./repository</source>

   <p>
    property in the cocoon configuration file.
   </p>
   
   <p><strong>Warning:</strong>
    Since this directory may contain security sensible information, make sure 
    you deny access (even read-only) to untrusted users.
   </p>
  </s2>
  
  <s2 title="Installing Cocoon on Apache JServ">
   <p>
    Apache JServ has one configuration file for the whole engine (normally called
    <code>jserv.properties</code>) and one for each servlet zone. Please, refer
    to the Apache JServ documentation for more information on this.
   </p>
   
   <p>
    First thing to do is to make sure that Cocoon and all the needed components
    (as explained in the previous section) are visible. This implies adding 
    this to the servlet engine classpath by adding a line like this in your 
    <code>jserv.properties</code> file for each jar package you have to install
    (after substituting <em>[path-to-jar]</em> with the path to the jar file and
    <em>[jar-name]</em> with the package file name).
   </p>
    
   <source>wrapper.classpath=[path-to-jar]/[jar-name].jar</source>
   
   <p>
    Here is an example:
   </p>
   
<source>
wrapper.classpath=/usr/local/java/lib/cocoon.jar
wrapper.classpath=/usr/local/java/lib/xerces.jar
wrapper.classpath=/usr/local/java/lib/xalan.jar
wrapper.classpath=/usr/local/java/lib/fop.jar
wrapper.classpath=/usr/local/java/lib/regexp.jar
wrapper.classpath=/usr/local/java/lib/jndi.jar
</source>
   
   <note>
    from this version of Cocoon the <code>Cocoon.jar</code> 
    package should be added to the servlet engine classpath as any other
    required package (as shown above).
   </note>
   
   <p>
    At this point, you must set the Cocoon configurations. To do this, you 
    must choose the servlet zone(s) where you want Cocoon to reside (Note that
    Cocoon can safely reside on different servlet zones with different
    configuration files). If you don't know what a servlet zone is, you 
    probably want to open the <code>zone.properties</code> file that represents 
    the default servlet zone.
   </p>
   
   <p>
    To configure Cocoon, you must pass the <code>cocoon.properties</code>
    file location to the servlet by adding the following to the 
    <code>zone.properties</code> file (or each servlet zone file you want
    Cocoon to reside):
   </p>
   
   <source>servlet.org.apache.cocoon.Cocoon.initArgs=properties=[path-to-cocoon]/bin/cocoon.properties</source>
  
   <p>
    Note that you should not need to change anything from the template
    properties file found in the distribution (under <code>/conf/</code>), 
    but you must edit it for more complex operation. Please refer directly to 
    the file that contains breaf indications and comments on the different 
    configurations, but you don't need to care about that at this point.
   </p>
   
   <p>
    Now your cocoon servlet is properly configured, but you should tell Apache
    to direct any call to an XML file (or any other file you want Cocoon to
    process) to the Cocoon servlet. To do this, you should add the following line
    to your <code>mod_jserv.conf</code> or <code>jserv.conf</code> file:
   </p>
    
   <source>ApJServAction .xml /servlet/org.apache.cocoon.Cocoon</source>
  
   <p>
    where <em>.xml</em> is the file extention you want to map to the servlet
    and <em>/servlet/</em> is the mount point of your servlet zone (and the
    above is the standard name for servlet mapping for Apache JServ).
   </p>

   <p>
    At this point, you should check if your system matches the global 
    considerations about Cocoon properties. Usually, you might want to give
    the installation a try as it is and then read again that section if
    something goes wrong. Most installations don't need any changes to
    be operational.
   </p>
       
   <p>
    Everything should be configured fine. Restart both Apache and Apache JServ
    and try accessing the samples contained in the distribution to see
    Cocoon in action or the <code>/Cocoon.xml</code> page for Cocoon internal
    status.
   </p>
   
   <p>
    <strong>Note</strong>: you may want Cocoon to handle two different 
    extentions with different configurations. To do this, you must set the two 
    different configurations in two different servlet zones, then associate the 
    extentions like this:
   </p>
   
<source>ApJServAction .xml1 /zone1/org.apache.cocoon.Cocoon
ApJServAction .xml2 /zone2/org.apache.cocoon.Cocoon</source>           

   <p>
    where <em>.xml1</em> is handled by the Cocoon residing on <em>zone1</em>
    and <em>.xml2</em> is handled by the Cocoon residing on <em>zone2</em>
    which have different configurations and thus different behavior.
   </p>
  </s2>
  
  <s2 title="Installing Cocoon on Apache Tomcat">
    <p>
     Tomcat has two basic methods of locating Java classes for the runtime environment.
     The first is the overall classpath that Tomcat uses to run, and this is the
     classpath provided to Java classes that use constructs such as
     <code>Class.forName().newInstance()</code>.  The second classpath is
     associated with a specific context, and is somewhat analagous to the
     servlet zones used in Apache JServ (see section above).
    </p>

    <p>
     Because the Cocoon framework utilizes <code>Class.forName()</code> and other
     dynamic instance handling techniques, the Cocoon classes need to have its
     classpath aware of the component classes used within the framework.  To do 
     this, take all the required components (see above) and put them in your 
     <em>&lt;Tomcat-Root&gt;/lib</em> directory.  This is the standard location 
     for Tomcat core libraries. To ensure that Tomcat will use these, you need 
     to edit the Tomcat startup file.
    </p>
    
    <p>
     On Windows, this is <em>&lt;Tomcat-Root&gt;/tomcat.bat</em> and on
     Unix, this is <em>&lt;Tomcat-Root&gt;/tomcat.sh</em>.  In this 
     file you must add all the component jar files to Tomcat's classpath.
    </p>

    <note>
     from this version of Cocoon the <code>Cocoon.jar</code> 
     package should be added to the servlet engine classpath as any other
     required package (as shown above).
    </note>
   
    <p>
     Next you need to tell your context where Cocoon can find it's properties 
     file, as well as to map Cocoon to XML document requests.
     Make sure you have a <em>web.xml</em> file in your context's
     <em>WEB-INF</em> directory (look in <code>src/WEB-INF/</code> to find a
     template <em>web.xml</em>).  This file specifies servlet mappings
     and initial arguments to servlets and looks like this:
    </p>

<source><![CDATA[
 <servlet>
  <servlet-name>org.apache.cocoon.Cocoon</servlet-name>
  <servlet-class>org.apache.cocoon.Cocoon</servlet-class>
  <init-param>
   <param-name>properties</param-name>
   <param-value>
     [path-to-cocoon.properties]/cocoon.properties
   </param-value>
  </init-param>
 </servlet>
 
 <servlet-mapping>
  <servlet-name>org.apache.cocoon.Cocoon</servlet-name>
  <url-pattern>*.xml</url-pattern>
 </servlet-mapping>
]]></source>

    <p>
     Make sure you replaced the path to the Cocoon.properties file with the 
     actual location of that file on your system.
     Note that you should not need to change anything from the template
     properties file found in the distribution, but you must edit it for
     more complex operation. Please refer directly to the file that contains
     brief indications and comments on the different configurations, but you
     don't need to care about that at this point.
    </p>

   <p>
    At this point, you should check if your system matches the global 
    considerations about Cocoon properties. Usually, you might want to give
    the installation a try as it is and then read again that section if
    something goes wrong. Most installations don't need any changes to
    be operational.
   </p>

   <p>
    Everything should be configured fine. Restart both Apache and Tomcat
    and try accessing the samples contained in the distribution to see
    Cocoon in action or the <code>/Cocoon.xml</code> page for Cocoon internal
    status.
   </p>
       
    <note><strong>
     Tomcat 3.0 has a bug that prevents Cocoon operation. In order to make
     Cocoon work under Tomcat you need to download a newer version or, if 
     none is yet avaiable, build it from the latest source code found in the
     <code>jakarta-tomcat</code> CVS module under <em>jakarta.apache.org</em>.
     We apologize for this, but it's not something we can control or work
     around.
    </strong></note>
  </s2>

  <s2 title="Installing Cocoon on BEA WebLogic">
   <p>
    After you have obtained all the jar packages you need (see the above
    section), you should add all of them (included the <code>cocoon.jar</code>
    package to your <code>weblogic.class.path</code> variable either
    using the <em>t3config</em> utility or use the <code>-Dweblogic.class.path</code>
    argument with the java runtime that invokes the system.
   </p>
   <p>
    Once you've done that, you should register Cocoon by adding these lines
    to your configuration files:
   </p>
   <source>
    weblogic.httpd.register.*.xml=\org.apache.cocoon.Cocoon
    weblogic.httpd.initArgs.*.xml=\properties=[path-to-cocoon]/bin/cocoon.properties
   </source>
   <p>
    making sure that you replaced <em>[path-to-cocoon]</em> with the actual
    path in your system.
   </p>

   <p>
    At this point, you should check if your system matches the global 
    considerations about Cocoon properties. Usually, you might want to give
    the installation a try as it is and then read again that section if
    something goes wrong. Most installations don't need any changes to
    be operational.
   </p>
   
   <p>
    Everything should be configured fine. Restart Weblogic
    and try accessing the samples contained in the distribution to see
    Cocoon in action or the <code>/Cocoon.xml</code> page for Cocoon internal
    status.
   </p>
      
  </s2>
  
  <s2 title="Installing Cocoon on other platforms">
   <p>Yet to be written! <em>Volunteers welcome!</em></p>
  </s2>
  
 </s1>
 
 <s1 title="Working Systems">
  <p>
   Cocoon has been reported to be working on these systems:
  </p>
  
  <table>
  <tr>
   <th>Operating System</th>
   <th>Web Server</th>
   <th>Servlet Engine</th>
   <th>JVM</th>
  </tr>
  <tr>
   <td>RedHat Linux 6.0</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.0</td>
   <td>IBM JDK 1.1.8</td>
  </tr>
  <tr>
   <td>RedHat Linux 6.0</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.1b3</td>
   <td>IBM JDK 1.1.8</td>
  </tr>
  <tr>
   <td>RedHat Linux 6.0</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.0</td>
   <td>Blackdown JDK 1.2pre2</td>
  </tr>
  <tr>
   <td>RedHat Linux 6.1</td>
   <td>Apache 1.3.9</td>
   <td>JRun 2.3.3</td>
   <td>IBM JRE 1.1.8</td>
  </tr>
  <tr>
   <td>Windows 98</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.0</td>
   <td>Sun JDK 1.2.2</td>
  </tr>
  <tr>
   <td>Windows 98</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.0</td>
   <td>IBM JDK 1.1.7</td>
  </tr>
  <tr>
   <td>Windows 98</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.1b3</td>
   <td>Sun JDK 1.2.2</td>
  </tr>
  <tr>
   <td>Windows 98</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.1b3</td>
   <td>IBM JDK 1.1.7</td>
  </tr>
  <tr>
   <td>Windows 98</td>
   <td>MS Personal Web Server</td>
   <td>ServletExec 2.2</td>
   <td>Sun JDK 1.2.1</td>
  </tr>
  <tr>
   <td>Windows NT 4.0</td>
   <td>IIS 4.0</td>
   <td>ServletExec 2.2</td>
   <td>Sun JDK 1.2.1</td>
  </tr>
  <tr>
   <td>Windows NT 4.0</td>
   <td>IIS 4.0</td>
   <td>JRun 2.3.3</td>
   <td>Sun JDK 1.2.1</td>
  </tr>
  <tr>
   <td>Windows NT 4.0</td>
   <td>Apache 1.3.9</td>
   <td>JRun 2.3.3</td>
   <td>Sun JDK 1.2.2</td>
  </tr>
  <tr>
   <td>MacOS 8.6</td>
   <td>WebSTAR 4.0</td>
   <td>JRun 2.3</td>
   <td>MrJ 2.1.4</td>
  </tr>
  <tr>
   <td>MacOS 8.6</td>
   <td>WebSTAR 4.0</td>
   <td>ServletExec 2.1</td>
   <td>Mrj 2.1.4</td>
  </tr>
  <tr>
   <td>SunOS Netria 5.6</td>
   <td>Apache 1.3.9</td>
   <td>Apache JServ 1.1b3</td>
   <td>Sun JDK 1.1.7</td>
  </tr>
  <tr>
   <td>SCO OpenServer 5</td>
   <td colspan="2">WebLogic 4.5.1</td>
   <td>SCO JDK 1.1.7A</td>
  </tr>
  </table>
  
  <note>
   Eue to a bug in <link href="http://www.blackdown.org">Blackdown
   JDK 1.2pre2</link> for Linux, we suggest you to use green threads instead of the
   native ones which are much less stable, expecially highly concurrent operations
   like servlet engines and servlet execution.
  </note>
  <p>
   Please, submit your feedback if you were able to install Cocoon on a
   different combination not listed above. Thanks.
  </p>
 </s1>
</body></document>
<?xml version="1.0"?>
<!-- $Id: sitemap.xmap,v 1.6 2003/05/17 08:11:27 jefft Exp $ -->
<!--
Input Modules sample sitemap.

Author: Konstantin Piroumian "kpiroumian@apache.org" 
-->
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <!-- =========================== Resources =============================== -->
  <map:resources>
    <!-- This resource is used to create a composite page from menu and content -->
    <map:resource name="composite">
      <map:aggregate element="site">
        <map:part src="cocoon:/menu/{../0}"/>
        <map:part src="cocoon:/content/{../0}" label="content"/>
      </map:aggregate>
      <map:transform src="site2html.xsl">
        <map:parameter name="page" value="{../0}" />
      </map:transform>
      <map:serialize/>
    </map:resource>
  </map:resources>

  <!-- =========================== Pipelines ================================= -->
  <map:pipelines>
    <map:pipeline>

      <!-- Default URL matcher. Matches '/' URLs-->
      <map:match pattern="">
        <map:redirect-to uri="index.xsp" />
      </map:match>

      <!-- Generate dynamic output (simple.xsp) -->            
      <map:match pattern="*.xsp">
        <map:call resource="composite" />
      </map:match>                

      <map:match pattern="content/index.xsp">
        <map:generate src="index.xhtml"/>
        <map:serialize/>
      </map:match>                            

      <map:match pattern="content/request.xsp">
        <map:generate type="serverpages" src="properties.xsp">
          <map:parameter name="attributeNames" value="{request:attributeNames}"/>
          <map:parameter name="authType" value="{request:authType}"/>
          <map:parameter name="characterEncoding" value="{request:characterEncoding}"/>
          <map:parameter name="cookieMap" value="{request:cookieMap}"/>
          <map:parameter name="cookies" value="{request:cookies}"/>
          <map:parameter name="contentLength" value="{request:contentLength}"/>
          <map:parameter name="contentType" value="{request:contentType}"/>
          <map:parameter name="contextPath" value="{request:contextPath}"/>
          <map:parameter name="headers" value="{request:headers}"/>
          <map:parameter name="headerNames" value="{request:headerNames}"/>
          <map:parameter name="locale" value="{request:locale}"/>
          <map:parameter name="locales" value="{request:locales}"/>
          <map:parameter name="method" value="{request:method}"/>
          <!--map:parameter name="parameter-map" value="{request:parameterMap}"/-->
          <map:parameter name="parameterNames" value="{request:parameterNames}"/>
          <map:parameter name="pathInfo" value="{request:pathInfo}"/>
          <map:parameter name="pathTranslated" value="{request:pathTranslated}"/>
          <map:parameter name="protocol" value="{request:protocol}"/>
          <map:parameter name="queryString" value="{request:queryString}"/>
          <map:parameter name="remoteAddr" value="{request:remoteAddr}"/>
          <map:parameter name="remoteHost" value="{request:remoteHost}"/>
          <map:parameter name="remoteUser" value="{request:remoteUser}"/>
          <map:parameter name="requestURI" value="{request:requestURI}"/>
          <map:parameter name="requestedSessionId" value="{request:requestedSessionId}"/>
          <map:parameter name="requestedSessionIdFromCookie" value="{request:requestedSessionIdFromCookie}"/>
          <map:parameter name="requestedSessionIdFromURL" value="{request:requestedSessionIdFromURL}"/>
          <map:parameter name="requestedSessionIdValid" value="{request:requestedSessionIdValid}"/>
          <map:parameter name="scheme" value="{request:scheme}"/>
          <map:parameter name="secure" value="{request:secure}"/>
          <map:parameter name="serverName" value="{request:serverName}"/>
          <map:parameter name="serverPort" value="{request:serverPort}"/>
          <map:parameter name="servletPath" value="{request:servletPath}"/>
          <map:parameter name="session [truncated]" value="{request:concat('org. ... .', substring(session, 36))}"/>
          <map:parameter name="sitemapURI" value="{request:sitemapURI}"/>
          <map:parameter name="userPrincipal" value="{request:userPrincipal}"/>
        </map:generate>
        <map:transform src="properties2html.xsl">
          <map:parameter name="title" value="Request Input Module (RequestModule)"/>
        </map:transform>
        <map:serialize />
      </map:match>

      <map:match pattern="content/baselink.xsp">
        <map:generate type="serverpages" src="properties.xsp">
          <map:parameter name="(anything)" value="{baselink:}"/>
        </map:generate>

        <map:transform src="properties2html.xsl">
          <map:parameter name="title" value="BaseLink Input Module (BaseLinkModule)"/>
          <map:parameter name="description" value="Returns a relative path (../,
            ../../, etc) linking to the base of the current request URI.  In
            this demonstration, the request URI is {0} (an internal request not
            equivalent to what the user sees)"/>
        </map:transform>
        <map:serialize />
      </map:match>               

      <map:match pattern="requestparam">
        <map:redirect-to uri="requestparam.xsp?foo=foo+param&amp;bar=bar+param"/>
      </map:match>
      <map:match pattern="content/requestparam.xsp">
        <map:generate type="serverpages" src="properties.xsp">
          <map:parameter name="foo" value="{request-param:foo}"/>
          <map:parameter name="bar" value="{request-param:bar}"/>
        </map:generate>
        <map:transform src="properties2html.xsl">
          <map:parameter name="title" value="Request Parameter Input Module (RequestParameterModule)"/>
          <map:parameter name="description" value="Provides access to request
            parameters. Edit the URL of this page to see the request parameter
            values change (parts after the '?' are request parameters) ."/>
        </map:transform>
        <map:serialize />
      </map:match>

      <map:match pattern="content/session.xsp">
        <map:generate type="serverpages" src="properties.xsp">
          <map:parameter name="attributeNames" value="{session:attributeNames}"/>
          <map:parameter name="creationTime" value="{session:creationTime}"/>
          <map:parameter name="lastAccessedTime" value="{session:lastAccessedTime}"/>
          <map:parameter name="maxInactiveInterval" value="{session:maxInactiveInterval}"/>
          <map:parameter name="id" value="{session:id}"/>
          <map:parameter name="new" value="{session:new}"/>
        </map:generate>
        <map:transform src="properties2html.xsl">
          <map:parameter name="title" value="Session Input Module (SessionModule)"/>
          <map:parameter name="description" value="SessionModule provides access
            to Session object properties."/>
        </map:transform>
        <map:serialize />
      </map:match>               

      <map:match pattern="content/system-property.xsp">
        <map:generate type="serverpages" src="properties.xsp">
          <map:parameter name="java.version" value="{system-property:java.version}"/>
          <map:parameter name="java.vendor" value="{system-property:java.vendor}"/>
          <map:parameter name="java.vendor.url" value="{system-property:java.vendor.url}"/>
          <map:parameter name="java.home" value="{system-property:java.home}"/>
          <map:parameter name="java.vm.specification.version" value="{system-property:java.vm.specification.version}"/>
          <map:parameter name="java.vm.specification.vendor" value="{system-property:java.vm.specification.vendor}"/>
          <map:parameter name="java.vm.specification.name" value="{system-property:java.vm.specification.name}"/>
          <map:parameter name="java.vm.version" value="{system-property:java.vm.version}"/>
          <map:parameter name="java.vm.vendor" value="{system-property:java.vm.vendor}"/>
          <map:parameter name="java.vm.name" value="{system-property:java.vm.name}"/>
          <map:parameter name="java.specification.version" value="{system-property:java.specification.version}"/>
          <map:parameter name="java.specification.vendor" value="{system-property:java.specification.vendor}"/>
          <map:parameter name="java.specification.name" value="{system-property:java.specification.name}"/>
          <map:parameter name="java.specification.name" value="{system-property:java.specification.name}"/>
          <map:parameter name="java.class.path" value="{system-property:java.class.path}"/>
          <map:parameter name="java.ext.dirs" value="{system-property:java.ext.dirs}"/>
          <map:parameter name="os.name" value="{system-property:os.name}"/>
          <map:parameter name="os.arch" value="{system-property:os.arch}"/>
          <map:parameter name="os.version" value="{system-property:os.version}"/>
          <map:parameter name="file.separator" value="{system-property:file.separator}"/>
          <map:parameter name="path.separator" value="{system-property:path.separator}"/>
          <map:parameter name="line.separator" value="{system-property:line.separator}"/>
          <map:parameter name="user.name" value="{system-property:user.name}"/>
          <map:parameter name="user.home" value="{system-property:user.home}"/>
          <map:parameter name="user.dir" value="{system-property:user.dir}"/>
          <!-- Function call -->
          <map:parameter name="users-home-base" value="{system-property:substring-before(user.home, user.name)}"/>
        </map:generate>
        <map:transform src="properties2html.xsl">
          <map:parameter name="title" value="System Properties Input Module (SystemPropertiesModule)"/>
        </map:transform>
        <map:serialize />
      </map:match>               


      <map:match pattern="content/xml.xsp">
        <map:generate type="serverpages" src="properties.xsp">
          <map:parameter name="/forrestconf/@version" value="{myxml:/forrestconf/@version}"/>
          <map:parameter name="/forrestconf/skin" value="{myxml:/forrestconf/skin}"/>
          <map:parameter name="/*/base-url" value="{myxml:/*/base-url}"/>
          <!--
          <map:parameter name="slashdot-headline" value="{slashdot:/*:RDF/item[1]/title}"/>
          -->
        </map:generate>
        <map:transform src="properties2html.xsl">
          <map:parameter name="title" value="XML File Input Module (XMLFileModule)"/>  
          <map:parameter name="description" value="XMLFileModule uses an XML
            file as a data source, with XPath expressions as the key values. In
            this example, the keys identify nodes in
            context:///samples/modules/forrestconf.xml"/>
        </map:transform>
        <map:serialize />
      </map:match>

      <map:match pattern="content/defaults.xsp">
        <map:generate type="serverpages" src="properties.xsp">
          <map:parameter name="skin" value="{defaults:skin}"/>
          <map:parameter name="base-url" value="{defaults:base-url}"/>
        </map:generate>
        <map:transform src="properties2html.xsl">
          <map:parameter name="title" value="Defaults Input Module (DefaultsModule)"/>
          <map:parameter name="description" value="DefaultsModule
            contains 'default' values, hardcoded into cocoon.xconf.
            It is simply a lookup table containing static values."/>
        </map:transform>
        <map:serialize />
      </map:match>


      <map:match pattern="content/chain.xsp">
        <map:generate type="serverpages" src="properties.xsp">
          <map:parameter name="skin" value="{chain:skin}"/>
        </map:generate>
        <map:transform src="properties2html.xsl">
          <map:parameter name="title" value="Chaining Input module (ChainMetaModule)"/>
          <map:parameter name="description" value="ChainMetaModule
            iterates through a set of modules until one returns a
            non-null value for the specified key.  In this example, we
            chain together request-param, request-attr, session-attr
            and defaults modules.  The 'skin' value is taken from the
            first that returns a non-null value, usually 'defaults'.
            Try adding '?skin=myskin' to the URL, and it should
            change."/>
        </map:transform>
        <map:serialize />
      </map:match>


      <map:match pattern="content/date.xsp">
        <map:generate type="serverpages" src="properties.xsp">
          <map:parameter name="date" value="{date:date}"/>
        </map:generate>
        <map:transform src="properties2html.xsl">
          <map:parameter name="title" value="Date Input module (DateMetaModule)"/>
          <map:parameter name="description" value="Returns the current
            date and time.  The format is specified in cocoon.xconf"/>
        </map:transform>
        <map:serialize />
      </map:match>

      <map:match pattern="content/session-attr.xsp">
        <map:generate type="serverpages" src="properties.xsp">
          <map:parameter name="fruit" value="{session-attr:fruit}"/>               
        </map:generate>
        <map:transform src="properties2html.xsl">
          <map:parameter name="title" value="Session Attribute Input Module
            (SessionAttributeModule)"/>  
          <map:parameter name="description" value="SessionAttributeModule provides access
            to Session attributes."/>
        </map:transform>
        <map:serialize />
      </map:match>

      <map:match pattern="content/randomnumber.xsp">
        <map:generate type="serverpages" src="properties.xsp">
          <map:parameter name="x" value="{random:x}"/>
        </map:generate>
        <map:transform src="properties2html.xsl">
          <map:parameter name="title" value="Random number module (RandomNumberModule)"/>
          <map:parameter name="description" value="Returns a random number in a
            user-configurable range (by default 0 to 9999999999)"/>
        </map:transform>
        <map:serialize />
      </map:match>


      <map:match pattern="content/realpath.xsp">
        <map:generate type="serverpages" src="properties.xsp">
          <map:parameter name="/" value="{realpath:/}"/>
          <map:parameter name="/images" value="{realpath:/images}"/>
          <map:parameter name="/WEB-INF" value="{realpath:/WEB-INF}"/>
        </map:generate>
        <map:transform src="properties2html.xsl">
          <map:parameter name="title" value="RealPath Module (RealPathModule)"/>
          <map:parameter name="description" value="Returns the real path of a
            context-relative virtual path (if not deployed from a .war)."/>
        </map:transform>
        <map:serialize />
      </map:match>               
 
      <!-- Menu generation -->
      <map:match pattern="menu/*">
        <map:generate src="menu.xml"/>
        <map:transform src="menu2html.xsl">
          <map:parameter name="page" value="{1}" />
        </map:transform>
        <map:serialize/>
      </map:match>

      <!-- Display this sitemap source-->
      <map:match pattern="sitemap.xmap">
        <map:generate src="sitemap.xmap"/>
        <map:transform src="context://stylesheets/system/xml2html.xslt"/>
        <map:serialize/>
      </map:match>            

      <map:match pattern="*.css">
        <map:read src="{1}.css" mime-type="text/css"/>
      </map:match>

      <map:match pattern="images/*.gif">
        <map:read src="images/{1}.gif" mime-type="image/gif"/>
      </map:match>

    </map:pipeline>                
  </map:pipelines>
</map:sitemap>

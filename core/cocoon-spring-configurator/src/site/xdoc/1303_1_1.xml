<?xml version="1.0" encoding="UTF-8"?><!--
      Licensed to the Apache Software Foundation (ASF) under one
      or more contributor license agreements.  See the NOTICE file
      distributed with this work for additional information
      regarding copyright ownership.  The ASF licenses this file
      to you under the Apache License, Version 2.0 (the
      "License"); you may not use this file except in compliance
      with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing,
      software distributed under the License is distributed on an
      "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
      KIND, either express or implied.  See the License for the
      specific language governing permissions and limitations
      under the License.
    --><document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/XDOC/2.0" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd"><properties><title>Cocoon Spring Configurator - Basic Configuration</title><author email="cocoon-docs@apache.org">Apache Cocoon Documentation Team</author></properties><body>
         <div id="contentBody"><div id="bodyText"><h1 class="docTitle">Basic Configuration</h1><section name="Configuration" style="background:none;padding:0;"/><p>The Spring Configurator uses Spring's
<a href="http://static.springframework.org/spring/docs/2.0.x/reference/new-in-2.html#new-in-2-ioc-custom-configuration">extensible
XML authoring features</a> and therefore it can be directly used in your Spring
bean configurations. Usually you add the configurator to your global web
application context configuration (which is usually located at
<em>/WEB-INF/applicationContext.xml</em>). The extensible XML authoring requires
that you use the schema based configuration for Spring. Just add the required
namespace definition, a reference to the configurator XML schema to your bean
configuration:</p><pre>&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       <strong>xmlns:configurator="http://cocoon.apache.org/schema/configurator"</strong>
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                           <strong>http://cocoon.apache.org/schema/configurator http://cocoon.apache.org/schema/configurator/cocoon-configurator-1.0.1.xsd"</strong>&gt;
    ...
&lt;/beans&gt;
</pre><p>Then you can initialize the configurator by adding the <tt>settings</tt>
element to your bean configuration:</p><pre>   &lt;!-- Activate Cocoon Spring Configurator --&gt;
   &lt;configurator:settings/&gt;
</pre><p>This innocent looking statement initializes the Cocoon Spring Configurator
and provides support for the following features without any additional
configuration:</p><ul>
<li><a href="1309_1_1.html">Running Modes</a></li>
<li><a href="1310_1_1.html">Properties</a></li>
<li><a href="1312_1_1.html">Bean Configurations</a></li>
</ul></div></div>
       </body></document>
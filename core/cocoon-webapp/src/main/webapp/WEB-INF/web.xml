<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--+
    | This is the Cocoon web-app configurations file
    +-->

<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>

  <!-- Context Configuration ========================================== -->

  <!--+
      | Set a context property useful to allow you to ProxyPass your
      | web application mounted to a different URI without losing the
      | ability to do cookie-based sessions.
      | WARNING: this is Jetty specific!
      +-->
  <!--context-param>
    <param-name>org.mortbay.jetty.servlet.SessionPath</param-name>
    <param-value>/some/path/to/your/webapp</param-value>
    <description>An override of the session cookie path</description>
   </context-param-->

  <!-- Servlet Filters ================================================ -->

  <!--+
      | Declare a filter for multipart MIME handling
      +-->

  <filter>
    <filter-name>CocoonMultipartFilter</filter-name>
    <display-name>Cocoon multipart filter</display-name>
    <description>Multipart MIME handling filter for Cocoon</description>
    <filter-class>org.apache.cocoon.servlet.multipart.MultipartFilter</filter-class>
  </filter>

  <!--+
      | Declare a filter for debugging incomming request
      +-->

  <filter>
    <filter-name>CocoonDebugFilter</filter-name>
    <display-name>Cocoon debug filter</display-name>
    <description>Log debug information about each request</description>
    <filter-class>org.apache.cocoon.servlet.DebugFilter</filter-class>
  </filter>

  <!-- Filter mappings ================================================ -->

  <!--+
      | Use the Cocoon multipart filter together with the Cocoon demo webapp
      +-->

  <filter-mapping>
    <filter-name>CocoonMultipartFilter</filter-name>
    <servlet-name>Cocoon</servlet-name>
  </filter-mapping>

  <!--+
      | Use the Cocoon debug filter together with the Cocoon demo webapp

  <filter-mapping>
    <filter-name>CocoonDebugFilter</filter-name>
    <servlet-name>Cocoon</servlet-name>
  </filter-mapping>
      +-->

  <!-- Servlet Context Listener ======================================= -->

  <!--+
      | Declare Spring context listener which sets up the Spring Application Context
      | containing all Cocoon components (and user defined as well).
      +-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- Servlet Configuration ========================================== -->

  <servlet>
    <servlet-name>Cocoon</servlet-name>
    <display-name>Cocoon</display-name>
    <description>Cocoon demo web application</description>

    <servlet-class>org.apache.cocoon.servlet.SitemapServlet</servlet-class>

    <!--
      This parameter allows you to startup Cocoon2 immediately after startup
      of your servlet engine.
    -->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!-- Experimental servlet that dispatch to Spring managed block servlets -->
  <servlet>
    <servlet-name>DispatcherServlet</servlet-name>
    <display-name>DispatcherServlet</display-name>
    <description>Cocoon blocks dispatcher</description>

    <servlet-class>org.apache.cocoon.blocks.DispatcherServlet</servlet-class>

    <!--
      This parameter allows you to startup immediately after startup
      of your servlet engine.
    -->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!-- URL space mappings ============================================= -->

  <!--
    Cocoon handles all the URL space assigned to the webapp using its sitemap.
    It is recommended to leave it unchanged. Under some circumstances though
    (like integration with proprietary webapps or servlets) you might have
    to change this parameter.
  -->
  <servlet-mapping>
    <servlet-name>Cocoon</servlet-name>
    <url-pattern>/*</url-pattern>
  </servlet-mapping>

  <!--
    Some servlet engines (Tomcat) have defaults which are not overriden
    by '/' mapping, but must be overriden explicitly.
  -->
  <servlet-mapping>
    <servlet-name>Cocoon</servlet-name>
    <url-pattern>*.jsp</url-pattern>
  </servlet-mapping>
  <!--
    Some servlet engines (WebLogic) have defaults which are not overriden
    by '/' mapping, but must be overriden explicitly.
  -->
  <servlet-mapping>
    <servlet-name>Cocoon</servlet-name>
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>

  <!--
    Mount the experimental blocks dispatcher.
  -->
  <servlet-mapping>
    <servlet-name>DispatcherServlet</servlet-name>
    <url-pattern>/blocks-test/*</url-pattern>
  </servlet-mapping>

  <!-- various MIME type mappings ====================================== -->

  <mime-mapping>
    <extension>css</extension>
    <mime-type>text/css</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>xml</extension>
    <mime-type>text/xml</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>xsl</extension>
    <mime-type>text/xml</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>xconf</extension>
    <mime-type>text/xml</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>xmap</extension>
    <mime-type>text/xml</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>ent</extension>
    <mime-type>text/plain</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>grm</extension>
    <mime-type>text/plain</mime-type>
  </mime-mapping>


  <!-- Sample environment entry for the NamingInputModule -->
  <env-entry>
    <env-entry-name>greeting</env-entry-name>
    <env-entry-value>Hello, World</env-entry-value>
    <env-entry-type>java.lang.String</env-entry-type>
  </env-entry>

</web-app>

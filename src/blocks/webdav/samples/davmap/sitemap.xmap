<?xml version="1.0"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

<!-- =========================== Components ================================ -->

  <map:components>
  
    <map:generators default="file">
      <map:generator 
        name="traverse" 
        src="org.apache.cocoon.generation.TraversableSourceDescriptionGenerator" 
        logger="generator.traverse" 
        label="content" 
        pool-min="2" pool-grow="2" pool-max="16"
      />
      <map:generator name="jx" 
        src="org.apache.cocoon.generation.JXTemplateGenerator" 
        logger="generator.jx" 
        label="content" 
        pool-min="2" pool-grow="2" pool-max="16" 
      />
    </map:generators>
    
    <map:transformers default="xslt">
      <map:transformer 
        name="spw" 
        src="org.apache.cocoon.transformation.SourcePropsWritingTransformer" 
        logger="transformer.spw" 
        pool-min="2" pool-grow="2" pool-max="16" 
      />
    </map:transformers>
    
    <!-- You'll need event caching if you want to PROPPATCH
    <map:pipes default="caching">
      <map:pipe name="event-caching" 
        src="org.apache.cocoon.components.pipeline.impl.CachingProcessingPipeline"
      >
        <parameter name="cache-role" value="org.apache.cocoon.caching.Cache/EventAware"/>
      </map:pipe>
    </map:pipes>
    -->
    
  </map:components>

<!-- ========================== Flowscript ================================= -->

  <map:flow language="javascript">
    <map:script src="webdav.js"/>
  </map:flow>

<!-- =========================== Views ===================================== -->

  <map:views>    
    <map:view name="content" from-label="content">
      <map:serialize type="xml" />
    </map:view>
  </map:views>

  <map:pipelines>
    
    <map:component-configurations>
      <global-variables>
        <staging>./repo/</staging>
      </global-variables>
    </map:component-configurations>
    
<!-- ========================= Private Resources =========================== -->

    <map:pipeline type="noncaching" internal-only="true">
      
      <!-- Read the request for binaries PUT -->
      <!--
      <map:match pattern="request/read">
        <map:read type="request" />
      </map:match>
      -->
      
      <map:match pattern="request/generate">
        <map:generate type="stream" />
        <map:serialize type="xml" />
      </map:match>
      
      <!--+ 
          | If you need to check or change the XML that is being PUT
          | you can do that here. This is the pipeline that will
          | generate the input for the PUT method.
          + -->
      <map:match pattern="request/PUT">
        <map:generate type="stream" />
        <map:serialize type="xml" />
      </map:match>
      
      <map:match pattern="status/*">
        <map:generate type="jx" src="status.jx">
          <map:parameter name="status" value="{1}" />
        </map:generate>
        <map:serialize type="xml" status-code="{1}" />
      </map:match>
      
    </map:pipeline>
    
<!-- ========================= Public Resources =========================== -->
    
    <!--
    <map:pipeline type="event-caching">
    -->
    <map:pipeline type="caching">
      
      <map:match pattern="test">
        <map:generate src="proppatch.xml" />
        <map:transform src="styles/proppatch2propwrite.xsl">
          <map:parameter name="location" value="test" />
        </map:transform>
        <map:serialize type="xml" />
      </map:match>
      
      <map:match pattern="repo">
        <map:call function="selectMethod">
          <map:parameter name="page" value=""/>
        </map:call>
      </map:match>
      <map:match pattern="repo/**">
        <map:call function="selectMethod">
          <map:parameter name="page" value="{1}"/>
        </map:call>
      </map:match>
      
      <map:match pattern="GET/**">
        <map:match pattern="GET/**.*">
          <map:generate src="{global:staging}{1}.{2}"/>
          <map:serialize type="xml"/>
        </map:match>
        <map:generate type="traverse" src="{global:staging}{1}">
          <map:parameter name="depth" value="1"/>
        </map:generate>
        <map:transform src="styles/collection2html.xsl">
          <map:parameter name="requestURI" value="{request:requestURI}" />
          <map:parameter name="footer" value="{cocoon-properties:fullname} {cocoon-properties:released.version}" />
        </map:transform>
        <map:serialize type="html"/>
      </map:match>
      
      <map:match pattern="PROPFIND/**">
        <map:generate type="traverse" src="{global:staging}{1}">
          <map:parameter name="depth" value="{request-header:Depth}" />
        </map:generate>
        <map:transform src="styles/collection2propfind.xsl">
          <map:parameter name="requestURI" value="{request:requestURI}" />
        </map:transform>
        <map:serialize type="xml" status-code="207" />
      </map:match>
      
      <map:match pattern="OPTIONS/**">
        <map:act type="set-header">
          <map:parameter name="DAV" value="DAV:1"/>
          <map:parameter name="Allow" 
            value="OPTIONS, GET, HEAD, POST, DELETE,TRACE, PROPFIND, PROPPATCH, COPY, MOVE"/>
        </map:act>
        <map:generate src="dummy.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="HEAD/**">
        <map:generate src="dummy.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <map:match pattern="TRACE/**">
        <map:generate src="dummy.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <map:match pattern="POST/**">
        <map:generate src="dummy.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
    </map:pipeline>
    
    <map:pipeline type="noncaching">
    
      <map:match pattern="PUT/**.*">
        <map:call function="put">
          <map:parameter name="src" value="cocoon:/request/PUT" />
          <map:parameter name="dest" value="{global:staging}{1}.{2}" />
        </map:call>
      </map:match>
      
      <map:match pattern="MKCOL/**">
        <map:match pattern="MKCOL/**.*">
          <map:call function="sendStatus">
            <map:parameter name="status" value="409" />
            <map:parameter name="message" value="Not valid collection name." />
          </map:call>
        </map:match>
        <map:call function="mkcol">
          <map:parameter name="location" value="{global:staging}{1}" />
        </map:call>
      </map:match>
      
      <map:match pattern="DELETE/**">
        <map:call function="remove">
          <map:parameter name="location" value="{global:staging}{1}.{2}" />
        </map:call>
      </map:match>
      
      <map:match pattern="COPY/**">
        <map:call function="copy">
          <map:parameter name="from" value="{global:staging}{1}" />
          <map:parameter name="to"   value="{request-header:Destination}" />
        </map:call>
      </map:match>
      
      <map:match pattern="MOVE/**">
        <map:call function="move">
          <map:parameter name="from" value="{global:staging}{1}" />
          <map:parameter name="to"   value="{request-header:Destination}" />
        </map:call>
      </map:match>
      
      <map:match pattern="PROPPATCH/**">
        <map:generate type="stream" />
        <map:transform src="styles/proppatch2propwrite.xsl" />
        <map:transform type="spw" />
        <!--
        <map:transform src="styles/propwrite2proppatch.xsl" />
        -->
        <map:serialize type="xml" />
      </map:match>
      
      <map:match pattern="LOCK/**">
        <map:generate src="dummy.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
    </map:pipeline>

  </map:pipelines>

</map:sitemap>

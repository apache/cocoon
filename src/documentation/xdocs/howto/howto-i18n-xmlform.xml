<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "../dtd/document-v10.dtd">
<document>
 <header>
  <title>i18n within the XMLForm Framework</title>
  <authors>
   <person name="Mohamed El-Refaey" email="m.refaey@imkenberg.de"/>
  </authors>
 </header>

 <body>

    <s1 title="Notice">
      <p>This How-To is based on components included in the Cocoon 2.1
      distribution. If you don&#39;t have this version, you can obtain it from
      the <link href="../index.html">Apache Cocoon</link> web site.
      </p>

      <p> Some user accessible points in the Cocoon 2.1 distribution should be
      considered &#34;alpha&#34;. This means that the developer team is not
      investing _any_ effort to provide backward compatibility between alpha
      releases for these parts. This software will continue to be released as
      &#34;alpha&#34; until its code, schemas, and APIs are considered stable.
      </p>

      <p>Until then, there will be no warranty that newer versions will
      maintain backward compatibility for such parts, even in the most simple
      cases. Of course Cocoon will be compatible to latest release, 2.0.x
      release. However, once &#34;beta&#34; status is reached, backward
      incompatible changes will be made only when absolutely necessary to
      reach &#34;final&#34; status. </p>

      <p>The Cocoon development team understands the importance of reliable
      software as well protecting user investments through the creation of a
      solid development platform that doesn&#39;t change. On the other hand,
      the Cocoon project is a pioneer in many fields. Most of the technologies
      it uses are at a &#34;working draft&#34; phase only. Thus, reliability
      cannot be guaranteed before the software achieves its &#34;final&#34;
      status. </p>

      <p>Until then, no effort will be provided to guarantee backward
      compatibility for any parts considered alpha. </p>

      <p>You have been warned.</p>
    </s1>


<s1 title="Overview">
<p>
This How-To shows you how to use the i18n for web site internationalization with the XMLForm Framework.
It requires prior knowledge of Cocoon XMLForm, XSLT, Schematron, and i18n.
</p>
</s1>

<s1 title="Purpose">
<p>
You will learn how to build a simple Login XMLForm and use i18n to make it multi-language enabled.
This How-To teaches you how to build this form. Thus, you will get a better feel
for how Cocoon XMLForm really works with i18n.
</p>
</s1>

<s1 title="Intended Audience">
<p>
Cocoon users who want to learn how to use the i18n for web site internationalization with the XMLForm Framework.
</p>
</s1>

<s1 title="Prerequisites">

<p>Cocoon must be running on your system. The steps below have been tested with Cocoon 2.1-dev.</p>
     <p>You will need the following:</p>

      <ul>
        <li>A servlet engine such as Tomcat.</li>

        <li>JDK 1.2 or later</li>

      </ul>

      <p>Cocoon 2.1 CVS to be installed with the command:</p>

      <source>build webapp</source>

      <p>You will need to understand and be familiar with XSL, i18n, XForms, XPath, and Schematron. If you
      are unfamiliar with these technologies, it is advised that you learn
      these related concepts first. If you are unfamiliar with XMLForm, check out the <link href="xmlform-wizard/howto-xmlform-wizard.html">
XMLForm Wizard How-To</link> first.</p>


</s1>

<s1 title="Steps">
<p>
Here's how to proceed.
</p>

<s2 title="1. Create the the XMLForm file" >
<p>
Create the XMLForm login xml file <strong>Login.xml</strong> and put the <code>&lt;i18n:text&gt;</code> around the form fields as follows:</p>

<source><![CDATA[
<?xml version="1.0" ?>
<document xmlns:xf="http://apache.org/cocoon/xmlform/1.0"
          xmlns:i18n="http://apache.org/cocoon/i18n/2.0">
  <xf:form id="form-login" view="login" action="do-login" >
    <xf:caption>Login</xf:caption>
    <error>
      <xf:violations class="error"/>
    </error>
  <h5><i18n:text>Login</i18n:text></h5>
   <xf:textbox ref="/email">
       <xf:caption><i18n:text>Email Address</i18n:text></xf:caption>
       <xf:violations class="error"/>
   </xf:textbox>

   <xf:password ref="/password">
       <xf:caption><i18n:text>Password</i18n:text></xf:caption>
       <xf:violations class="error"/>
   </xf:password>
   <xf:submit id="login" class="button">
      <xf:caption><i18n:text>Login</i18n:text></xf:caption>
   </xf:submit>
  </xf:form>
</document>

        ]]></source>
<note>Don't forget to add the i18n namespace in the XMLForm.</note>
</s2>

<s2 title="2. Create the Schematron file" >
<p>
Create the Schematron validation file <strong>general-schema.xml</strong> and insert the following validation pattern for the Login XMLForm.</p>
<p>
Here is a snippet of this pattern:</p>
 <source><![CDATA[
<pattern name="Login Info Validation Pattern" id="login">
  <rule context="/email">
    <assert test="contains( string(.),'@')">
      Email format is invalid.
    </assert>
  </rule>
  <rule context="/password">
    <assert test="string-length(.) &gt; 7">
      The Password Should be @ least 8 characters.
    </assert>
  </rule>
</pattern>
        ]]></source>
</s2>

<s2 title="3. Create a simple XSLT file for the validation error messages " >
<p>
Create a simple XSLT stylesheet file to match the violation element in the XMLForm file, and place it in the sitemap after the XMLForm Transformer. The code of this stylesheet is as follows:
</p>
       <source><![CDATA[
<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xf="http://apache.org/cocoon/xmlform/1.0"
                xmlns:i18n="http://apache.org/cocoon/i18n/2.0">

  <xsl:template match="document">
    <document>
      <xsl:apply-templates/>
    </document>
  </xsl:template>

  <xsl:template match="xf:violation">
    <xf:violation>
      <i18n:text>
        <xsl:value-of select="."/>
      </i18n:text>
    </xf:violation>
  </xsl:template>

  <xsl:template match="xf:output[@type='number']">
    <xsl:variable name="value"><xsl:value-of select="xf:value"/></xsl:variable>
    <xsl:variable name="caption"><xsl:value-of select="xf:caption"/></xsl:variable>
    <xsl:variable name="ref"><xsl:value-of select="@ref"/></xsl:variable>

    <xf:output ref="{$ref}">
      <xf:caption><i18n:text><xsl:value-of select="$caption"/></i18n:text></xf:caption>
      <xf:violations class="error"/>
      <xf:value>
        <xsl:element name="i18n:number">
          <xsl:attribute name="src-locale">en</xsl:attribute>
          <xsl:attribute name="value"><xsl:value-of select="$value"/></xsl:attribute>
        </xsl:element>
      </xf:value>
    </xf:output>
  </xsl:template>

  <xsl:template match="node()" priority="-1">
    <xsl:copy>
      <xsl:copy-of select="@*"/>
      <xsl:apply-templates/>
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>
]]></source>
<note>       
Basically this snippet is matching the violation element on the form file. If any violations on the entered data occur, it applies the i18n translation on the resulting error messages.
</note>

</s2>

<s2 title="4. Create the catalog messages file" >
<p>
Create the catalog file that contains your error messages and all what you want to be translated. Here is a snippet from the catalog file:
</p>

      <source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<!-- Default English message catalogue file for cocoon2 sample webapp -->

<catalogue xml:lang="en">
  <!-- the Login Form keywords -->
  <message key="Email Address">Email Address</message>
  <message key="Password">Password</message>
  <message key="Login">Login</message>

  <!-- Validation error messages for Login XMLform -->
  <message key="Email format is invalid.">
    Email format is invalid.
  </message>
  <message key="The Password Should be @ least 8 characters.">
    The Password Should be at least 8 characters.
  </message>
</catalogue>

        ]]></source>

<p>Here is a snippet from a second catalog language file, in this case, for German:</p>

<fixme author="ds">Do we need an entity for the character in the German translation of invalid?</fixme>
    <source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<!-- German message catalogue file for cocoon2 sample webapp -->

<catalogue xml:lang="de">
    <!-- the Login Form keywords -->
    <message key="Email Address">Email Adresse</message>
    <message key="Password">Passwort</message>
    <message key="Login">Login</message>

    <!-- Validation error messages for Login Form Xform-->
    <message key="Email format is invalid.">
      Email-format ist ung√ºltig.
    </message>
    <message key="The Password Should be @ least 8 characters.">
      Das Passwort sollte wenigsten 8 Zeichen haben.[translated message]
    </message>
</catalogue>

        ]]></source>
</s2>

<s2 title="5. Create a Sitemap match element" >
<p>
Now we reach to the end of this How-To by showing the sitemap snippet for this sample:
</p>

    <source><![CDATA[
<map:match pattern="do-login">
  <map:act type="LoginAction">
    <map:parameter name="xmlform-validator-schema-ns" 
      value="http://www.ascc.net/xml/schematron"/>
    <map:parameter name="xmlform-validator-schema" 
      value="xforms/schematron/general-schema.xml"/>
    <map:parameter name="xmlform-id" value="form-login"/>
    <map:parameter name="xmlform-scope" value="session"/>
    <map:parameter name="xmlform-model" 
      value="com.imkenberg.webshop.xforms.LoginBean"/>
    <map:generate src="xforms/xmlforms/login/{page}.xml"/>
    <map:transform type="xmlform" label="xml"/>
    <map:transform src="xforms/stylesheets/translate.xsl"/>
	<map:act type="locale">
      <map:transform type="i18n">
        <map:parameter name="locale" value="{locale}"/>
      </map:transform>
    </map:act>
	<map:transform src="xforms/stylesheets/wizard2html.xsl"/>
	<map:transform src="xforms/stylesheets/xmlform2html.xsl"/>
	<map:act type="locale">
      <map:transform type="i18n">
		<map:parameter name="locale" value="{locale}"/>
      </map:transform>
	</map:act>
  </map:act>
  <map:serialize type="html"/>
</map:match>
            ]]></source>
</s2>


</s1>

<s1 title="Summary">
<p>
This How-To enables you to use i18n Transformer and XMLForm Framework as well as to translate any violation error messages resulting from Shematron validation.
I hope you have found this How-To easy to follow.
</p>

</s1>

<s1 title="References">
<anchor id="references"/>
<p>
To go further, you will need to learn about the following technologies and tools.
</p>
<ul>
<li>
Learning  
<link href="http://www.google.com/search?as_sitesearch=xml.apache.org&amp;as_q=cocoon+concepts+sitemap">
Cocoon concepts</link> will help you understand how the sitemap, generators, transformers, and serializers work.
</li> 
<li>
Learning about <link href="http://www.w3.org/Style/XSL/">XSLT</link> will enable you to write your own transforms to generate HTML, PDF or other formats from XML data.
Information about XSL-FO is available at the same address.  
</li>
<li>
Learning
<link href="http://www.ascc.net/xml/resource/schematron/schematron.html">
Schematron</link>.
</li>
</ul>
</s1>

<s1 title="Comments">
<p>
Care to comment on this How-To? Got another tip? 
Help keep this How-To relevant by passing along any useful feedback to the author,
<link href="mailto:m.refaey@imkenberg.de">Mohamed El-Refaey</link>.
</p>
</s1>

  <s1 title="Revisions">
  <p>
10-30-02: First version contributed by Mohamed El-Refaey. 
  </p>
  <p>
10-31-02: "Real" German translations added by Michael Enke. 
  </p>
  <p>
10-31-02: Revised by Mohamed El-Refaey to clarify examples. 
  </p>
  <p>
11-01-02: Edited by Diana Shannon.
  </p>
  </s1>


</body>
</document>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "../../dtd/document-v10.dtd">

<document>
    <header>
        <title>I18n Transformer</title>
        <version>1.0</version>
        <type>Technical document</type>
        <authors>
            <person name="Konstantin Piroumian" email="kpiroumian@apache.org"/>
            <person name="Marcus Crafter" email="mcrafter@apache.org"/>
            <person name="Michael Enke" email="Michael.Enke@wincor-nixdorf.com"/>           
         </authors>
        <abstract>
        This document describes an approach for internationalization of XML
        applications within Cocoon. It introduces some tags to markup text 
        that should be translated and a format for dictionaries.
        The original proposal was made by Infozone Group (http://www.infozone-group.org).
        </abstract>
    </header>
    <body>
        <s1 title="Introduction">
                <p>
                Developing and maintaining multi-language sites is a common problem for web developers.
                The usage of XML and XSL makes this task much easier, especially with 
                content, logic and presentation separation concept.
                </p>
                <dl>
                        <dt>Internationalization (i18n)</dt>
                        <dd>Process of developing a product in such a way that it works with data in different languages and can be adapted to various target markets without engineering changes.</dd>
                        <dt>Localization (l10n)</dt>
                        <dd>Subsequent process of translating and adapting a product to a given market's cultural conventions.</dd>                        
                    </dl>
                <p>
                This approach for internationalization (further - i18n) of XML documents within Cocoon 
                is based on a transformer - <link href="../../apidocs/org/apache/cocoon/transformation/I18nTransformer.html">
                        <code>I18nTransformer</code>
                    </link>
                , which uses XML dictionaries for all the multilingual data. The namespace URI of i18n transformer is defined as follows: 
                    </p>
                    <source>xmlns:i18n="http://apache.org/cocoon/i18n/2.1</source>
               <s2 title="Other implementation details">
            <ul>
                <li>Default name in sitemap: i18n</li>
                <li>Class: org.apache.cocoon.transformation.I18nTransformer</li>
                <li>Cacheable: no.</li>
                <li>Poolable: yes.</li>
            </ul>
            </s2>
        </s1>
            <s1 title="Brief description">
                <p>
                    The following features are supported by the i18n transformer:<br/>
                </p>
                <ul>
                    <li>Text translation</li>
                    <li>Attribute translation</li>
                    <li>Parameter substitution (with translation if needed)</li>
                    <li>Date, number and currency formatting</li>
                </ul>
                <p>
                    A simple example of i18n markup:
                </p>
                <source>
<![CDATA[<para title="first" name="article"  i18n:attr="title name">
  <i18n:text>This text will be translated.</i18n:text>
</para>]]></source>
                <p>
                    The text inside the <code><![CDATA[<i18n:text>]]></code> will be used as a key to find the 
                    translation in the message catalogue. All attributes (of any other namespace element) that are listed in the <code><![CDATA[i18n:attr]]></code> attribute also will be translated and their values will be used as dictionary keys.
                </p>
                <note>
                    Although, date, time, number and currency formatting is also supported, in some cases it is needed to use XSP or some other dynamic means to achieve more flexibility.
                </note>
            </s1>
        <s1 title="Markup Reference">
                    <s2 title="Summary">
                    <p>
                        Special tags in i18n namespace are used to mark parts of XML document that should be substituted with dictionary messages.
                    </p>
                    <table>
                        <caption>Tags list</caption>
                            <tr>
                                <th>Element</th>
                                <th>Description</th>
                            </tr>
                            <tr>
                                <td><link href="#i18n_text">i18n:text</link></td>
                                <td>Used for simple text translation</td>                                
                            </tr>
                            <tr>
                                <td><link href="#i18n_attr">i18n:attr</link></td>
                                <td>Attribute for any element (not in i18n-namespace). Contains the names of other attributes of that element to be translated</td>                                
                            </tr>
                            <tr>
                                <td><link href="#i18n_translate">i18n:translate</link></td>
                                <td>Translates text with parameter substitution</td>                                
                            </tr>                            
                            <tr>
                                <td><link href="#i18n_param">i18n:param</link></td>
                                <td>Used with <code>i18n:translate</code> to provide substitution parameter</td>                                
                            </tr>                            
                            <tr>
                                <td><link href="#i18n_date">i18n:date</link></td>
                                <td>Formats the date in localized manner</td>                                
                            </tr>                            
                            <tr>
                                <td><link href="#i18n_time">i18n:time</link></td>
                                <td>Formats the time in localized manner</td>                                
                            </tr>                                                        
                            <tr>
                                <td><link href="#i18n_datetime">i18n:date-time</link></td>
                                <td>Formats the date and time in localized manner</td>                                
                         </tr>                                                                                    
                            <tr>
                                <td><link href="#i18n_number">i18n:number</link></td>
                                <td>Formats numbers, currencies and percent in localized manner</td>                                
                         </tr>                                                                                                             
                    </table>
                    <p></p>
            </s2>       
            <anchor id="i18n_text"/><s2 title="i18n:text">
                <p>
                To translate some simple text we use the <code><![CDATA[<i18n:text>]]></code> tag:
            </p>
                <source><![CDATA[
<i18n:text>Text to be translated</i18n:text>]]></source>
                <p>
                The text between the <code><![CDATA[<i18n:text>]]></code>-tags is used as a key to find the translation in the dictionary.  
            </p>
                <p>
                The 'i18n:key' attribute can be used to specify a special key for
                the dictionary. Normally, the text itself is used as the key to find
                the translation in the dictionary. If we specify the 'i18n:key' attribute this
                key is used to find the translation and the text itself is used as the default value, 
                if no translation can be found.
            </p>
                <source><![CDATA[
<i18n:text i18n:key="key_text">Default value</i18n:text>]]></source>
        <p>
          Messages can be taken from multiple dictionaries. The dictionaries are configured
          in the sitemap (see further on), and each dictionary is assigned an id. There is
          one dictionary that serves as the default one. To translate a key using a
          non-default dictionary, mention the id of the dictionary in an i18n:catalogue
          attribute:
        </p>
                <source><![CDATA[
<i18n:text i18n:catalogue="menu">key_text</i18n:text>]]></source>
            </s2>
            <anchor id="i18n_translate"/><s2 title="Translation with param substitution">
                <p>
                To translate the text with param substitution the <code><![CDATA[<i18n:translate>]]></code> tag must be used.
                We can specify some <code><![CDATA[<i18n:param>]]></code>-tags which contain 
                parameters. The values of these parameters will be inserted into the 
                translated text, replacing placeholders. Placeholders have the 
                following syntax: <code>\{[0-9]+\}</code>. An example:    
                </p>
                <source><![CDATA[    
<i18n:translate>
    <i18n:text>Some {0} was inserted {1}.</i18n:text>
    <i18n:param>text</i18n:param>
    <i18n:param>here</i18n:param>
</i18n:translate>]]></source>
            <p>
                Now we want to translate this into German.
                First, the processor will look into the dictionary, we specified, for 
                the string:
            </p>
            <p>
                <em>Some {0} was inserted {1}.</em>
            </p>
            <p>
                It finds the string and translates it to German:
            </p>
            <p>
                    <em>Etwas {0} wurde {1} eingesetzt.</em>
            </p>
            <p>
                Now the processor will replace the parameters. {0} will be replaced 
                with "text" and {1} with "here". This results in:
                </p>
                <p>
                    <em>Etwas text wurde here eingesetzt.</em>
                </p>
                <p>
                As we see, it is sometimes necessary to translate the parameters 
                as well, since "here" is not a German word and "text" should be written 
                uppercase. This can simply be done by marking up the parameters with
                <code><![CDATA[<i18n:text>]]></code> again:
            </p>
                <source><![CDATA[
<i18n:translate>
    <i18n:text>Some {0} was inserted {1}.</i18n:text>
    <i18n:param><i18n:text>text</i18n:text></i18n:param>
    <i18n:param><i18n:text>here</i18n:text></i18n:param>
</i18n:translate>]]></source>
                <note>
                Generally, it is not necessary for the text for param substitution to be translated. 
                E.g., it can come from a database with predefined placeholders for i18n params and there is no need to use <code><![CDATA[<i18n:text>]]></code> for its translation. 
                </note>
                <p>
                Parameters can be dates, numbers and currencies. Use <strong>type</strong> attribute to specify one of the possible types: <code>date | time | date-time | number | currency | currency-no-unit | int-currency | percent </code>. See more on params <link href="#i18n_param">here</link>.
                </p>
            </s2>
            <anchor id="i18n_attr"/><s2 title="Attributes">
                <p>
                    Additionally we can translate attributes. This is very useful for 
                    HTML-forms since labels of buttons are set via an attribute in 
                    HTML. To translate attributes of a tag, add an additional attribute 
                    named 'i18n:attr' containing a list of attributes, which should be 
                    translated, separated by spaces. An example:
                </p>
                <source><![CDATA[
<INPUT type="submit" value="Submit" i18n:attr="value"/>]]></source>
                <p>
                    The attribute, which will be translated is 'value'. 
                    Parameter replacement is not available for attributes at this time.
                </p>
            <note>
                Some versions of Xerces have a bug in removeAttribute() method implementation and this
                results in a NullPointerException if attributes translation is used. The solution is to upgrade
                to a newer version of Xerces.
            </note>
        <p>
          Just as with i18n:text, the translations for attributes can come from
          multiple dictionaries. To use a specific dictionary, add the id of
          the dictionary before the key, separated by a colon:
        </p>
                <source><![CDATA[
<INPUT type="submit" value="form:Submit" i18n:attr="value"/>]]></source>
            </s2>
            <s2 title="Date, time and number formatting">
                <anchor id="i18n_date"/><p>To format dates according to the current locale use <code><![CDATA[<i18n:date src-pattern="dd/MM/yyyy" pattern="dd:MMM:yyyy" value="01/01/2001" />]]></code>. The <code>'src-pattern'</code> attribute will be used to parse the <code>'value'</code>, then the date will be formatted according to the current locale using the format specified by <code>'pattern'</code> attribute.
                </p>
                <anchor id="i18n_time"/><p>To format time for a locale (e.g. de_DE) use <code><![CDATA[<i18n:time src-pattern="dd/MM/yyyy hh:mm" locale="de_DE" value="01/01/2001 12:00" />]]></code>. The <code>'src-pattern'</code> and <code>'pattern'</code> attribute may also contain <code>'short'</code>, <code>'medium'</code>, <code>'long'</code> or <code>'full'</code>. The date will be formatted according to this format.
                </p>
                <anchor id="i18n_datetime"/><p>To format date and time use <code><![CDATA[<i18n:date-time />]]></code>.
                </p>
                <p>It is also possible to specify a src-locale:  <code><![CDATA[<i18n:date src-pattern="short" src-locale="en_US" locale="de_DE"> 12/24/01 </i18n:date> ]]></code> will result in 24.12.2001
                </p>
                <p>
                A given real <code>pattern</code> and <code>src-pattern</code> (not short, medium, long, full) overwrites the <code>locale</code> and <code>src-locale</code>.
                </p>
                <p>
                    If no pattern was specified then the date will be formatted with the <code>DateFormat.DEFAULT</code> format (both date and time). If no value for the date is specified then the current date will be used. E.g.: <code><![CDATA[<i18n:date/> ]]></code> will result in the current date, formatted with default localized pattern.
                </p>
                <anchor id="i18n_number"/><p>To format numbers in locale sensitive manner use <code><![CDATA[<i18n:number pattern="0.##" value="2.0" />]]></code>. This will be useful also for Arabic, Indian, etc. number formatting. Additionally, currencies and percent formatting can be used, known types are <code>currency</code>, <code>currency-no-unit</code>, <code>int-currency</code>, <code>int-currency-no-unit</code> and <code>percent</code>. Another useful attribute is <code>fraction-digits</code>, E.g.: 
                </p>
                    <ul>
                        <li><code><![CDATA[<i18n:number type="currency" value="1703.7434" />]]></code> will result in localized presentation of the value for US locale: $1,703.74</li>
                        <li><code><![CDATA[<i18n:number type="currency" fraction-digits="3" value="1703.7434" />]]></code> will result in localized presentation of the value for US locale so you can print gasonline prices: $1,703.743</li>
                        <li><code><![CDATA[<i18n:number type="int-currency" value="170374" />]]></code> will result in localized presentation of the value for US locale: $1,703.74, and 170374 (with currency unit) for a currency without subunit.</li>
                        <li><code><![CDATA[<i18n:number type="int-currency-no-unit" value="170374" />]]></code> will result in localized presentation of the value for US locale: 1,703.74, and 170374 (without currency unit) for a currency without subunit.</li>
                        <li><code><![CDATA[<i18n:number type="percent" value="1.2" />]]></code> will result in localized percent value: %120 for most of the locales.</li>
                    </ul>
                <p>
                 If someone from US want to see sales figures from a store in
                 Germany, formatted using the german currency, you would need
                 to use locale="de_DE" to get the currency right, e.g. 100,00
                 &#x20AC;. The decimal and grouping separator is then also from
                 the de_DE locale.  This may lead to some confusion because
                 people from US know the "," as thousand separator.

                 Therefore a "currency" attribute is available, so that the output from
                 <code><![CDATA[<i18n:number type="currency" locale="en_US" currency="de_DE">100</i18n:number>]]></code>
                 results in 100.00 &#x20AC;
                </p>
                <anchor id="i18n_param"/><p>
                    Also, date and number formatting can be used with substitution params. <code>type</code> attribute must be used with params to indicate the param type (date, number, currency, ...). Default type is <code>string</code>.
                </p>
                <source><![CDATA[
<i18n:translate>
  <i18n:text>
    You have to pay {0} for {1} pounds or {2} of your profit. Valid from {3}
  </i18n:text>
  <i18n:param type="currency"
              pattern="$#,##0.00">102.5</i18n:param>
  <i18n:param type="number" value="2.5">
  <i18n:param type="percent" value="0.10" />    
  <i18n:param type="date" pattern="dd-MMM-yy" />
</i18n:translate>]]></source>
                <p>
                    Result will be like this: <code>You have to pay $102.5 for 2.5 pounds or 10% of your profit. Valid from 13-Jun-01</code>
                </p>        
            </s2>
               <s2 title="Catalogues (Dictionaries)">
                   <p>Message catalogues contain translations to be used by the i18n transformer.</p>
                    <s3 title="Catalogues format">
                    <p>A single message catalogue file contains translations for a particular language, e.g.:</p>
                    <source><![CDATA[
<?xml version="1.0"?>
  <!-- message catalogue file for locale ... -->
  <catalogue xml:lang="locale">
         <message key="key">text</message>
         <message key="other_key">Other text</message>         
         ....
  </catalogue>]]></source> 
                     <p>Where <strong>key</strong> attribute specifies a particular message for that language.</p>
                     </s3>
                     <s3 title="Usage">
                     <p>Files to be translated contain i18n markup. 
                     At runtime, the i18n transformer will find a message catalogue for the
                     user's locale, and will appropriately replace the text between the
                     <code>&lt;i18n:text&gt;</code> markup, using either the value between the tags as
                     the lookup key or the value of the <code>key</code> attribute if specified. In the latter
                     case the body value of the tag will be used in case of the not found translation.</p>
                     <p>If the i18n transformer cannot find an appropriate message catalogue for
                     the user's given locale, it will recursively try to locate a <em>parent</em>
                     message catalogue, until a valid catalogue can be found. ie:</p>
                     <ul>
                          <li><strong>catalogue</strong>_<em>language</em>_<em>country</em>_<em>variant</em>.xml</li>
                          <li><strong>catalogue</strong>_<em>language</em>_<em>country</em>.xml</li>
                          <li><strong>catalogue</strong>_<em>language</em>.xml</li>
                          <li><strong>catalogue</strong>.xml</li>
                     </ul>
                     <p>
                     eg: Assuming a basename of <em>messages</em> and a locale of <em>en_AU</em>
                     (no variant), the following search will occur:</p>
                     <ul>
                         <li><strong>messages</strong>_<em>en</em>_<em>AU</em>.xml</li>
                         <li><strong>messages</strong>_<em>en</em>.xml</li>
                         <li><strong>messages</strong>.xml</li>
                     </ul>
                     <p>This allows the developer to write a hierarchy of message catalogues,
                     at each defining messages with increasing depth of variation.</p>
                 </s3>
             </s2>
            <s2 title="Sitemap configuration">
            <source><![CDATA[
<map:transformer name="i18n"
     src="org.apache.cocoon.transformation.I18nTransformer">

     <catalogues default="messages">
       <catalogue id="messages" name="messages" location="translations"/>
       <catalogue id="menu" name="menu" location="{defaults:skin}/translations"/>
     </catalogues>
     <untranslated-text>untranslated</untranslated-text>
     <cache-at-startup>true</cache-at-startup>
</map:transformer>]]></source> 
                    <p>where:</p>
                    <ul>
                      <li><strong>catalogues</strong>: container element in which the catalogues
                        are defined. It must have an attribute 'default' whose value is one
                        of the id's of the catalogue elements. (<em>mandatory</em>).</li>
                      <li><strong>catalogue</strong>: specifies a catalogue. It takes 3 required
                        attributes: id (can be wathever you like), name (base name of the catalogue)
                        and location (location of the message catalogue). The name and location attributes
                        can contain references to "input modules" (same syntax as in other places in the
                        sitemap). They are resolved on each usage of the transformer, so they can
                        refer to e.g. request parameters. (<em>at least 1 catalogue
                          element required</em>).</li>
                      <li><strong>untranslated-text</strong>: text used for
                        untranslated keys (default is to output the key name).
                        For the i18n:text element, this will only be used if
                        the content of the i18n:text element was empty (thus
                        when the key was specified using the i18n:key
                        attribute). Otherwise the content of the i18n:text
                        element will be outputted when no translation is
                        found.</li>
                      <li><strong>cache-at-startup</strong>: flag whether to cache
                        messages at startup (false by default).</li>
                    </ul>
                    <note>The configuration syntax was changed to add support for configuring
                      mulitple catalogues. The old syntax, using the elements 'catalogue-name'
                      and 'catalogue-location', is still supported, but cannot be used concurrently
                      with the new syntax.</note>
                    <p>To use the transformer in a pipeline, simply specify it in a particular transform and indicate the needed locale. eg:</p>
 <source><![CDATA[
<map:match pattern="file">
        <map:generate src="file.xml"/>
         <map:transform type="i18n">
           <map:parameter name="locale" value="en_AU"/>
         </map:transform>
         <map:serialize/>
</map:match>]]></source>
                    <note>Note, that since Cocoon version 2.0.1 you should specify the needed locale as a parameter at pipeline level. This gives more flexibility in locale selection, e.g. URI parts can be used: <code>/en_AU/file</code>. See LocaleAction documentation for other possibilities.</note>
                    <p>The default catalogue can be changed at the pipeline level by specifying
                      a parameter <strong>default-catalogue-id</strong>. Likewise, a parameter
                      <strong>untranslated-text</strong> can be used to override the default
                      untranslated text.</p>
                    <note>Before multiple catalogues were supported, the catalogue could be defined
                      at the pipeline level by adding parameters <strong>catalogue-name</strong> and
                      <strong>catalogue-location</strong>. This is still supported, but
                      cannot be used concurrently with the <strong>default-catalogue-id</strong>
                      parameter.</note>
            </s2>
        </s1>
        <s1 title="Samples">
                <p>
                    i18n samples from Cocoon demonstrate all the features of i18n transformer and give some ideas on user's locale determination.
                </p>
        </s1>
        <s1 title="Usage Pattern for Dictionary Generator Stylesheet">
            <p> 
            It is sometimes better to maintain a master dictionary that contains
            all the keys with translations in all the supported languages. For this purposes several helper stylesheets can be used. 
            The stylesheets are found in Cocoon sources: <code>src/resources/dev/i18n</code> (in version 2.1 and higher).<br/>
            Below is given an example for a new language addition using a master dictionary.
            </p>
            <s2 title="Initial key generation">
            <p>To generate all the i18n keys from a source file (XML or XSP) use the <strong>markup2message.xsl</strong> stylesheet. Simply transform your content file using this stylesheet. Result will be an empty message catalogue for the given language.</p>
            </s2>
            <s2 title="Key generation from master dictionary">
            <p>
            Generate a dictionary with keys and placeholders for Spanish translations using the <strong>merge.xsl</strong> stylesheet. Optionally, for one of the languages existing translations can be kept. 
            To do it set stylesheet params (manually in stylesheet or in command-line):
            </p>
            <ul>
                <li><strong>mode = keys</strong> (indicates, that only keys must be in result)</li>
                <li><strong>new-lang = es </strong> (language to be added)</li>
                <li><strong>keep-lang = en </strong> (language to be kept in result, for convenience)</li>
            </ul>
            <p>
            Command line for Xalan (Of course, Xerces and Xalan must be in your classpath): 
            </p>
            <source><![CDATA[
java org.apache.xalan.xslt.Process -IN simple_dict.xml -XSL merge.xsl \
-OUT simple_dict_es.xml -PARAM mode keys -PARAM new-lang es -PARAM keep-lang en
]]></source>
            <p><sub>(Windows users: Do not enter '\' symbol, continue typing on the same line.)</sub></p>
            <p>
            This will create a file simple_dict_es.xml with entries, keys and placeholders.
            </p>
            </s2>
            <s2 title="Translation">
            <p>
            Replace placeholders with translation according to the keys or original
            translations, if they were kept during generation.
            </p>
            </s2>
            <s2 title="Add to the master dictionary">
            <p>
            Use the same stylesheet for this purpose with this params:
            </p>
            <source><![CDATA[
mode = merge
new-lang = es
new-dict = simple_dict_es.xml
]]></source>
            
            <p>    
            Command line for Xalan: 
            </p>
            <source><![CDATA[
java org.apache.xalan.xslt.Process -IN simple_dict.xml -XSL merge.xsl \
-OUT simple_dict_new.xml -PARAM mode merge -PARAM new-lang es \
-PARAM new-dict simple_dict_es.xml
]]></source>
            <p><sub>(Windows users: Do not enter '\' symbol, continue typing on the same line.)</sub></p>
            </s2>
        </s1>
        <s1 title="Finally">
            <s2 title="To be done">
                <ul>
                    <li>Multiple dictionaries per pipeline support - <strong>done in v2.1</strong></li> 
                    <li>Markup support in translations - <strong>done in v2.1</strong></li>
                    <li>Named parameters support - <strong>done in v2.1</strong></li>
                    <li>Dictionary caching - <strong>done in v2.1</strong></li>
                    <li>Different bundle implementations support - <strong>done in v2.1</strong></li>                   
                </ul>
            </s2>
            <s2 title="Contacts">
                <p>
                    Feel free to contact for any comments and improvement ideas either directly <link href="mailto:kpiroumian@apache.org">Konstantin Piroumian</link> 
                    or through the <link href="http://cocoon.apache.org/community/mail-lists.html">Cocoon Mail List</link>.
                </p>
            </s2>
        </s1>
    </body>
</document>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "../../dtd/document-v10.dtd">
<document>
    <header>
        <title>Authentication Framework</title>
        <authors>
            <person name="Carsten Ziegeler" email="cziegeler@s-und-n.de"/>
        </authors>
    </header>
    <body>
  <s1 title="Introduction">
     <p>The central point for building a web application is authentication. The Cocoon
        authentication package is a flexible module for authentication and user management. 
        A user can be legitimated using any information available via any source, e.g. a database or
        LDAP. With this mechanism it is very easy and fast to use an exisiting user
        management/authentication system.</p>
  </s1>
  <s1 title="Sitemap-Components">
     <p>The authentication Framework adds some actions to the sitemap: the <em>auth-protect</em>
        action, the <em>auth-login</em> action, the <em>auth-logout</em> action
        and the <em>auth-loggedIn</em> action. The <em>authentication-manager</em> gets
        the configuration for the authentication framework and the actions controle the pipelines. 
        The <em>auth-login</em> and the <em>auth-logout</em> action control the
        authentication whereas the <em>auth-loggedIn</em> action controls the application
        flow.</p>
     <p>The use of the authentication framework and its components is described in the following
        chapters.</p>
  </s1>
  <s1 title="User Authentication">
     <p>One feature of the framework is the user authentication. A document can be
        accessible for everyone or it can be protected using this framework. The process of
        requesting a document can be described as follows:</p>
     <ol>
        <li>The user request a document (original document).
        </li>
        <li>The framework checks if this document is protected. If no protection
          is specified, the response to the request is this original document.
        </li>
        <li>The document is protected and the framework checks, if the user is
          authenticated to view it.
        </li>
        <li>If the user is authenticated, the response is the original
          document. If not the framework redirects to a special redirect-to document. This
          redirect-to document is freely configurable and can for example contain
          information about the unauthorized access and in addition a login form.
        </li>
        <li>Using the login form an authentication resource can be called
          with the corresponding user information (e.g. user id and password). This
          authentication resource uses the framework for the authentication process.
        </li>
        <li>In case of a successful authentication the framework can redirect to
          the original document (or to any configured start document).
        </li>
        <li>If the authentication failed another document is invoked by
          the framework displaying information to the user.
        </li>
     </ol>
     <p>This process is only one example for a use-case of the framework. It
        can be configured for any authentication scheme. All resources are freely
        configurable.</p>
     <s2 title="The Authentication handler">
        <p>The basic object for authentication is the authentication
          handler. It controlles the access to the resources. Each resource in the
          sitemap can be related to exactly one authentication handler. All resources belonging
          to the same handler are protected in the same way. If a user has access to the
          handler, the user has the same access rights for all resouces of this
          handler.</p>
        <p>Each authentication handler needs the following mandatory
          configuration:</p>
        <ul>
          <li>A unique name.
          </li>
          <li>The authentication resource which does the real
             authentication.
          </li>
          <li>The redirect-to document where the framework redirects to for any
             unauthorized request.
          </li>
        </ul>
        <p>Using a unique name for each handler (only alphabetical characters
          and digits are allowed for the handler name), the framework manages different
          handlers. So various parts of the sitemap can be protected in different ways. A
          document can be protected by calling this handler using the <em>auth-protect</em>
          action. The "auth-protect" action must be included in the pipeline of the
          resource. It gets the handler information as a parameter:</p>
        <source>&lt;map:match pattern="protectedresource"&gt;
  &lt;map:act type="auth-protect"&gt;
    &lt;map:parameter name="handler" value="unique handler name"/&gt;
    &lt;map:generate src="source/resource.xml"/&gt;
  &lt;/map:act&gt;
        ...
&lt;/map:match&gt;</source>
        <p>If the pipeline does not use the "auth-protect" action or the
          parameter "handler" is missing, the document is accessible by any user.</p>
     </s2>
     <s2 title="The redirect-to document">
        <p>If the requested document is not accessible for the user, the framework
          redirects to a special redirect-to document. This document is a mandatory
          configuration of the authentication handler:</p>
        <source>&lt;autentication-manager&gt;
  &lt;handlers&gt;
    &lt;!-- Now follows the handlers configuration --&gt;
    &lt;handler name="unique"&gt;
      &lt;redirect-to uri="cocoon://loginpage"/&gt; &lt;!-- The login resource --&gt;
    &lt;/handler&gt;
  &lt;/handlers&gt;
&lt;/autentication-manager&gt;</source>
        <p>This redirect-to document is an unprotected document in the
          sitemap. For tracking which document was requested, the redirect-to document
          gets the request parameter "resource" with the value. In addition all
          parameters specified inside the <em>redirect-to</em> tag of the handler
          configuration are passed to the document.</p>
        <p>This redirect-to document can contain a form for the user
          authentication. This form should invoke the real login document which is
          described below.</p>
        <p>The authentication process is done by the "auth-login" action.
          The login resource contains this action: </p>
        <source>&lt;map:match pattern="login"&gt;
  &lt;map:act type="auth-login"&gt;
    &lt;map:parameter name="handler" value="unique"/&gt;
    &lt;map:parameter name="parameter_userid" value="{request:name}"/&gt;
    &lt;map:parameter name="parameter_password" value="{request:password}"/&gt;
    &lt;map:redirect-to uri="authentication-successful"/&gt;
  &lt;/map:act&gt;
  &lt;!-- authentication failed: --&gt;
  &lt;map:generate src="auth_failed.xml"/&gt;
  &lt;map:transform src="tohtml.xsl"/&gt;
  &lt;map:serialize/&gt;
&lt;/map:match&gt;</source>
        <p>The <em>auth-login</em> action uses the handler parameter to call the
          authentication resource of this handler. This authentication resource needs to
          know the information provided by the user. For each piece of information an own
          parameter is created which name starts with "parameter_". So in the example
          above, the authentication resource gets two parameters: userid and password. As
          the values for these parameters were send by a form they need to be passed on
          to the authentication resource. If you use "{request:...}" for the value of a
          parameter, the <em>auth-login</em> action will pass the actual value of that request
          parameter to the authentication resource (by using the input modules concept
          of Cocoon).</p>
        <p>If the user is not already authenticated with this handler, the framework calls
          the authentication resource and passes it the parameters. If this
          authentication is successful, the action returns a map and the sitemap
          commands inside the map:act are executed. If the authentication fails, these
          are skipped.</p>
        <p>If the authentication is successful, a session object is created on
          the server (if not already done). If the authentication fails, the error
          information delivered by the authentication resource is stored into the
          <em>temporary</em> context (which is named simply 'temp').</p>
     </s2>
     <s2 title="The authentication resource">
        <p>The last chapters described the authentication process but left out
          details about the authentication itself. This chapter closes this gap.</p>
        <p>The authentication can be done by different components:</p>
        <ul>
          <li>A sitemap resource.
          </li>
          <li>A distant resource, e.g. requested via HTTP.
          </li>
          <li>A java class.
          </li>
        </ul>
        <p>Using this flexible approach nearly any kind of authentication is
          possible (e.g. database, LDAP). The authentication resource is another
          mandatory configuration of the authentication handler:</p>
        <source>&lt;autentication-manager&gt;
  &lt;handlers&gt;
    &lt;!-- Now follows the handlers configuration --&gt;
    &lt;handler name="unique"&gt;
      &lt;!-- The login resource --&gt;
      &lt;redirect-to uri="cocoon:raw://loginpage"/&gt;
      &lt;authentication uri="cocoon:raw://authenticationresource"/&gt;
    &lt;/handler&gt;
  &lt;/handlers&gt;
&lt;/autentication-manager&gt;</source>
        <p>If the authentication resource is a sitemap resource or a remote
          resource, this resource is requested by the framework with the given parameters from
          the <em>auth-login</em> action (see previous chapter: parameters: userid and
          password). In addition all parameters inside the <em>authentication</em> tag of
          the handler configuration are passed to the resource. The response for this
          resource must contain valid XML conforming to the following scheme:</p>
        <source>&lt;authentication&gt;
    &lt;ID&gt;value&lt;/ID&gt;
    &lt;role&gt;rolename&lt;/role&gt; &lt;!-- optional --&gt;
    &lt;data&gt;
        ... resource specific data for the user
    &lt;/data&gt;
&lt;/authentication&gt;</source>
        <p>The framework checks the response of the authentication resource for the
          given scheme: the root node must be named "authentication" and one child called
          "ID" must be present. In this case the authentication is successfull and
          the framework creates an authentication session context and stores the XML inside. </p>
        <p>The mandatory information inside this XML scheme, the "ID" tag, is
          an unique identification for the given user inside the web application. The
          "role" is optional and can for example be used for categorizing users and
          displaying different functionality inside the Cocoon portal
          engine).</p>
        <p>Using the "data" node the authentication resource can pass any
          information of the user into the session object.</p>
        <p>If the authentication is not successful, the resource must create
          an XML with the root node "authentication". In addition a "data" node can be
          added containing more information about the unsuccessful attempt. This data
          node is then added inside the "login" tag of the login resource (see previous
          chapter).</p>
     </s2>
     <s2 title="Logging out">
        <p>The logout process is triggered by the "auth-logout"
          action:</p>
        <source>&lt;map:act type="auth-logout"&gt;
  &lt;map:parameter name="handler" value="unique"/&gt;
&lt;/map:act&gt;</source>
        <p>This action logs the user out of the given handler and removes all
          information about this handler stored in the session.</p>
     </s2>
     <s2 title="Working With subsitemaps">
        <p>The common solution for the framework and subsitemaps is to define the
          handler (in the main sitemap. The documents
          in the subsitemap are then simply protected in the same way as if the action
          were declared in the main sitemap. This makes moving resources from one sitemap
          to the other very simple.</p>
        <p><strong>However, there is one drawback with this solution. After
          you have started your server, make sure that first a resource using the framework
          from the main sitemap is invoked, before any of the subsitemap!</strong></p>
        <p><strong>The definition of handlers in a sub-sitemap is a TODO and will be
           available in the next release.</strong></p>
     </s2>
  </s1>
  <s1 title="User Management">
     <p>In addition to the authentication the framework manages all kinds of
        information belonging to the user in XML format. For this reason the framework
        creates an own session context called "authentication". All information is stored in
        this context.</p>
     <p>The authentication information (the "authentication" scheme retrieved
        from the authentication resource) is stored in this context, so you can
        retrieve and change the information using the session transformer and the
        usual getxml, setxml etc. commands, so we suggest you to read the session
        context document.</p>
     <s2 title="Getting information from the context">
        <p>Each information from within the context is gettable using an XML
          tag:</p>
        <source>&lt;session:getxml context="authentication" path="/authentication/ID"/&gt; &lt;!-- Get the ID --&gt;
&lt;session:getxml context="authentication" path="/authentication/data/username"/&gt;</source>
        <p>The path expression is an absolute XPath-like expression where only
          concrete nodes and attributes are allowed. The session transformer replaced
          the tag with the value of the first node found in the context, this can either
          be text or XML.</p>
     </s2>
     <s2 title="Setting information in the context">
        <p>Using another tag information can be stored into the
          context:</p>
        <source>&lt;session:setxml context="authentication" path="/authentication/data/usersername"&gt;
    Mr. Sunshine
&lt;/session:setxml&gt;</source>
        <p>Again the path is an absolute XPath-like expression where only
          concrete nodes and attributes are allowed. If the requested node exists,
          the framework changes the value of that node. If the node does not exists, the framework
          adds it to the context with the given value.</p>
        <p>The tag is removed from the resource.</p>
     </s2>
  </s1>
  <s1 title="Application Management">
     <p>A very useful feature for building and maintaining web applications
        is the application management. It allows to configure different
        applications and to manage the user data for these applications.</p>
     <s2 title="Configuring an Application">
        <p>A "authentication" application is related to one authentication handler, so an
          application is part of the authentication handler configuration:</p>
        <source>&lt;autentication-manager&gt;
    &lt;handlers&gt;
        &lt;handler name="unique"&gt;
             ....redirect-to/authentication configuration
             &lt;applications&gt; &lt;!-- the applications for this handler --&gt;
                 &lt;application name="unique"&gt;
                     &lt;load uri="loadapp"/&gt; &lt;!-- optional --&gt;
                     &lt;save uri="saveapp"/&gt; &lt;!-- optional --&gt;
                 &lt;/application&gt;
             &lt;/applications&gt;
        &lt;/handler&gt;
    &lt;/handlers&gt;
&lt;/autentication-manager&gt;</source>
        <p>A configuration for an application consists of a unique name (only
          alphabetical characters and digits are allowed for the application name) and
          optional load and save resources. The application configuration can contain
          application specific configuration values for the various parts of the
          application, e.g. information for a portal.</p>
        <p>On a successful authentication the framework invokes for each application
          of the handler the load resource (if present). The content or result of the
          load resource is stored into the session context.</p>
        <p>The user does not always visit all sides or all applications at
          once. So it is not necessary to load all applications in advance when not all
          information is needed. Each application can specify if the data is loaded on
          successful authentication or the first time needed:</p>
        <source>....&lt;application name="unique" loadondemand="true"/&gt;...</source>
        <p>The load resource gets several parameters: all values of the
          subnodes of the "authentication" node from the authentication context (e.g. ID, role
          etc.) and the parameter "application" with the unique name of the application.
          This unique name must not contain one of the characters '_', ':' or '/'.</p>

        <p>In addition the load and save resource get all parameters specified
          inside the load / save tag of the handler configuration.</p>
     </s2>
     <s2 title="Configuring the resources">
        <p>For managing the application the framework needs to know to which
          application a resource belongs. So in addition to the handler parameter the
          auth-protect action gets the application name as a second parameter:</p>
        <source>&lt;map:match pattern="protectedresource"&gt;
  &lt;map:action type="auth-protect"&gt;
    &lt;map:parameter name="handler" value="unique handler name"/&gt;
    &lt;map:parameter name="application" value="unique application name"/&gt;
    
    &lt;map:generate src="source/resource.xml"/&gt;
            ...
  &lt;/map:action&gt;
&lt;/map:match&gt;
</source>
        <p>With this mechanism each application resource can easily access its
          and only its information. If a resource has no "application" parameter it can
          not access information of any application.</p>
     </s2>
     <s2 title="Getting, setting and saving application information">
        <p>Analogue to the access of the authentication data a resource can
          access its application data:</p>
        <source>&lt;session:getxml context="authentication" path="/application/username"/&gt;
&lt;session:setxml context="authentication"  path="/application/shoppingcart"&gt;&lt;item1/&gt;&lt;item2/&gt;&lt;/session:setxml&gt;</source>
        <p>The path underlies the same restrictions and rules as always, but
          it has to start with "/application/". </p>
     </s2>
  </s1>
  <s1 title="Module Management">
     <p>In addition to the application management the framework offers a facility
        called module management. It enhances the application management by the
        possibility to configure components for the application. For example the Cocoon
        portal engine needs information about where the portal profile
        for the user is retrieved from, where the layout is stored etc. Now each portal
        needs this information. Assuming that a portal is an application each
        application needs this information. As only the portal engine itself knows what
        information it needs, the module management is a standarized way for
        configuring such components.</p>
     <p>The module configuration is part of the application
        configuration:</p>
     <source>&lt;autentication-manager&gt;
  &lt;handlers&gt;
    &lt;handler name="unique"&gt;
      ....redirect-to/authentication configuration
      &lt;applications&gt;  &lt;!-- the applications for this handler --&gt;
        &lt;application name="unique"&gt;
          ...
          &lt;configuration name="portal"&gt;
            ...portal configuration
          &lt;/configuration&gt;
        &lt;/application&gt;
      &lt;/applications&gt;
    &lt;/handler&gt;
  &lt;/handlers&gt;
&lt;/autentication-manager&gt;</source>
     <p>So whenever the portal engine is asked to build the portal it can
        easily retrieve its configuration from the current application by getting the
        module configuration named "portal".</p>
  </s1>
  <s1 title="User Administration">
     <p>Using the framework it is possible to add new roles to the system and to
        add new users. For this purpose, there are several optional entries for the
        authentication handler which provide the needed functionality:</p>
     <source>&lt;autentication-manager&gt;
  &lt;handlers&gt;
    &lt;handler name="unique"&gt;
             ...redirect-to/authentication configuration...

      &lt;!-- Optional resource for loading user information --&gt;
      &lt;load-users uri="cocoon:raw://financeresource-sunrise-loaduser"/&gt;

      &lt;!-- Optional resource for loading roles information--&gt;
      &lt;load-roles uri="cocoon:raw://financeresource-sunrise-roles"/&gt;

      &lt;!-- Optional resource for creating a new user --&gt;
      &lt;new-user uri="cocoon:raw://financeresource-sunrise-newuser"/&gt;

      &lt;!-- Optional resource for creating a new role --&gt;
      &lt;new-role uri="cocoon:raw://financeresource-sunrise-newrole"/&gt;

      &lt;!-- Optional resource for changing user information --&gt;
      &lt;change-user uri="cocoon:raw://financeresource-sunrise-newuser"/&gt;

      &lt;!-- Optional resource for deleting a role --&gt;
      &lt;delete-role uri="cocoon:raw://financeresource-sunrise-delrole"/&gt;

      &lt;!-- Optional resource for deleting a user--&gt;
      &lt;delete-user uri="cocoon:raw://financeresource-sunrise-deluser"/&gt;
    &lt;/handler&gt;
  &lt;/handlers&gt;
&lt;/autentication-manager&gt;</source>
     <p>The entries are described in the following subchapters. All tags can
        have additional parameter definitions which are passed to the given resource,
        e.g:</p>
     <source>&lt;!-- Optional resource for deleting a user--&gt;
&lt;delete-user uri="cocoon:raw://financeresource-sunrise-deluser"&gt;
  &lt;connection&gt;database&lt;/connection&gt;
  &lt;url&gt;db:usertable&lt;/url&gt;
&lt;/delete-user&gt;</source>
     <s2 title="Getting Roles">
        <p>The <em>load-roles</em> resource is invoked from the framework whenever
          it needs information about the available roles. This resource gets the
          parameter "type" with the value "roles" and should deliver an XML schema with
          the root node "roles" and for each role a subelement "role" with a text child
          of the rolename:</p>
        <source>&lt;roles&gt;
  &lt;role&gt;admin&lt;/role&gt;
  &lt;role&gt;guest&lt;/role&gt;
  &lt;role&gt;user&lt;/role&gt;
&lt;/roles&gt;</source>
     </s2>
     <s2 title="Getting Users">
        <p>The <em>load-users</em> resource is called whenever information
          about the available users is needed. There are three different uses of this
          resource:</p>
        <ul>
          <li>Loading all users: The resource gets the parameter "type"
             with the value "users". It should then deliver all users in the system.
          </li>
          <li>Loading all users of one role. The resource gets the
             parameters "type" with the value "users" and "role" with the rolename.
          </li>
          <li>Load information of one user. The resource gets the
             parameters "type" with the value "user", "role" with the rolename and "ID" with
             the authentication ID of the user.
          </li>
        </ul>
        <p>The XML format of the resource should look like the
          following:</p>
        <source>&lt;users&gt;
  &lt;user&gt;
    &lt;ID&gt;authentication ID&lt;/ID&gt;
    &lt;role&gt;rolename&lt;/role&gt;
    &lt;data&gt;
       ... application specific data ...
    &lt;/data&gt;
  &lt;/user&gt;
  &lt;user&gt;
    ...
  &lt;/user&gt;
    ...
&lt;/users&gt;</source>
     </s2>
     <s2 title="Creating a new role">
        <p>The <em>new-role</em> resource creates a new role in the system. It
          gets the parameters "type" with the value "role" and "role" with the new
          rolename.</p>
     </s2>
     <s2 title="Creating a new user">
        <p>The <em>new-user</em> resource creates a new user with a role. It
          gets the parameters <em>"type"</em> with the value <em>"user"</em>,
          <em>"role"</em> with the rolename and <em>"ID"</em> with the new ID for this
          user.</p>
     </s2>
     <s2 title="Changing information of a user">
        <p>The <em>change-user</em> resources changes information of a user.
          It gets the parameters "type" with the value "user", "role" with the rolename
          and "ID" with the ID of the user. In addition all - application specific -
          information of this user is send as parameters.</p>
     </s2>
     <s2 title="Delete a user">
        <p>The <em>delete-user</em> resource should delete a user. It gets the
          parameters "type" with the value "user", "role" with the rolename and "ID" with
          the ID of the user.</p>
     </s2>
     <s2 title="Delete a role">
        <p>The <em>delete-role</em> resources deletes a role. It gets the
          parameters "type" with the value "role" and "role" with the rolename .</p>
     </s2>
  </s1>
  <s1 title="Configuration Summary">
     <p>Here is a brief summary of the authentication handler configuration: </p>

     <source>&lt;autentication-manager&gt;
  &lt;handlers&gt;
    &lt;handler name="unique"&gt;
      &lt;!-- The redirect-to resource --&gt;
      &lt;redirect-to uri="cocoon:raw://loginpage"/&gt;
      &lt;!-- Authentication resource --&gt;
      &lt;authentication uri="cocoon:raw://authenticationresource"/&gt;

      &lt;load uri="cocoon:raw://authenticationsaveresource"&gt;
        &lt;!-- optional parameters --&gt;
      &lt;/load&gt;
      &lt;!-- optional save resource --&gt;
      &lt;save uri="cocoon:raw://authenticationsaveresource"&gt;
        &lt;!-- optional parameters --&gt;
      &lt;/save&gt;

      &lt;applications&gt;
        &lt;!-- the applications for this handler --&gt;
        &lt;application name="unique"&gt;

          &lt;!-- Loading/Saving --&gt;
          &lt;load uri="cocoon:raw://loadapp"&gt;
            &lt;!-- optional --&gt;
            &lt;!-- optional parameters --&gt;
          &lt;/load&gt;
          &lt;save uri="cocoon:raw://saveapp"&gt;
            &lt;!-- optional --&gt;
            &lt;!-- optional parameters --&gt;
          &lt;/save&gt;
          &lt;!-- module configurations: --&gt;

          &lt;configuration name="portal"&gt;
            ...portal configuration
          &lt;/configuration&gt;
        &lt;/application&gt;
      &lt;/applications&gt;

    &lt;/handler&gt;
  &lt;/handlers&gt;
&lt;/autentication-manager&gt;</source>
  </s1>
  <s1 title="Pipeline Patterns">
     <p>As explained in the previous chapters, the framework uses the <em>auth-protect</em>
        action for authentication and protecting documents. This chapter shows some
        common used pipeline patterns for using this framework.</p>
     <s2 title="Single protected document">
        <p>For protecting a document with an authentication handler only the <em>auth-protect</em>
          action with the parameter configuration for the handler is required.</p>
        <p>Pattern:</p>
        <ol>
          <li>Pipeline matching
          </li>
          <li>Using the <em>auth-protect</em> action for protecting
          </li>
        </ol>
        <p>Example:</p>
        <source>&lt;map:match pattern="protected"&gt;
  &lt;map:act type="auth-protect"&gt;  &lt;!-- protect the resource --&gt;
    &lt;map:parameter name="handler" value="myhandler"/&gt;

    &lt;map:generate src="resource.xml"/&gt;
    &lt;map:transform src="toHTML"/&gt;
    &lt;map:serialize/&gt;
  &lt;/map:act&gt;
&lt;/map:match&gt;</source>
        <p>It is very important that the <em>auth-protect</em> action wrapps the real
          pipeline, as the pipeline is only invoked if the action grants access. The
          matching must be done before the action is checked as the action performs a
          redirect for this document.</p>
     </s2>
     <s2 title="Multiple protected documents">
        <p>Often you want to protect a bunch of documents in the same way. One
          solution is to use the single protected document pattern for each document.
          With the multiple protected document pattern you only have to use the action
          once for all documents and not within each document pipeline.</p>
        <p>The prerequisite for this is a common matching pattern for the
          documents:</p>
        <ol>
          <li>Pipeline pattern matching
          </li>
          <li>Using the <em>auth-protect</em> action for protection
          </li>
          <li>Pipeline matching
          </li>
        </ol>
        <p>Example:</p>
        <source>&lt;map:match pattern="protected-*"&gt;
  &lt;map:act type="auth-protect"&gt; &lt;!-- protect the resource --&gt;
    &lt;map:parameter name="handler" value="myhandler"/&gt;

    &lt;map:match pattern="protected-first"&gt;
      &lt;map:generate src="resource1.xml"/&gt;
      &lt;map:transform src="toHTML"/&gt;
      &lt;map:serialize/&gt;
    &lt;/map:match&gt;
        ....
    &lt;map:match pattern="protected-second"&gt;
      &lt;map:generate src="resource2.xml"/&gt;
      &lt;map:transform src="toHTML"/&gt;
      &lt;map:serialize/&gt;
    &lt;/map:match&gt;
  
  &lt;/map:act&gt;
&lt;/map:match&gt;</source>
        <p>Very important - as explained with the single document pattern - is
          the leading match before the action is performed. The second match is required
          to check which pipeline to use.</p>
     </s2>
     <s2 title="Controlling the Application Flow">
        <p>If you want to create documents which behave different wheather you
          are logged in or not, the <em>auth-loggedIn</em> action is the component to
          controll your application flow. This action checks if the user is authenticated
          for a given handler and calls all sitemap components inside the <em>act</em>
          tag.</p>
        <source>&lt;map:match pattern="startpage"&gt;

  &lt;map:act type="auth-loggedIn"&gt;  &lt;!-- check authentication --&gt;
    &lt;map:parameter name="handler" value="myhandler"/&gt;

    &lt;map:redirect-to uri="loggedInStartPage"/&gt;
  &lt;/map:act&gt;

  &lt;map:generate src="startpage.xml"/&gt;
  &lt;map:transform src="toHTML"/&gt;
  &lt;map:serialize/&gt;
&lt;/map:match&gt;</source>
        <p>In the example above, if the user is already logged he is
          redirected to the <em>loggedInStartPage</em> document. If he is not logged in
          for the given handler, the usual start page is generated.</p>
        <p>Both actions, the <em>auth-protect</em> and the
          <em>auth-loggedIn</em> action return - if the user is logged in for the
          given handler - all values from the context to the sitemap, e.g. ID, role etc.
          These values can be used within the other components:</p>
        <source>&lt;map:match pattern"protected"&gt;
  &lt;map:act type="auth-protect"&gt;  &lt;!-- protect the resource --&gt;
    &lt;map:parameter name="handler" value="myhandler"/&gt;

    &lt;!-- Append the ID of the user to the file name --&gt;
    &lt;map:generate src="resource_{ID}.xml"/&gt;
    &lt;map:transform src="toHTML"/&gt;
    &lt;map:serialize/&gt;

  &lt;/map:act&gt;
&lt;/map:match&gt;</source>
        <p>But the <em>auth-loggedIn</em> action does not give the included pipeline
          access to the authentication context belonging to the handler. If you want this, you
          have to nest the <em>auth-protect</em> action inside!</p>
        <source>&lt;map:match pattern"start"&gt;

  &lt;map:act type="auth-loggedIn"&gt;  &lt;!-- check authentication --&gt;
    &lt;map:parameter name="handler" value="myhandler"/&gt;

    &lt;map:act type="auth-protect"&gt;  &lt;!-- give access to the context --&gt;
      &lt;map:parameter name="handler" value="myhandler"/&gt;

      &lt;map:generate src="getinfofromcontext.xml"/&gt;
      &lt;map:transform src="session"/&gt;
      &lt;map:transform src="toHTML"/&gt;
      &lt;map:serialize/&gt;
    &lt;/map:act&gt;
  &lt;/map:act&gt;

&lt;/map:match&gt;</source>
     </s2>
  </s1>
</body>
</document>

<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "document-v10.dtd">

<document>
    <header>
        <title>PDF Serializer</title>
        <version>0.9</version>
        <type>Technical document</type>
        <authors>
            <person name="Carsten Ziegeler" email="cziegeler@apache.org"/>
            <person name="John Morrison" email="john.morrison@uk.experian.com"/>
         </authors>
         <abstract>This document describes the pdf serializer of Cocoon.</abstract>
    </header>
    <body>
        <s1 title="PDF Serializer">
            <p>The PDF serializer takes
                <link href="http://www.w3.org/TR/xsl">XSL FO</link> SAX events as input.
                By using the <link href="http://xml.apache.org/fop/">FOP</link> project
                it creates PDF out of the SAX events.</p>
            <p>This serializer is optional and requires the FOP package in the lib
                directory when building Cocoon 2. However, the distribution includes
                this package already.</p>
            <ul>
                <li>Name : fo2pdf</li>
                <li>Class: org.apache.cocoon.serialization.FOPSerializer</li>
                <li>Cacheable: yes</li>
            </ul>
        </s1>
        <s1 title="FOP and Embedding Fonts">
          <p>Dynamically generating a PDF file (with embedded fonts) in Cocoon
            is basically 8 steps:</p>
          <ol>
            <li>Create the font(s) metric file(s).</li>
            <li>Create a custom configuration file for FOP (Cocoons PDF renderer),
              which tells it what fonts are available and where to find them.</li>
            <li>Create your xml (left as an exercise for the reader ;)</li>
            <li>Create your xslt (again, up to you)</li>
            <li>In the sitemap, tell the fo2pdf serializer where your custom
              configuration file is located.</li>
            <li>Add a match for your PDF (I'm sure you can do the rest...).</li>
            <li>Start Cocoon.</li>
            <li>Request your PDF.</li>
          </ol>
          <p>Easy yeah? OK. Step-by-step...</p>

          <s2 title="Create the font(s) metric file(s).">
            <note>All java calls have nothing else in the classpath or ext directory.
                Also, instructions which have wrapped should be entered as one single
                instruction.</note>
            <p>The instruction to generate a font metric file is:</p>
            <p>Windows:</p>
            <source>
$ cd %PATH_TO_COCOON%\lib
$ java -cp optional\fop-0.20.4.jar;core\xercesImpl-2.0.0.jar;core\xml-apis.jar \
  org.apache.fop.fonts.apps.TTFReader \
  %PATH_TO_FONT% %PATH_TO_METRICS_DIR%\%FONT_NAME%.xml
            </source>
            <p>Unix:</p>
            <source>
$ cd $PATH_TO_COCOON/lib
$ java -cp optional/fop-0.20.4.jar;core/xercesImpl-2.0.0.jar;core/xml-apis.jar \
  org.apache.fop.fonts.apps.TTFReader \
  $PATH_TO_FONT  $PATH_TO_METRICS_DIR/$FONT_NAME.xml
            </source>

            <s3 title="Example: Create the Arial metric files.">
              <p>For the sake of the rest of this tutorial, I'm going to be using
                Windows NT, converting the Arial family of fonts and storing the metrics
                files in the location <code>D:\fop-fonts</code>.</p>
              <p>My TTF files are located in <code>C:\WINNT\Fonts</code>. If you are
                running on Linux/Windows 9x/ME/2000/XP please alter as appropriate.</p>
              <note>I normally use Cygwin; a Unix shell environment which runs on Windows.
                If I slip some Unix into here, please excuse me (although I'd welcome
                the feedback...).</note>

              <p>Start a command session (as appropriate to your env), then change
                to Cocoon libs directory.</p>
              <source>$ cd %PATH_TO_COCOON%\lib</source>
              <p>Create the metrics directory (D:\fop-fonts)</p>
              <source>$ mkdir d:\fop-fonts</source>
              <p>Create the metrics for arial.ttf, arialb.ttf, arialbi.ttf, ariali.ttf</p>
<source>
$ java -cp optional\fop-0.20.4.jar;core\xercesImpl-2.0.0.jar;core\xml-apis.jar \
  org.apache.fop.fonts.apps.TTFReader \
  C:\WINNT\Fonts\arial.ttf D:\fop-fonts\arial.ttf.xml
$ java -cp optional\fop-0.20.4.jar;core\xercesImpl-2.0.0.jar;core\xml-apis.jar \
  org.apache.fop.fonts.apps.TTFReader \
  C:\WINNT\Fonts\arialb.ttf  D:\fop-fonts\arialb.ttf.xml
$ java -cp optional\fop-0.20.4.jar;core\xercesImpl-2.0.0.jar;core\xml-apis.jar \
  org.apache.fop.fonts.apps.TTFReader \
  C:\WINNT\Fonts\arialbi.ttf D:\fop-fonts\arialbi.ttf.xml
$ java -cp optional\fop-0.20.4.jar;core\xercesImpl-2.0.0.jar;core\xml-apis.jar \
  org.apache.fop.fonts.apps.TTFReader \
  C:\WINNT\Fonts\ariali.ttf  D:\fop-fonts\ariali.ttf.xml
</source>
              <p>If everything went to plan, you should now have the metrics for
                the Arial fonts in your fop-fonts directory.</p>
            </s3>
          </s2>
          <s2 title="Create a custom configuration file">
            <p>I normally store this with the metrics file in the fop-fonts
              directory (called config.xml (ensure there's not a font called
              config ;)) although I fully qualify all the filenames just incase I
              move it ;)</p>
            <p>I also find it useful to retain the <code>.ttf</code> as it is also
              possible to add other types of fonts (if you want to read the FOP
              docs) and the <code>.ttf</code> tells me where to locate the font.</p>
<source><![CDATA[
<configuration>
  <fonts>
    <font metrics-file="D:/fop-fonts/arial.ttf.xml" 
          kerning="yes" embed-file="C:/WINNT/Fonts/arial.ttf">
      <font-triplet name="Arial" style="normal" weight="normal"/>
      <font-triplet name="ArialMT" style="normal" weight="normal"/>
    </font>
    <font metrics-file="D:/fop-fonts/arialb.ttf.xml" 
          kerning="yes" embed-file="C:/WINNT/Fonts/arialb.ttf">
      <font-triplet name="Arial" style="normal" weight="bold"/>
      <font-triplet name="ArialMT" style="normal" weight="bold"/>
    </font>
    <font metrics-file="D:/fop-fonts/arialbi.ttf.xml"
          kerning="yes" embed-file="C:/WINNT/Fonts/arialbi.ttf">
      <font-triplet name="Arial" style="italic" weight="bold"/>
      <font-triplet name="ArialMT" style="italic" weight="bold"/>
    </font>
    <font metrics-file="D:/fop-fonts/ariali.ttf.xml"
          kerning="yes" embed-file="C:/WINNT/Fonts/ariali.ttf">
      <font-triplet name="Arial" style="italic" weight="normal"/>
      <font-triplet name="ArialMT" style="italic" weight="normal"/>
    </font>
  </fonts>
</configuration>
]]></source>
            <p>There are other things you can add to this file, look at the FOP
              documentation for further information.</p>
            <p>If you are wondering why each font has been added twice, it has to do
              with the font lookup. If the font is specified as 'Arial' and the
              weight is 'bold' then FOP searches for a matching
              <code><![CDATA[<font-triplet/>]]></code>, then uses the parent
              <code><![CDATA[<font/>]]></code> tag to get the actual font information.
              If the font is specified as 'ArialMT' (it's proper name) it will still
              work. Think of it as an alias capability.</p>
          </s2>
          <s2 title="Sitemap and fo2pdf serializer.">
            <p>All that remains is to tell the serializer, where your config file is
              located. Find the line in your sitemap which looks like:</p>
<source><![CDATA[
<map:serializer name="fo2pdf"
                src="org.apache.cocoon.serialization.FOPSerializer"
                mime-type="application/pdf"/>
]]></source>
            <p>and replace it with:</p>
<source><![CDATA[
<map:serializer name="fo2pdf"
                src="org.apache.cocoon.serialization.FOPSerializer"
                mime-type="application/pdf">
  <user-config>D:/fop-fonts/config.xml</user-config>
</map:serializer>
]]></source>
            <p>You can use absolute paths like above or relative ones. The relative
              paths will be resolved to the sitemap's directory. Furthermore it's possible
              to use Cocoon protocols like <code>cocoon://</code> or
              <code>context://</code>.</p>
            <note>In an older version of Cocoon (2.0.3 and earlier) the config file
              location was specified by using an attribute 'src' on
              <![CDATA[<user-config/>]]>. If you still have this in your sitemap, it's
              recommended to change it to the above provided configuration.</note>
          </s2>
          <p>And that's it. Oh, one final thing to remember: the cache isn't aware
            of your config file; <strong>always</strong> delete your cache-dir
            after modifying your config file.</p>
        </s1>
    </body>
</document>

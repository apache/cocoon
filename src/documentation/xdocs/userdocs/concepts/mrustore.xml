<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "../../dtd/document-v10.dtd">

<document>
  <header>
    <title>MRUMemoryStore and Swapping under Apache Cocoon</title>
    <version></version>
    <type>Technical document</type>
    <authors><person name="Gerhard Froehlich" email="g-froehlich@gmx.de"/>
    </authors>
    <abstract>This document explains how the MRUMemoryStore and Swapping under 
    Cocoon executes.</abstract>
  </header>
  <body>
  <s1 title="Goal">
    <p>This document explains how the MRUMemoryStore and Swapping under 
    Cocoon executes.</p>
  </s1>
  <s1 title="Overview">
    <p>The MRUMemoryStore was developed to provide a standard algorithm to
       store data in memory. For web-based applications the MRU (Most Recently Used) algorithm
       is very suitable, because the object most frequently accessed is always on "top".
    </p>
    <p>If configured, the objects are also swapped to the filesystem if the
    MRUMemoryStore reached his configured max. object limit.
    </p>
  </s1>
  <s1 title="Implementation">
    <s2 title="MRUMemoryStore">
    <p> 
    The heart of the MRUMemoryStore ist combination of a LinkedList and a HashMap:
    </p>
    <p>
    The LinkedList provides the queue mechanism, and the entries in the LinkedList 
    contain the key to the data in the HashMap. When caching a new entry in to the list,
    the entry is inserted to the front of the list.
    If the list is already full, the oldest data entry is removed from the Cache.
    When requesting a entry, the store returns the object by key and inserts the requested key 
    on the top of the Cache.
       
    This implementation keeps the most recent used objects in the store and provides the best
    use of the machines memory.
    </p>
    </s2>
    <s2 title="Swapping">
    <p>
    When the MRUMemoryStore is full or the JVM is at the heap size limit the 
    objects in the MRUMemoryStore are swapped to the Filesystem. The default 
    directory is "cache-dir" in the work-directory.
    </p>
    <p>
    NOTE: The keys under Cocoon are Strings at the moment. Therefor the
    filenames of the swapped objects can be very long. Especially Windows OS
    flavours have problems with long filenames. Use the JispFilesystemStore to
    get rid of it.
    </p>
    </s2>
  </s1>
  <s1 title="Configuration of the MRUMemoryStore in the cocoon.xconf">
  <source><![CDATA[
<store logger="core.store">
  <parameter name="maxobjects" value="100"/>
  <parameter name="use-persistent-cache" value="true"/>
</store>]]>
  </source> 
  <p>Explanation of the paramters:</p>
    <ol> 
      <li><code>&lt;parameter name="maxobjects" value="100"/&gt;</code>:
      Indicates how many objects will be hold in MRUMemoryStore. When the number 
      of maxobjects has been reached, the last object in the MRUMemoryStore will be 
      thrown out.</li>
      <li><code>&lt;parameter name="use-persistent-cache" value="true"/&gt;</code>:
      If this switch is set on true, objects are swapped out to the filesystem,
      if the MRUMemoryStore has reached his maximum object limit, or the JVM 
      memory consumption is over the heap size limit. See StoreJanitor user 
      docs for more information.</li>
	</ol>
  </s1>
  </body>
</document>

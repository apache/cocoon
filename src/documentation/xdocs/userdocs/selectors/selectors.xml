<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "document-v10.dtd">

<document>
	<header>
		<title>Selectors</title>
		<version>0.9</version>
		<type>Technical document</type>
		<authors>
			<person name="Carsten Ziegeler" email="cziegeler@apache.org"/>
			<person name="Gianugo Rabellino" email="gianugo@rabellino.it"/>
			<person name="Diana Shannon, ed." email="shannon@apache.org"/>
		 </authors>
		 <abstract>This document describes all of the available selectors of Cocoon.</abstract>
	</header>
	<body>
		<s1 title="Goal">
			<p>
      This document lists all of the available selectors of Apache Cocoon and
      describes their purpose.
      You may also wish to read  
      <link href="../concepts/matchers_selectors.html">Using and Implementing
      Matchers and Selectors</link>.
      </p>
		 </s1>
		 <s1 title="Overview">
			<p>
      Selectors in Apache Cocoon have a role similar to matchers 
      with additional flexibility. If you haven't learned about
      matchers yet, read about them <link href="../matchers/matchers.html">here</link>
      before continuing. Selectors are designed to evaluate a 
      generally simple boolean expression regarding some
      part of the environment (request URI, headers, or cookies, for example). 
      The result of this evaluation determines which pipeline fragments 
      should be combined within a given pipeline. Unlike matchers, 
      selectors can be active decision-driving components.
      For example, a matcher makes only simple 
      &quot;yes/no&quot; decisions. If a match is successful, a 
      pipeline is executed. If not, it is ignored. 
      Selectors go further by allowing more complex, multiple-choice
      use cases. In short, consider matchers to be simple &quot;if&quot; 
      statements. By extension, consider selectors to have all
      the power of an &quot;if-else if-else&quot; or &quot;switch-case&quot; constructs.
      The selector syntax should be familiar to anyone who
      uses XSLT's <code>&lt;xsl:choose&gt;</code> statement.
      </p>
      <p>
      As an example, consider the typical scenario in which a page should
      be rendered differently based on the client browser. 
      Given the large number and diversity of available browsers, 
      it would be awkward and counterintuitive to address this need
      with a set of matchers. The BrowserSelector tests a given parameter
      against the user-agent request header. Using this single selector, 
      we can deploy a consistent and readable setup.
      </p>
<source>
<![CDATA[
<map:match pattern="docs/*.html">
  <map:generate src="xdocs/{1}.xml"/>
 
  <map:select type="browser">
    <map:when test="netscape">
      <map:transform src="stylesheets/netscape.xsl" />
    </map:when>
    <map:when test="explorer">
      <map:transform src="stylesheets/ie.xsl" />
    </map:when>
    <map:when test="lynx">
      <map:transform src="stylesheets/text-based.xsl" />
    </map:when>
    <map:otherwise>
      <map:transform src="stylesheets/html.xsl" />
    </map:otherwise>
  </map:select>

  <map:serialize/>
</map:match>
]]>
</source>
      
		 </s1>
		 <s1 title="The Selectors in Cocoon">
			<p>
      Available Selectors in Cocoon include the following:
      </p>
			<ul>
				<li><strong>BrowserSelector</strong>: matches the value of the &quot;test&quot;
        parameter against the HTTP User-Agent header, allowing it to 
        recognize the browser issuing the request;</li>
        
				<li><strong>CodeSelector</strong>: matches a snippet of Java code
        given as the &quot;test&quot; parameter against the environment;</li>

				<li><strong>HostSelector</strong>: matches the &quot;test&quot; parameter value
        against the Host request header</li>

				<li><link href="parameter-selector.html">ParameterSelector</link>: matches the string specified
        in the &quot;test&quot; parameter against a specified Cocoon internal
        (e.g. sitemap) parameter;</li>

				<li><strong>HeaderSelector</strong>: same as the Parameter selector,
        but matches against the request headers;</li>

				<li><strong>RequestSelector</strong>: again, same as the Parameter selector,
        but matches against the Request parameters;</li>

				<li><strong>SessionSelector</strong>: finally, this selector is used as
        the Parameter selector to match against an arbitrary session
        attribute;</li>

			</ul>
		</s1>
	</body>
</document>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "../../../WEB-INF/entities/document-v10.dtd">

<document>
  <header>
    <title>Advanced Control Flow</title>
    <authors>
      <person name="Ovidiu Predescu" email="ovidiu@apache.org"/>
      <person name="Christopher Oliver" email="coliver@apache.org"/>
    </authors>
  </header>

  <body>
    <s1 title="JavaScript API">
	<p>Cocoon provides a JavaScript API to manage control flow based on an <link href="http://cvs.cocoondev.org/cgi-bin/viewcvs.cgi/?cvsroot=rhino">extended</link> version of <link href="http://www.mozilla.org/rhino">Mozilla Rhino</link> that supports continuations.</p>
    </s1>
    <s1 title="Functions">
    <s2 title = "sendPage">
      <p>
      <code>void sendPage([String] uri, [Object] bean)</code>
      </p>
      <p>
      Passes control to the Cocoon sitemap to generate the output page.
      </p>
      <p>
      <code>uri</code> is the relative URL of the page to be sent back to the client.
      </p>
      <p>
       <code>bean</code> is a context object which can be accessed inside this page toextract various values and place them in the generated page.
      </p>
    </s2>
    <s2 title = "sendPageAndWait">
    <p>
    <code>WebContinuation sendPageAndWait([String] uri, [Object] bean, [Number] timeToLive)</code>
    </p>
     <p>
     Passes control to the Cocoon sitemap to generate the output page.
     </p>
      <p>The flow script is suspended after the page is generated and the whole execution stack saved in a the WebContinuation object returned from this function. </p>
     <p> <code>uri</code> is the relative URL of the page to be sent back to the client. <code>bean</code> is a context object which can be accessed inside this page to extract various values and place them in the generated page.</p>
     <p><code>timeToLive</code> is the time to live for the continuation created.</p>
     <p>The return value is the continuation object.</p>
    </s2>
  </s1>
    <s1 title="Objects">
    <s2 title = "cocoon">
    </s2>
    <p>The <code>cocoon</code> object represents the current Cocoon sitemap and provides the following readonly properties:</p> 
    <p>The current Cocoon request:</p>
    <p>
    <code>[org.apache.cocoon.environment.Request] request</code>
    </p>
    <p>The current Cocoon response:</p>
    <p>
    <code>[org.apache.cocoon.environment.Response] response</code>
    </p>
    <p>The current Cocoon session:</p>
    <p>
    <code>[org.apache.cocoon.environment.Session] session</code>
    </p>
    <p>The current Cocoon application context:</p>
    <p>
    <code>[org.apache.cocoon.environment.Context] context</code>
    </p>
    <p>The current Cocoon environment:</p>
    <p>
    <code>[org.apache.cocoon.environment.Environment] environment</code>
    </p>
    <p>The current Sitemap's component manager:</p>
    <p>
    <code>[org.apache.avalon.framework.component.ComponentManager] componentManager</code>
    </p>
    <p>Any parameters passed to the script by the Sitemap:</p>
    <p>
    <code>[Array] parameters</code>
    </p>
    <p>The <code>cocoon</code> object also provides the following functions:</p>
    <p>
    <code>[Boolean] process([String] uri, [Object] bizData, [java.io.OutputStream] stream)</code></p>
    <p>
     Call the Cocoon sitemap for the given URI, sending the output of the
     eventually matched pipeline to the specified outputstream.</p>
    <p><code>uri</code> is the URI for which the request should be generated.</p>
    <p><code>bizData</code> is the business data object
     to be made available to the forwarded pipeline</p>
     <p><code>stream</code> is an <code>OutputStream</code> where the output should be written to.</p>
     <p>Returns the result from the Cocoon processor.
     </p>
    
    <p><code>void createSession()</code></p>
    <p>  
       Associate the current set of JavaScript global variables with the user's session. This means that all invocations from the
       sitemap of a JavaScript function (using the &lt;map:call
       function="..."&gt;), will share global JavaScript variables.
    </p> 

    <p>
    <code>void removeSession()</code>
    </p>
    <p>
       Dissociate global JavaScript variables from the user's session.
    </p>

    <p><code>void load([String] uri)</code></p>
    <p>
      Load the JavaScript script specified by <code>uri</code>. The Cocoon
     source resolver is used to resolve <code>uri</code>. 
    </p>

    </s1>
  </body>
</document>

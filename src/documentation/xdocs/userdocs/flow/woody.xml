<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "../../dtd/document-v10.dtd">
<document>
 <header>
  <title>Advanced Control Flow</title> 
  <authors>
   <person name="Christopher Oliver" email="coliver@apache.org" />
   <person name="Ovidiu Predescu" email="ovidiu@apache.org" />
  </authors>
 </header>
 <body>
  <s1 title="Woody">
   <p><link href="http://wiki.cocoondev.org/Wiki.jsp?page=Woody">Woody</link> is another form framework that can be used in your Flowscripts.</p>
<p>Here is an example:</p>
<source><![CDATA[

cocoon.load("resource://org/apache/cocoon/woody/flow/javascript/woody.js");

function form1(form) {
    var model = form.getModel();
    model.email = "bar@www.foo.com";
    model.somebool = true;
    model.account = 2;
    model.cowheight = 4;
    model.number1 = 1;
    model.number2 = 3;
   
    model.contacts[0].firstname = "Jules";
    model.contacts[1].firstname =  "Lucien";
    model.contacts[2].firstname = "Chris";
    model.drinks = ["Jupiler", "Coca Cola"];
   
    form.show("form1-display-pipeline", function(form) {
        switch(form.getSubmitId()) {
        case "remove-selected-contacts":
            {
                for (var i = model.contacts.length-1; i >= 0; i--) {
                    if (model.contacts[i].select) {
                        model.contacts.remove(i);
                    }
                }
            }
            break;
        case "add-contact":
            {
                model.contacts.length++;
            }
            break;
        default:
            return true;
        }
        return false;
    });
    sendPage("form1-success-pipeline");
    form.finish();

}
]]></source>
    <s2 title ="The woody function"><anchor id="woody"/>
      <p>The entry point to a Woody form is the <code>woody()</code> function:
      <p>
      <em>Function</em> <code>woody(form_function, form_definition, attribut_name)</code>
      </p>
        You call the 
<code>woody</code> function from your sitemap to create a new form, for example:</p>
<source><![CDATA[

   <map:match pattern="form1.flow">
           <map:call function="woody">
             <map:parameter name="function" value="form1"/>
             <map:parameter name="form-definition" value="forms/form1.xml"/>
             <map:parameter name="attribute-name" value="form1"/>
           </map:call>
     </map:match>
]]></source>
<p>
The <code>function</code> parameter specifies the name of a JavaScript function that will 
provide the form's flow. The <code>form-definition</code> parameter specifies the 
location of the Woody form definition of the form. The <code>attribute-name</code> 
parameter specifies the name of a request attribute that will be used to 
store the form. The specified function will be called with one 
parameter, the newly created form.
      </p>
  <p>
  To use Woody in a Flowscript you must load <code>woody.js</code> into your script and define a function that takes one argument (the argument passed to your function will be a JavaScript representation of your Woody form), for example like this:</p>
  <source>

    cocoon.load("resource://org/apache/cocoon/components/woody/flow/javascript/woody.js");

    function myFormHandler(form) {
       ...
    }
  </source> 
  </s2>
 <s2 title="Form Object">
  <p>
  Woody provides a JavaScript <code>Form</code> object that provides methods for you to manage your form's <em>model</em> and to invoke its associated <em>view</em> and any validation you've specified.
  </p>
  <p>
    The <code>Form</code> object passed to your function has the following properties and functions:</p>
    <s3 title = "getModel"><anchor id="getModel"/>
      <p>
      <em>Function</em> <code>[Object] getModel()</code>
      </p>
      <p>
        Returns a JavaScript wrapper of the Woody <code>&lt;form&gt;</code> Widget.
      </p>
    </s3>
    <s3 title = "show"><anchor id="show"/>
      <p>
      <em>Function</em> <code>show([String] uri, [Function] validator)</code>
      </p>
      <p>
       This method repeatedly shows the form until validation is complete. If 
       the <code>validator</code> function is supplied it will be called to do additional 
       validation.  The <code>validator</code> function will be called with one argument containing a 
       reference to the form.
      </p>
    </s3>
    <s3 title = "getSubmitId"><anchor id="getSubmitId"/>
      <p>
      <em>Function</em> <code>[String] getSubmitId()</code>
      </p>
      <p>
       Returns the id of the selected Woody <code>&lt;button&gt;</code> widget.
      </p>
    </s3>
    <s3 title = "finish"><anchor id="finish"/>
      <p>
      <em>Function</em> <code>finish()</code>
      </p>
      <p>
       Destroys this form and releases all of its resources.
      </p>
    </s3>
  </s2>
  </s1>
 </body>
</document>

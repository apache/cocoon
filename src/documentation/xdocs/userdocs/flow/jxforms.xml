<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "../../dtd/document-v10.dtd">
<document>
 <header>
  <title>Advanced Control Flow</title> 
  <authors>
   <person name="Christopher Oliver" email="coliver@apache.org" />
  </authors>
 </header>
 <body>
  <s1 title="JXForms">
   <p><em>JX</em>Forms is a framework that uses Apache <link href="http://jakarta.apache.org/commons/jxpath"><em>JX</em>Path</link> to support <link href="http://www.w3.org/MarkUp/Forms/">W3C XForms</link>-based markup and automated server-side binding to 
   <link href="http://java.sun.com/products/javabeans/">JavaBeans</link>, 
   <link href="http://www.w3.org/DOM/">XML/DOM</link>, 
   <link href="http://www.jdom.org/">JDOM</link>,
   <link href="http://jakarta.apache.org/commons/beanutils/api/org/apache/commons/beanutils/DynaBean.html">DynaBeans</link>, and JavaScript objects.
		
   </p>
<p>W3C XForms defines a device-neutral, platform-independent set of
form controls suitable for general-purpose use. JXForms supports a subset of these controls. The controls are
bound to a <em>model</em> provided by your Flowscript via <link href="http://www.w3.org/TR/xpath">XPath</link> expressions, for example in this simple case using the <code>ref</code> attribute
on the controls (note that we have
intentionally defaulted the JXForms namespace prefix here):</p>


<source>
&lt;select1 ref="/method"&gt;
  &lt;label&gt;Select Payment Method&lt;/label&gt;
  &lt;item&gt;
    &lt;label&gt;Cash&lt;/label&gt;

    &lt;value&gt;cash&lt;/value&gt;
  &lt;/item&gt;
  &lt;item&gt;
    &lt;label&gt;Credit&lt;/label&gt;
    &lt;value&gt;cc&lt;/value&gt;

  &lt;/item&gt;
&lt;/select1&gt;
&lt;input ref="/number"&gt;
  &lt;label&gt;Credit Card Number&lt;/label&gt;
&lt;/input&gt;
&lt;input ref="/expiry"&gt;
  &lt;label&gt;Expiration Date&lt;/label&gt;

&lt;/input&gt;
&lt;submit submission="submit"&gt;
  &lt;label&gt;Submit&lt;/label&gt;
&lt;/submit&gt;</source>
  <p>
  In your Flowscript you would supply an appropriate model, for example, like this:</p>
   <p><source>
      var model = {
         method: "cash",
         number: "",
         expiry: ""
      }
   </source></p>
  <p>
  Upon submission of the form the model will be updated accordingly, and you can take action in your script based on its values:
  </p>
   <p><source>
      var model = {
         method: "cash",
         number: "",
         expiry: ""
      }
      form.setModel(model);
      form.sendView("form.xml");  // like sendPageAndWait this call blocks 
                                  // until the form is submitted

      // process the form's values:
      if (model.method == "cash") {
          ...
      } else if (model.method == "credit") {
          ....
      } 
   </source></p>
   <p>
   Since JXForms uses <link href="http://jakarta.apache.org/commons/jxpath">JXPath</link>, your model may consist of any objects that <link href="http://jakarta.apache.org/commons/jxpath">JXPath</link> supports.
   </p>
   <p> 
   JXForms also supports declarative validation of form elements using Schematron, and automated support for back/forward navigation in multi-page forms using continuations.
   </p>
  </s1>

 <s1 title="Form Controls">
 <p>The JXForms tags are defined in the following namespace:</p>
 <source>http://apache.org/cocoon/jxforms/1.0</source>
 <p>JXForms supports the following controls:</p>
 <s2 title="form">
 <p/>
 </s2>
 <s2 title="input">
 <p/>
 </s2>
 <s2 title="secret">
 <p/>
 </s2>
 <s2 title="textarea">
 <p/>
 </s2>
 <s2 title="output">
 <p/>
 </s2>
 <s2 title="select">
 <p/>
 </s2>
 <s2 title="select1">
 <p/>
 </s2>
 <s2 title="submit">
 <p/>
 </s2>
 <s2 title="group">
 <p/>
 </s2>
 <s2 title="repeat">
 <p/>
 </s2>
 <s2 title="itemset">
 <p/>
 </s2>
 </s1>  
 <s1 title="Sitemap">
<p>To use the JXForms, you will need to add several elements to your <link href="../concepts/sitemap.html">Sitemap</link>, namely the JXForms generator, and several XSLT stylesheets. To use the JXForms generator add a generator entry to your Sitemap with the <code>src</code> attribute set to <code>org.apache.cocoon.generation.JXFormsGenerator</code>, for example like this:</p>
<source>
&lt;map:generators&gt;
  &lt;map:generator label="content,data" 
      logger="sitemap.generator.jxforms" name="jxforms" 
         src="org.apache.cocoon.generation.JXFormsGenerator"/&gt;
&lt;/map:generators&gt;
 </source>
 <p>To invoke your form you use the Sitemap's <code>&lt;map:call&gt;</code> operation to invoke the <code>jxForm</code> Flowscript function, for example like this:</p>
<source><![CDATA[
   <map:match pattern="feedBackWizard">
     <map:call function="jxForm">
        <map:parameter name="function" value="{1}"/>
        <map:parameter name="id" value="form-feedback"/>
        <map:parameter name="validator-schema-namespace" value="http://www.ascc.net/xml/schematron"/>
        <map:parameter name="validator-schema" value="schematron/wizard-xmlform-sch-report.xml"/>
     </map:call>
   </map:match>
]]></source>

</s1>  
 <s1 title="Flowscript">
  <p>
  JXForms provides a JavaScript <code>JXForm</code> object that provides methods for you to manage your form's <em>model</em> and to invoke its associated <em>view</em> and any validation you've specified.
  </p>
  <p>
  To use JXForms in a Flowscript you must load <code>JXForm.js</code> into your script and define a function that takes at one argument (the argument passed to your function will be a JavaScript representation of your form), for example like this:</p>
  <source>

    cocoon.load("resource://org/apache/cocoon/components/flow/javascript/JXForm.js");

    function myFormHandler(form) {
       ...
    }

  </source>
  <s2 title="JXForm Object">
  <p>
    The <code>JXForm</code> object passed to your function has the following properties and functions:</p>
    <s3 title = "setModel"><anchor id="setModel"/>
      <p>
      <em>Function</em> <code>setModel([Object] model)</code>
      </p>
       <p>Set the model object of this form. <code>model</code> may be any Java bean, JavaScript, DOM, or JDOM object.</p>
    </s3>
    <s3 title = "getModel"><anchor id="getModel"/>
      <p>
      <em>Function</em> <code>[Object] getModel()</code>
      </p>
       <p>Get the model object of this form.</p>
    </s3>
    <s3 title = "sendView"><anchor id="sendView"/>
      <p>
      <em>Function</em> <code>sendView([String] uri, [Function] validator)</code>
      </p>
      <p>
 Sends view to presentation pipeline and waits for subsequent submission.
 Automatically resends view if validation fails.
 Creates two continuations: one immediately before the page is sent 
 and one immediately after. These are used to implement automated support
 for back/forward navigation in the form. When you move forward in the
 form the second continuation is invoked. When you move back from the
 following page the first continuation is invoked.

      </p>
    </s3>
    <s3 title = "addViolation"><anchor id="addViolation"/>
      <p>
      <em>Function</em> <code>addViolation([String] xpath, [String] message)</code>
      </p>
      <p>Adds a violation to this form</p>
    </s3>
    <s3 title = "hasViolations"><anchor id="hasViolations"/>
      <p>
      <em>Function</em> <code>[Boolean] hasViolations()</code>
      </p>
      <p>Does this form have violations?</p>
    </s3>
    <s3 title = "getValue"><anchor id="getValue"/>
      <p>
      <em>Function</em> <code>[Object] getValue([String] xpath)</code>
      </p>
      <p>Computes the value of an xpath expression against the model of this form</p>
    </s3>
    <s3 title = "iterate"><anchor id="getValue"/>
      <p>
      <em>Function</em> <code>[java.util.Iterator] iterate([String] xpath)</code>
      </p>
      <p>Returns an iterator over a nodeset value of an xpath expression evaluated 
 against the model of this form</p>
    </s3>
    <s3 title = "finish"><anchor id="finish"/>
      <p>
      <em>Function</em> <code>finish([String] uri)</code>
      </p>
      <p>Forwards to <code>uri</code> and then releases all resources associated with this form.</p>
    </s3>
  </s2>
 </s1>  
 <s1 title="Validation">
 </s1>  
 <s1 title="Stylesheets">
 </s1>  
 </body>
</document>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "../dtd/document-v10.dtd">

<document>
	<header>
		<title>cTwIG - Cocoon Two Idiots Guide - Why</title>
		<authors>
			<person name="Jeremy Aston" email="jez@pigbite.com"/>
		</authors>
	</header>

	<body>
		<s1 title="Why?">
			<p>If nothing else these pages form my own personal documentation of how to use C2 from the ground up.  I run a team of developers and as much as I encourage them to jump into technology and problem solve themselves, I also want them to know when to ask for help and to do it before they have wasted hours of time banging their heads against brick walls.  With a technology that is new to them, which C2 is, these pages can help them get more productive more quickly.  I am learning C2 too so I don't want to fall into the same trap.</p>
			<p>When I installed C2 for the first time I wanted to write down what I did so my team could benefit.  In the course of asking questions on the xml-cocoon-users mail list I realised that others were having the same problems and, more importantly, the answers were all there via the generous nature of more experienced list users.  To support my team, the wider development community and pay back in kind the support of others I wanted to make my notes available.</p>
			<p>Given that I am still getting some basic stuff running these pages are going to be like a diary of my work for the first few weeks but I hope that something good comes out of it.  If you find ways of doing things better, have your own notes, want to put me right on something or just want to stop it being a one man ego trip then please <link href="ctwig-contributing.html">contribute</link>.</p>
			<p>As a bit of technical background...  I have been working for almost the past five years developing web based e-learning solutions, firstly a learning mangement system (Solstra - <fork href="http://www.solstra.com">www.solstra.com</fork>), then an e-learning portal (easycando.com - <fork href="http://www.easycando.com">easycando.com</fork>) and more recently content for <fork href="http://www.knowledgepool.com">KnowledgePool</fork>.  Right from day one, after trying and discarding ASP and Cold Fusion, we saw the need to use templates that could seperate logic from layout.  We built our own Java based architecture then moved it from templates to servlets as that technology progressed.  By using a property file based system along with classes that abstracted the HTML coding side, we built configurable, multi-lingual solutions.  The basic method still contains weaknesses and I was keen to see how XML/XSL could help.</p>
			<p>About a year ago we developed some prototype code that used JSP, beans, XML and XSL.  It worked quite well but then things changed, I moved jobs and did not do anything more other than mull things over in my head.  More recently I have had to start architecting tools to help my company develop learning content and I revisited my earlier thoughts.  I was reading a "Java and XML" by Brett McLaughlin (published by O'Reilly) and it talked about Cocoon.  When I saw the taglib (logicsheet) idea I realised here was a platform I could work with.  I tried 1.8 as it was production code and then moved to 2 because I saw the internationalisation capabilities and thought it is probably close to becoming a fully released product.</p>
			<p>I am now building more and more code and realising that sharing my experiences might help others.  At worst it'll be how not to do it!</p>
		</s1>
	</body>
</document>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "../dtd/document-v10.dtd">

<document>
 <header>
  <title>Updating Cocoon</title>
  <authors>
   <person name="Carsten Ziegeler" email="cziegeler@apache.org"/>
   <person name="J&#246;rg Heinicke" email="joerg@apache.org"/>
   <person name="Bertrand Delacr&#233;taz" email="bdelacretaz@apache.org"/>
  </authors>
 </header>

 <body>

 <s1 title="Updating Cocoon">
  <p>Please take your time to read this document completely before trying to upgrade from
     a Cocoon 2.0.x installation to 2.1 (or above).</p>
  <p>
   This is a brief discussion of the changes between the latest official release @released.version@
   and the current development version of Apache Cocoon.
   You only need this information if you are updating an existing Cocoon installation, or
   if you want to know what is going on in the development of Cocoon.
  </p>
  <p>The Cocoon team took great care in making this new version as compatible as
    possible. However in order to achieve even more flexibility, usability and
    performance, the internal architecure of Cocoon has been improved. Due to these
    improvements it has not been possible to be compatible in every little detail. 
    But if you follow this document closely and follow the instructions listed here, 
    you should have running an upgraded version very quickly.
  </p>
  <p>
   The Cocoon team has developed many Avalon components that are not specific to Cocoon 
   and therefore have been donated to the Avalon Excalibur project and moved out
   of Cocoon. This has led to some configuration changes which are also described
   in this document.
  </p>
 </s1>
  <s1 title="Sitemap">
   <p>There are some changes in the sitemap and in the configuration of some components in
     the sitemap.</p>
   <s2 title="Pipelines configuration in the sitemap">
     <p>
      The configuration of the pipelines has moved from cocoon.xconf to the sitemap.
      To update your installation, you have to remove the "event-pipeline" and "stream-pipeline" section
      from your cocoon.xconf and add the <code>map:pipes</code> section to the <code>map:components</code> section
      of your sitemap. You can find the pipelines components definition in the sample
      main sitemap of Cocoon. Here is an example:
     </p>
     <source><![CDATA[
<map:sitemap>
 <map:components>
      ...
  <map:pipes default="caching">
   <map:pipe name="caching"
    src="org.apache.cocoon.components.pipeline.impl.CachingProcessingPipeline"/>
   <map:pipe name="noncaching"
    src="org.apache.cocoon.components.pipeline.impl.NonCachingProcessingPipeline"/>
  </map:pipes>
 </map:components>
   ...
</map:sitemap>
     ]]></source>
     <p>You can choose these different pipeline implementations
       in the <code>map:pipeline</code> section by specifying their <code>type</code> attribute:
     </p>
     <source><![CDATA[
<map:sitemap>
  ...
 <map:pipelines>
  <map:pipeline type="noncaching">
   <map:match pattern="welcome">
                  ...
   </map:match>
            ..
  </map:pipeline>
 </map:pipelines>
</map:sitemap>
     ]]></source>
     <p>This is similar to choosing the type of a generator or any other sitemap
       component. If the type attribute is omitted, the default configuration from the <code>map:components</code>
       section is used.
     </p>
     <p>The SAXConnectors have been removed, so if you upgrade manually you have to remove
        the <em>sax-connectors</em> configuration from <em>cocoon.xconf</em>.</p>
     <p>So it's not that bad, despite incompatible changes in the Cocoon code there is
       little to do to update your Cocoon installation.</p>
    </s2>
   <s2 title="Individual configuration of pipelines">
    <p>The sitemap now provides individual configuration of <code>map:pipeline</code> sections.
       You can now define one pipeline using caching, another one not using
      caching at all and a third one using a different caching implementation, for example.
    </p>
   </s2>
   <s2 title="FOP Serializer">
    <p>Relative paths in FOP serializer's &lt;user-config&gt; are now resolved relatively
      to the directory that contains the sitemap.</p>
    <p>All Cocoon URIs are supported too.</p>
   </s2>
  <s2 title="Namespace changes">
    <p>
        In order to have consistent namespaces, some transformers
       and generators (listed below) use new namespaces. If you use any of these components, you will
       need to use the new namespaces.
    </p>
    <s3 title="Request Generator">
    <p>RequestGenerator changed its namespace from http://xml.apache.org/cocoon/requestgenerator/2.0 to
       http://apache.org/cocoon/request/2.0.
    </p>
    </s3>
    <s3 title="I18nTransformer">
      <p>The I18nTransformer changed its namespace from
         http://apache.org/cocoon/i18n/2.0 to http://apache.org/cocoon/i18n/2.1</p>
    </s3>
  </s2>
  </s1>
  <s1 title="Changes in logging interfaces require recompilation">
    <p>
       Due to some interface changes in the Cocoon logging components, custom java
       components (generators,transformers or actions for example) compiled for Cocoon 2.0.x will not run
       under Cocoon 2.1 unless recompiled.</p>
  </s1>
  <s1 title="Components">
   <p>
    The Cocoon architecture has changed significantly. However, great care has been
    taken to preserve backwards compatibility.
    This effort has been successful except for
    one change which shouldn't affect anybody (see below).
   </p>
   <s2 title="Cocoon Configuration (cocoon.xconf)">
    <p>In order to reflect the new version, the version information in the <em>cocoon.xconf</em>
       has changed from <em>2.0</em> to <em>2.1</em>.
    </p>
    <p>We suggest for updating the <em>cocoon.xconf</em> to start with the new cocoon.xconf and
       incorporate your changes instead of trying to migrate the old configuration file.</p>
   </s2>
   <s2 title="Source Resolver">
    <p>The SourceResolver is now an Avalon component
      which can be accessed using <em>cocoon.manager.lookup(SourceResolver.ROLE).</em>.
      The package name of the component is <em>org.apache.excalibur.source</em>.</p>
   </s2>
   <s2 title="XSLT Processor">
    <p>
        The default XSLT processor has changed, and there are some issues related to JDK 1.4
    </p>
    <s3 title="Xalan vs. XSLTC">
     <p>The most important change is the switch from
      <link href="http://xml.apache.org/xalan-j">Xalan</link> to
      <link href="http://xml.apache.org/xalan-j/xsltc_usage.html">XSLTC</link> as the default XSLT
      processor (configured in the root sitemap in the <code>map:components</code> section under
      <code>map:transformers</code>).</p>
     <p>We decided to switch to XSLTC for performance reasons, but it might not be as stable as
      Xalan, and XSLTC's error messages are currently not as good as Xalan's.
     </p>
     <p>
      Bruno Dumon has queued a
      <link href="http://nagoya.apache.org/bugzilla/show_bug.cgi?id=20114">patch</link>
      for XSLTC, which improves error handling and will hopefully be applied soon. For now, if you get error
      messages like <em>"unable to create templates for stylesheet ..."</em>, simply switch the
      processor to Xalan in the <code>map:transform</code> element to get better error reporting (hopefully).
      You don't necessarily need to switch the default processor, it can be done individually for the transformation
      that gives errors.
    </p>
     </s3>
     <s3 title="XML/XSLT with JDK 1.4">
      <p>Another serious issue is the presence of the Xalan and Xerces
       package in the JDK 1.4. For general information on this please read the
       <link href="http://xml.apache.org/xalan-j/faq.html#jdk14">Xalan FAQ</link> and our own
       <link href="http://wiki.cocoondev.org/Wiki.jsp?page=EndorsedLibsProblem">EndorsedLibsProblem</link>
       wiki page.
      </p>
      <p>
       Basically, you have to update your libraries in the endorsed dirs of the JDK
       or the servlet containers with every new version of Xalan and Xerces delivered with Cocoon.
       Strange errors can occur if you have different versions of these packages in the
       classpath (independent of those in the JDK).
      </p>
     </s3>
   </s2>
   <s2 title="XML Parser">
    <p>The XML parser component has been moved to Excalibur.
     In cocoon.xconf, the hint name has therefore changed from <em>parser</em> to
     <em>xml-parser</em>. The configuration has not changed, so changing the hint
     names is sufficent.</p>
    <p>Java code should not use
      <em>org.apache.cocoon.components.parser.Parser.ROLE</em> anymore; use
      <em>org.apache.excalibur.xml.sax.SAXParser.ROLE</em> instead.
    </p>
   </s2>
   <s2 title="XML Entity Resolver">
    <p>Similarly, the XML entity resolver component has been moved to Excalibur.
     In cocoon.xconf the hint name has therefore changed from <em>resolver</em> to
     <em>entity-resolver</em>. The configuration has not changed, so changing the hint
     names is sufficent.</p>
    <p>Java code should not use
      <em>org.apache.cocoon.components.resolver.Resolver.ROLE</em> anymore; use
      <em>org.apache.excalibur.xml.EntityResolver.ROLE</em> instead.
    </p>
    <p>The default entities (DTDs, entity sets, etc.) have moved to the
     WEB-INF/ directory.
    </p>
   </s2>
   <s2 title="Stores">
    <p>The Store and StoreJanitor components and implementations have been moved to
       Avalon Excalibur.</p>
    <p>To make upgrading easier, the class attributes of the store janitor 
       component has been removed in the <em>cocoon.xconf</em> as the class names have changed.
       The <em>cache-transient</em> and <em>cache-persistent</em> components do
       not exists anymore, so remove any reference from the cocoon.xconf. Instead
       the <em>persistent-store</em> and <em>transient-store</em> components
       fulfil their tasks.
    </p>
    <p>In general the package names changed from <em>org.apache.cocoon.components.store</em>
       to <em>org.apache.excalibur.store</em> (and <em>org.apache.excalibur.store.impl</em>). So
       if you have custom java code using these components, you have to change
       your imports.</p>
    <p>The roles <em>PERSISTENT_CACHE</em> and <em>TRANSIENT_CACHE</em> have been renamed to
       <em>PERSISTENT_STORE</em> and <em>TRANSIENT_STORE</em>. The hold() method has been removed
       from the Store interface.</p>
   </s2>
   <s2 title="SAXConnectors, Stream and Event Pipeline">
    <p>This is the only real incompatible change (But don't panic, this will
       not affect you, or maybe just a little bit..).
    </p>
    <p>
       The internal architecture of Cocoon
       has changed: previously, the processing pipeline - consisting of
       a generator, the transformers and a serializer - was represented by two components,
       called <em>stream</em> and <em>event pipeline</em>.</p>
    <p>For a simpler architecture, enhanced functionality and improved performance,
       these components have been combined into one: the <em>processing pipeline</em>.
       The <em>SAXConnectors</em>, which were rarely used, have been removed
       to avoid overcomponentization.</p>
   </s2>
   <s2 title="File Upload">
     <p>The class name for file upload has changed from <em>org.apache.cocoon.components.request.multipart.FilePart</em> to
        <em>org.apache.cocoon.servlet.multipart.Part</em>, and the <em>getFilePath()</em> has been renamed
        <em>Part.getUploadName().</em>
     </p>
   </s2>
  </s1>
 </body>
</document>

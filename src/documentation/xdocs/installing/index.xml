<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "document-v10.dtd">
<document>
  <header>
    <title>Installing Apache Cocoon</title>
    <authors>
      <person name="Cocoon Developers" email="dev@cocoon.apache.org"/>
    </authors>
  </header>

  <body>
    <s1 title="Getting Apache Cocoon">
      <p>
       You have three choices for getting Cocoon: you can either download
       a stable release, or you can download development snapshot, or you can
       get the latest development version directly from the cvs repository.
      </p>
      <s2 title="Download a distribution">
        <p>
        You can simply download the latest official release from the
        <link href="http://cocoon.apache.org/mirror.cgi">Cocoon distribution</link>
        directory.
       </p>
      </s2>
      <s2 title="Download a development snapshot">
        <p>
        You also can download one of the development snapshots from the
        <link href="http://cocoon.apache.org/mirror.cgi#nightly">CVS snapshots</link>
        directory.
       </p>
      </s2>
      <s2 title="Step-by-step cvs instructions for Windows">
        <p>See the Cocoon document
         <link href="http://cocoon.apache.org/community/contrib.html">Contrib</link>
         for starting tips.
        </p>
        <ol>
          <li>Download a recent
            <link href="http://sourceforge.net/projects/cvsgui/">WinCVS</link>
            (1.2 or above);
          </li>
          <li>Install it;</li>
          <li>Start it;</li>
          <li>Click on admin-&gt;preferences;</li>
          <li>In "Enter the CVSROOT:" enter
            ":pserver:anoncvs@cvs.apache.org:/home/cvspublic" (without quotes);</li>
          <li>In "Authentication:" choose "'passwd' file on the cvs server";</li>
          <li>Click "Ok";</li>
          <li>Click admin-&gt;login;</li>
          <li>When asked for the password: answer "anoncvs" (without quotes);</li>
          <li>Click "create-&gt;checkout module";</li>
          <li>Module name and path on the server is "cocoon-2.1" (no quotes);</li>
          <li>Choose a dir to put the source code in;</li>
          <li>Go to the "Checkout-options" tab and select "By revision/tag/branch"
              and enter "HEAD";</li>
          <li>Click "Ok";</li>
          <li>If everything goes well, messages will start to appear in the log
            window;</li>
          <li>Wait until you see "*****CVS exited normally with code 0*****" in the
            log window;</li>
          <li>The Cocoon source is now on your harddrive.</li>
        </ol>
      </s2>
      <s2 title="Step-by-step cvs instructions for Unix">
        <ol>
          <li>Start the shell of your choice.</li>
          <li>Enter "cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic login".</li>
          <li>When asked for the password: answer "anoncvs".</li>
          <li>Enter "cvs -d :pserver:anoncvs@cvs.apache.org:/home/cvspublic -z3 checkout
            -r HEAD cocoon-2.1". This will create a directory called "cocoon-2.1" where the
            Cocoon2 source will be stored.</li>
          <li>Wait until cvs has finished.</li>
          <li>The Cocoon source is now on your harddrive.</li>
        </ol>
        <p>In case you want to update your Cocoon source tree to the
          current version, change to the "cocoon-2.1" directory and
          call "cvs -z3 update -d -P".</p>
      </s2>
    </s1>

    <s1 title="Configuring Environment">
      <s2 title="Set JAVA_HOME environment variable">
        <p>Set the JAVA_HOME environment variable to point to the root directory of
          the Java Development Kit installed on your machine. To do this simply type:</p>
        <source>
[unix]  JAVA_HOME=/path/to/java/
[win32] SET JAVA_HOME=c:\path\to\java
        </source>
        <p>Your mileage may vary, but you know how to setup environments, right?</p>
      </s2>

      <s2 title="Java 1.4 configuration">
        <p>Cocoon requires more recent versions of the Xerces and Xalan libraries
          than those shipped with j2se 1.4. To override bundled libraries, follow
          these steps:
        </p>
        <ol>
          <li>
            Create <code>%JAVA_HOME%\jre\lib\endorsed</code> directory. (Tomcat users
            use <code>%TOMCAT_HOME\common\endorsed</code> instead)
          </li>
          <li>
            Copy <code>xercesXXX.jar</code>, <code>xalan-XXX.jar</code>,
            and the <code>xml-apis.jar</code> from the
            <code>.\lib\endorsed\</code> to the new directory created above.
          </li>
        </ol>
        <p>Due to changes in JDBC between JDK 1.3 and JDK 1.4, it is not possible
           to use Cocoon built on JDK 1.3 with JDK 1.4 when it comes to database
           connections. Make sure you prepare cocoon with a JDK that matches the
           one you will deploy on.
        </p>
      </s2>

      <s2 title="JDK Dependency">
        <p>Cocoon requires a Java compiler for installation and for running some
        	components like XSP etc. For components, the default configuration of
        	Cocoon does not use the compiler in JAVA_HOME, but a version shipped
        	with Cocoon.
        </p>
        <note>You can configure which compiler Cocoon uses in WEB-INF/lib.
        </note>
      </s2>
      <fixme author="ghoward">Is this still an issue?</fixme>

      <s2 title="UNIX with X server">
        <p>Cocoon is bundled with the <link href="http://xml.apache.org/batik/">Batik</link>
          (SVG rasterization toolkit) to deliver SVG imaging capabilities. Batik uses Java
          <code>java.awt</code> library, which (at least in Sun JDK before 1.4) requires
          graphics display. This means that X server must be running and Cocoon should
          have permission to connect to it.</p>

        <p>Easiest way to avoid X server connection problem (and to have mentioned permission)
          is to install and run Cocoon and entire servlet engine of your choice under regular
          user account.</p>

        <p>For security, and many other reasons, X server can be replaced by Xfvb
          or PJA (alternative awt implementation).</p>

        <note>Sun JDK 1.4 does not require graphics display anymore, but Java has to be
          started with the argument <code>-Djava.awt.headless=true</code>,
          and X libraries still must be installed.</note>
	      <fixme author="ghoward">Is this still an issue?</fixme>
      </s2>

      <s2 title="Headless UNIX and PJA">
        <p>If you are using unix with the Sun JDK 1.4, it can run in the
          headless environment (but you still must have X libraries installed!)
          when following option is provided on Java startup:</p>
        <source>-Djava.awt.headless=true</source>
        <note>If you use Tomcat, this can be done by setting environment variable
          CATALINA_OPTS (Tomcat 4.x), or TOMCAT_OPTS (Tomcat 3.x):</note>
        <source>export CATALINA_OPTS='-Djava.awt.headless=true'</source>
        <p>If you are using unix with the Sun JDK 1.3.1 or earlier, it's awt
          implementation requires you to use X even if you aren't actually
          displaying anything. One simple solution is to use a different
          implementation of the awt.</p>
        <ol>
          <li>From www.eteks.com you can get an awt replacement that doesn't need X:
            <link href="http://www.eteks.com/pja/en/">http://www.eteks.com/pja/en/</link>.</li>
          <li>Then add the following options to the Java command starting your container:
          </li>
        </ol>
        <source>
-Xbootclasspath/a:/path/to/pja.jar
-Dawt.toolkit=com.eteks.awt.PJAToolkit
-Djava.awt.graphicsenv=com.eteks.java2d.PJAGraphicsEnvironment
-Djava.awt.fonts=/usr/local/jdk/jre/lib/fonts/
        </source>
        <note>If you use Tomcat, this can be done by setting environment variable
          CATALINA_OPTS (Tomcat 4.x), or TOMCAT_OPTS (Tomcat 3.x):</note>
        <source>
export CATALINA_OPTS='-Xbootclasspath/a:/path/to/pja.jar \
    -Dawt.toolkit=com.eteks.awt.PJAToolkit \
    -Djava.awt.graphicsenv=com.eteks.java2d.PJAGraphicsEnvironment \
    -Djava.awt.fonts=/usr/local/jdk/jre/lib/fonts/'
        </source>
      </s2>
    </s1>

    <s1 title="Building Cocoon">
      <s2 title="Optional functionality">
        <note>This is an area that has changed significantly since 2.0</note>
        <s3 title="Blocks">
          <p>Additional "components" in Cocoon 2.1 are now implemented using a partial
            implementation of a concept called "blocks". Full support (planned for the
            next release) will include hot-deployable services with java-like extension
            and inheritance. For this release, blocks are implemented as self contained
            units of code, samples, files and configuration. Most, if not all optional
            features have been factored out into blocks and can be neatly included or
            excluded as a unit.
          </p>
          <p>Most blocks are configured by default to be included in the build, but can
            be excluded using a <code>local.blocks.properties</code> file.
          </p>
          <p>
            Some blocks delivered with Cocoon require additional libraries which can not
            be redistributed with Cocoon (e.g. the Php block). The documentation for
            these should provide more information, and you should find a "mocks" directory
            containing non-functional code provided merely to allow compilation.
          </p>
        </s3>
        <s3 title="Optional Jars">
          <p>Some additional libraries could not be factored ou 
            into a block. For example, the Jakarta Commons HttpClient jar is used by
            several different optional components, some not in blocks. If you determine
            that one of these is not necessary for your build, you can eliminate it from
            your build by removing its entry in lib/jars.xml and removing the jar from
            lib/optional.
          </p>
        </s3>
        <s3 title="Building a minimal Cocoon">
          <p>By creating and editing local.build.properties and local.blocks.properties
            you can remove any unnecessary features you desire.
          </p>
        </s3>
      </s2>
      <s2 title="Running the build">
        <note>This is an area that has changed significantly since 2.0</note>
        <p>Cocoon uses <link href="http://jakarta.apache.org/ant/">Jakarta Ant</link>
          for the build and installation, and comes with a build script
          ([unix]./build.sh, [win32] .\build.bat) that automates the process.
        </p>
        <note>If you want to use build.xml directly with your copy of Ant, please
          run the build script at least once after every CVS checkout, to ensure that
          extra initializations like jar copying are done correctly.
        </note>
        <note>The build script overrides the existing ANT_HOME variable.</note>
        <p>There are basically two options that can be set as parameters to
          the script: <strong>targets</strong> and <strong>properties</strong>.
        </p>
        <note>The use of -D style properties as parameters to the build is deprecated.
          Use the build and blocks properties files instead.</note>
        <s3 title="About build targets">
          <p>Targets are the execution units available in
            <link href="http://jakarta.apache.org/ant/">Ant</link> build files.</p>
          <p>Targets are specified by appending them to the script invocation:</p>
          <source>
[unix]  ./build.sh target1 target2 ...
[win32] .\build.bat target1 target2 ...
          </source>
        </s3>
        <s3 title="Cocoon build targets">
          <p>The <strong>build.xml</strong> file comes with some basic
            important targets. If no target is specified, the default one
            is used (defined in build.xml).</p>
          <p>Cocoon targets place work files and results in a build directory
            under the cocoon root. The only exception are the distribution targets
            that build in a directory called dist.</p>
          <p>The key targets you will use most often are noted below. For a listing
            of all available targets, run:</p>
          <source>
[unix]  ./build.sh -projecthelp
[win32] .\build.bat -projecthelp
          </source>

          <s4 title="build clean">
            <p>Cleans the build directory. It is recommended to clean Cocoon
              build directory every time you upgrade Cocoon, or add/remove
              libraries from the <code>./lib/optional/</code>
              directory, or change JDK version.
            </p>
          </s4>

          <s4 title="build webapp [default]">
            <p>Builds a Cocoon web application in build/webapp. This is the default target, so
              running the build script with no arguments calls this target.
            </p>
            <note>For quick testing, a stripped down version of Jetty is included in the
              distribution. After a <code>build webapp</code> Jetty can be launched by
              <code>cocoon servlet</code> and Cocoon will be available at http://localhost:8888/.
            </note>
          </s4>

          <s4 title="build war">
            <p>Builds a Cocoon web application in build/webapp and packages it as a .war file.</p>
          </s4>

        </s3>
      </s2>
    </s1>

    <s1 title="Installing Cocoon">
      <p>In most servlet engines, this is just a matter of copying
        the war file or webapp directory to a specific directory and the
        engine will take care of installing it when restarted.</p>

      <note>If you are using JDK 1.4, be sure you have read and followed the
	      "Java 1.4 configuration" information above.</note>
      <p>If those simple instructions do not work as expected, you may find
	      help in some of the container-specific notes below contributed by
	      users:
      </p>
      <s2 title="Installing on Tomcat 3.3.X">
        <p>This is a very easy installation.</p>
        <ol>
          <li>
            Build the Cocoon webapp as described above.
          </li>
          <li>
            Copy <code>cocoon/build/cocoon/cocoon.war</code>
            into <code>tomcat/webapps</code> directory.
          </li>
          <li>
            Start Tomcat: Go to the <code>tomcat/bin</code> directory,
            and run the startup script.
          </li>
          <li>
            Open the Cocoon welcome page:
            <code>http://localhost:8080/cocoon/</code>
          </li>
          <li>
            Congratulations! You should see the Cocoon welcome page.
          </li>
        </ol>
      </s2>

      <s2 title="Installing on Tomcat 3.2.X">
        <note>Cocoon requires Tomcat version 3.2 or greater. It wouldn't work
        with Tomcat 3.1.X</note>
        <p>Tomcat currently uses a different version of the XML parser
          than Cocoon. To get Cocoon to work, you need to perform the
          following steps:</p>
        <ol>
          <li>
            <strong>Stop Tomcat</strong>
            Go to the tomcat/bin directory, and run the shutdown script.
          </li>
          <li>
            <strong>Delete tomcat/lib/jaxp.jar</strong>
            Tomcat's jaxp.jar is 'sealed', and since xerces contains its
            own implementation of the JAXP standard extension, Java
            will fail to load xerces and report a 'Package Sealing Violation'
            if both are in the classpath.
          </li>
          <li>
            <strong>Rename tomcat/lib/parser.jar to tomcat/lib/zparser.jar</strong>
            Tomcat's parser.jar contains older versions of some the same
            XML APIS that Xerces uses, and these will prevent Xerces from
            functioning properly if they appear before Xerces in the classpath.
            Since Tomcat's startup scripts automatically load all the jar files
            in tomcat/lib in name order, changing the name of the file causes it
            to be loaded last in the classpath.
          </li>
          <li>
            <strong>Copy the cocoon/lib/core/xerces-XXX.jar and cocoon/lib/core/xml-apis.jar
            JAR files to tomcat/lib</strong>
            Cocoon will now be able to see and use the correct XML libraries.
          </li>
          <li>
            <strong>Copy cocoon/build/cocoon/cocoon.war into tomcat/webapps</strong>
          </li>
          <li>
            <strong>Start Tomcat</strong>
            Go to the tomcat/bin directory, and run the startup script.
          </li>
          <li>
            <strong>Start using Cocoon</strong>
            Access the URI <code>http://localhost:8080/cocoon/</code>
            with your favorite browser and start to enjoy the world of Cocoon.
          </li>
        </ol>
      </s2>

      <s2 title="Installing on Tomcat 4.0 - 4.0.1, 4.0.4b1">
        <p>Tomcat 4 is a really straight-forward installation.</p>
        <ol>
          <li>
            Build the Cocoon webapp as described above.
          </li>
          <li>
            Copy <code>cocoon/build/cocoon/cocoon.war</code> into
            <code>tomcat/webapps</code> directory.
          </li>
          <li>
            Start Tomcat: Go to the <code>tomcat/bin</code> directory,
            and run the startup script.
          </li>
          <li>
            Open the Cocoon welcome page:
            <code>http://localhost:8080/cocoon/</code>
          </li>
          <li>
            Congratulations! You should see the Cocoon welcome page.
          </li>
        </ol>
      </s2>

      <s2 title="Installing on Tomcat 4.0.3">
        <p>If you have to use Tomcat 4.0.3, you have to replace its
          XML parser with the one shipped with Cocoon.</p>
        <ol>
          <li>Remove <code>tomcat/common/lib/xerces.jar</code> file.</li>
          <li>Copy following libraries from the <code>cocoon/lib/core</code>
            directory to the tomcat/common/lib directory:
            <ul>
              <li>xalan-XXX.jar</li>
              <li>xercesImpl-XXX.jar</li>
              <li>xml-apis.jar</li>
            </ul>
          </li>
          <li>Copy <code>cocoon/lib/optional/batik-all-XXX.jar</code>
            to the tomcat/common/lib directory.</li>
          <li>Edit <code>extra-classpath</code> parameter in the
            <code>cocoon/src/webapp/WEB-INF/web.xml</code> file:
          </li>
        </ol>
        <p>For UNIX:</p>
        <source><![CDATA[
<init-param>
  <param-name>extra-classpath</param-name>
  <param-value>/tomcat/common/lib/xalan-XXX.jar:
/tomcat/common/lib/xercesImpl-XXX.jar:
/tomcat/common/lib/xml-apis.jar:
/tomcat/common/lib/batik-all-XXX.jar</param-value>
</init-param>
]]></source>
        <p>For Windows:</p>
        <source><![CDATA[
<init-param>
  <param-name>extra-classpath</param-name>
  <param-value>C:\tomcat\common\lib\xalan-XXX.jar;
C:\tomcat\common\lib\xercesImpl-XXX.jar;
C:\tomcat\common\lib\xml-apis.jar;
C:\tomcat\common\lib\batik-all-XXX.jar</param-value>
</init-param>
]]></source>
        <note>param-value should be in one line!
        Also, replace <code>/tomcat/</code> (UNIX), <code>C:\tomcat\</code>
        (Windows) with the path to your Tomcat installation home.</note>
        <ol>
          <li>
            Clean Cocoon build directory: <code>build clean</code>
          </li>
          <li>
            Build Cocoon webapp: <code>build webapp</code>
          </li>
          <li>
            Remove xalan-XXX.jar, xercesImpl-XXX.jar, batik-all-XXX.jar,
            and xml-apis.jar from the cocoon.war archive.
          </li>
          <li>
            Copy <code>cocoon/build/cocoon/cocoon.war</code> into
            <code>tomcat/webapps</code> directory.
          </li>
          <li>
            Start Tomcat: Go to the <code>tomcat/bin</code> directory,
            and run the startup script.
          </li>
          <li>
            Open the Cocoon welcome page:
            <code>http://localhost:8080/cocoon/</code>
          </li>
          <li>
            Congratulations! You should see the Cocoon welcome page.
          </li>
        </ol>
      </s2>

      <s2 title="Installing on Tomcat 4.0.4b1 LE with JDK 1.4.0">
        <p>This combination is also easy to install.</p>
        <ol>
          <li>
            Build the Cocoon webapp as described above.
          </li>
          <li>
            Copy <code>cocoon-2.1/build/cocoon/cocoon.war</code> into
            <code>tomcat/webapps</code> directory.
          </li>
          <li>
            Set environment variable <code>CATALINA_OPTS=-Djava.awt.headless=true</code>
          </li>
          <li>
            Start Tomcat: Go to the <code>tomcat/bin</code> directory,
            and run the startup script.
          </li>
          <li>
            Open the Cocoon welcome page: <code>http://localhost:8080/cocoon/</code>
          </li>
          <li>
            Congratulations! You should see the Cocoon welcome page.
          </li>
        </ol>
        <note>
          Make sure that JAVA_HOME enviroment variable points to the JDK1.4.0.
          If you had JDK1.3.1 or earlier before, <code>build clean</code> before
          all these steps.
        </note>
      </s2>

      <s2 title="Installing on BEA Weblogic 6.0sp2">
        <p>This installs Cocoon using the cocoon.war file.
          This was successfully installed under Windows 2000 and JDK 1.3.1.
          Unix users will need to adjust appropriately. If you haven't done so already,
          build a domain and a server. In this discussion, the name of the domain
          is 'mydomain', the name of the server is 'myserver', and WebLogic installation
          directory is <code>c:\bea\wlserver6.0sp2\</code>. These are the BEA defaults.
        </p>
        <ol>
          <li>
            Build the Cocoon webapp as described above.
          </li>
          <li>
            Copy <code>cocoon\build\cocoon\webapp</code> directory into the
            <code>c:\bea\wlserver6.0sp2\config\mydomain\applications\</code>
            directory of your WebLogic server.
          </li>
          <li>
            Copy the <code>xerces-XXX.jar</code> and <code>xml-apis.jar</code> JAR files from the
            <code>cocoon\lib\core\</code> to the directory of your choice, say <code>c:\bea\</code>.
          </li>
          <li>
            Add to the config.xml of the WebLogic server following snippet:
          </li>
        </ol>
        <source><![CDATA[
<Application Deployed="true" Name="Cocoon"
    Path="./config/mydomain/applications">
  <WebAppComponent Name="cocoon"
                   Targets="myserver"
                   URI="cocoon"/>
</Application>
]]></source>
        <ol>
          <li>
            Edit <code>c:\bea\wlserver6.0sp2\config\mydomain\startWebLogic.cmd</code> file,
            add xerces and xml-apis JAR files to the classpath:
          </li>
        </ol>
        <source>
set CLASSPATH=c:\bea\xerces-XXX.jar;c:\bea\xml-apis.jar
set CLASSPATH=%CLASSPATH%;.;.\lib\weblogic_sp.jar
set CLASSPATH=%CLASSPATH%;.\lib\weblogic.jar
</source>
        <ol>
          <li>
            Start WebLogic server using <code>startWebLogic.cmd</code>.
          </li>
          <li>
            Using a browser, you might want to check WebLogic configuration using console:
            <code>http://localhost:7001/console/</code>.
          </li>
          <li>
            Open the Cocoon welcome page:
            <code>http://localhost:7001/cocoon/</code>
            (Don't forget the final '/' in the link.)
          </li>
          <li>
            Congratulations! You should see the Cocoon welcome page.
          </li>
        </ol>
        <note>Because of some issues with this version of WebLogic, you will
          see lots of exceptions in the WebLogic's console window.
        </note>
      </s2>

      <s2 title="Installing on ServletExec 3.1 (In Process with IIS)">
        <p>This installs Cocoon in a "war" configuration.  This was successfully
         installed under Windows NT 4.0 and IIS 4.  I don't believe that SE is
         available for unix.</p>
        <note>Please note that <em>JDK 1.3</em> is required.</note>
        <ol>
          <li>Install IIS as usual</li>
          <li>Install ServletExec (default paths will be used throughout), but
            don't start it.</li>
          <li>Build Cocoon's war file (include lib's)</li>
          <li>Copy <em>cocoon.war</em> into
            <em>C:\Program Files\New Atlanta\ServletExec ISAPI\webapps\default</em>,
            creating the directory default if required.</li>
          <li>Start IIS.</li>
          <li>Open the Cocoon welcome page (<code>http://localhost/cocoon/</code>)</li>
          <li>
            Congratulations! (hopefully) you should see the Cocoon welcome page.
          </li>
        </ol>
      </s2>
      <s2 title="Installing on JBoss 2.4.4 with Tomcat 4.0.1 (Catalina)">
        <p>
         This section describes the deployment of the Cocoon sample WAR with
         the JBoss-2.4.4_Tomcat-4.0.1 package. It assumes that you built Cocoon as
         described above or downloaded the binary Cocoon distribution. All steps have
         been tested with a fresh JBoss 2.4.4 installation on Linux and Windows 2000.
        </p>
        <note>The JBoss/Tomcat bundle is available from the
          <link href="http://sourceforge.net/projects/jboss/">JBoss project page</link>
        </note>
        <p>
          The JBoss/Tomcat package has the following directory structure
        </p>
        <source>
[path]/JBoss-2.4.4_Tomcat-4.0.1/jboss
[path]/JBoss-2.4.4_Tomcat-4.0.1/catalina
        </source>
        <p>
          Subsequently,
        </p>
        <ul>
          <li>
            <code>jboss</code> denotes the <code>JBoss-2.4.4_Tomcat-4.0.1/jboss</code> directory
          </li>
          <li>
            <code>catalina</code> is short for <code>JBoss-2.4.4_Tomcat-4.0.1/catalina</code>
          </li>
          <li>and <code>cocoon</code> is the base directory of your Cocoon distribution or CVS checkout.</li>
        </ul>

        <p>In order to get Cocoon running you have to install Xerces as default XML parser for JBoss.</p>
        <ul>
          <li>Stop JBoss if it is running.</li>
          <li>Remove the following files from the <code>jboss/lib</code> directory
            <ul>
              <li>crimson.jar</li>
              <li>jaxp.jar</li>
            </ul>
          </li>
          <li>Copy <code>xml-apis.jar</code> from <code>cocoon/lib/core/</code> to <code>jboss/lib</code>
          </li>
          <li>Change <code>jboss/bin/run.sh</code>
          </li>
        </ul>
        <source>
[...]
# Add the XML parser jar and set the JAXP factory names
# Crimson parser JAXP setup(default)
<strong># Change it to Xerces for C2</strong>
JBOSS_CLASSPATH=$JBOSS_CLASSPATH:<strong>../lib/xml-apis.jar</strong>
          <strong># Remove the following two lines</strong>
JAXP=-Djavax.xml.parsers.DocumentBuilderFactory=\
  org.apache.crimson.jaxp.DocumentBuilderFactoryImpl
JAXP="$JAXP -Djavax.xml.parsers.SAXParserFactory=\
  org.apache.crimson.jaxp.SAXParserFactoryImpl"
[...]
        </source>
        <note>Windows users have to change <code>run.bat</code> accordingly.</note>
        <ul>
          <li>Start JBoss with <code>run_with_catalina.sh</code> or <code>run_with_catalina.bat</code></li>
          <li>Copy <code>cocoon/build/cocoon/cocoon.war</code> to <code>jboss/deploy</code></li>
          <li>Check the server log to make sure that <code>J2EE application: [...]/cocoon.war is deployed.</code></li>
          <li>Open the Cocoon welcome page (<code>http://localhost:8080/cocoon/</code>)</li>
          <li>You should see the Cocoon welcome page.</li>
        </ul>
        <note>As both JBoss and Cocoon ship with a Hypersonic database installed,
          these two conflict and you won't be able to use Cocoon database (SQL) samples.
          Then again, you probably use JBoss for EJB persistence anyway, so this shouldn't
          bother you too much ;-)
        </note>
      </s2>

      <s2 title="Installing on JBoss 2.2.2 with Tomcat 3.2.2">
        <p>This section describes the deployment of the Cocoon sample WAR with
          the JBoss 2.2.2/Tomcat-3.2.2 package. It assumes that you built Cocoon as described above.
          All steps have been tested with a fresh JBoss 2.2.2 installation on Linux and Windows ME(sic).</p>
        <note>The JBoss/Tomcat bundle is available from the
          <link href="http://sourceforge.net/projects/jboss/">JBoss project page</link>
        </note>
        <p>The JBoss/Tomcat package has the following directory structure</p>
        <source>
[path]/JBoss-2.2.2_Tomcat-3.2.2/jboss
[path]/JBoss-2.2.2_Tomcat-3.2.2/tomcat
        </source>
        <p>Subsequently,</p>
        <ul>
          <li>
            <code>jboss</code> denotes the <code>JBoss-2.2.2_Tomcat-3.2.2/jboss</code> directory</li>
          <li>
            <code>Tomcat</code> is short for <code>JBoss-2.2.2_Tomcat-3.2.2/tomcat</code>
          </li>
          <li>and <code>cocoon</code> is the base directory of your Cocoon distribution or CVS checkout.</li>
        </ul>
        <p>In order to get Cocoon running you have to install Xerces as default XML parser for JBoss.</p>
        <ul>
          <li>Stop the server if it is running.</li>
          <li>Remove the following files from the <code>jboss/lib</code> directory
            <ul>
              <li>crimson.jar</li>
              <li>jaxp.jar</li>
              <li>xml.jar</li>
            </ul>
          </li>
          <li>Remove the following files from the <code>tomcat/lib</code>
           directory
            <ul>
              <li>jaxp.jar</li>
              <li>parser.jar</li>
            </ul>
          </li>
          <li>Copy <code>xerces-XXX.jar</code> from <code>cocoon/lib/core/</code> to <code>jboss/lib</code>
          </li>
          <li>Change <code>jboss/bin/run.sh</code>
          </li>
        </ul>
        <source>
[...]
# Add the XML parser jars and set the JAXP factory names
# Crimson parser JAXP setup(default)
<strong># Change it to Xerces for C2</strong>
JBOSS_CLASSPATH=$JBOSS_CLASSPATH:<strong>../lib/xerces-XXX.jar</strong>
          <strong># Remove the following two lines</strong>
JAXP=-Djavax.xml.parsers.DocumentBuilderFactory=\
  org.apache.crimson.jaxp.DocumentBuilderFactoryImpl
JAXP="$JAXP -Djavax.xml.parsers.SAXParserFactory=\
  org.apache.crimson.jaxp.SAXParserFactoryImpl"
[...]
        </source>
        <note>Windows users have to change <code>run.bat</code> accordingly.</note>
        <ul>
          <li>Start JBoss with <code>run_with_tomcat.sh</code> or <code>run_with_tomcat.bat</code></li>
          <li>Copy <code>cocoon/build/cocoon/cocoon.war</code> to <code>jboss/deploy</code></li>
          <li>Check the server log to make sure that <code>J2EE application: [...]/cocoon.war is deployed.</code></li>
          <li>Open the Cocoon welcome page (<code>http://localhost:8080/cocoon/</code>)</li>
          <li>Congratulations! (hopefully) you should see the Cocoon welcome page.</li>
        </ul>
        <note>As both JBoss and Cocoon ship with a Hypersonic database installed,
          these two conflict and you won't be able to use Cocoon database (SQL) samples.
          Then again, you probably use JBoss for EJB persistence anyway,
          so this shouldn't bother you too much ;-)
        </note>
      </s2>

      <s2 title="Installing on Resin 2.x">
        <p>
          This section describes the deployment of the Cocoon sample WAR with Resin 2.x.
          It assumes that you built Cocoon as described above. All steps have been tested
          with a fresh Resin 2.0.0, 2.0.4, and 2.1.3 installations (the package is available from
          <link href="http://www.caucho.com/download/">Resin's download page</link>)
        </p>
        <p>After unpacking the Resin package you get the following directory structure</p>
        <source>
[path]...
[path]/resin-2.x/conf
[path]/resin-2.x/lib
[path]/resin-2.x/webapps
[path]...</source>
        <p>To get Cocoon running do the following:</p>
        <ul>
          <li>Stop the server if it is running.</li>
          <li>
            <strong>For 2.0.3 version and older:</strong>
            If yours Resin is older then 2.0.4, you have to install Xerces as
            default XML parser for Resin
            <ul>
              <li>Remove the following files from the <code>resin-2.0.x/lib</code> directory:
                <ul>
                  <li>jaxp.jar</li>
                  <li>dom.jar</li>
                  <li>sax.jar</li>
                </ul>
              </li>
              <li>Copy <code>xerces-XXX.jar</code> and <code>xml-apis.jar</code>
                JAR file from <code>cocoon-2.1/lib/core/</code> to
                the <code>resin-2.0.x/lib/</code> directory.</li>
            </ul>
          </li>
          <li>
            <strong>For 2.0.4 version and newer:</strong>
            Edit <code>resin-2.x/conf/resin.conf</code>, change value of the
            <code>servlet-classloader-hack</code> element to <code>true</code>
          </li>
          <li>Copy the <code>cocoon-2.1/build/cocoon/cocoon.war</code> WAR file
            to <code>resin-2.x/webapps</code> directory
          </li>
          <li>Start Resin as usual</li>
          <li>Open the Cocoon welcome page (<code>http://localhost:8080/cocoon/</code>)</li>
          <li>Congratulations! (hopefully) you should see the Cocoon welcome page.</li>
        </ul>
        <note> If you want to place Cocoon webapp in a directory different than
          <code>resin-2.x/webapps</code>, you need to edit
          <code>resin-2.x/conf/resin.conf</code> file and add a line somewhere
          in <code><![CDATA[<host>]]></code> tag:
          <code><![CDATA[<web-app id='/cocoon' app-dir='/path/to/webapp/cocoon.war'/>]]></code>
        </note>
      </s2>

      <s2 title="Installing on HP-AS 8.X">
        <p>HP-AS is J2EE application server available from the Hewlett-Packard website.
          <link href="http://www.hpmiddleware.com/download">Download and install HP-AS 8.X</link>
        </p>
        <note>Cocoon cannot be deployed as a .war file in HP-AS. Use the
          following steps to deploy cocoon.war:
        </note>
        <ol>
          <li>Extract the <code>cocoon.war</code> file to some directory, using <code>WinZIP</code>
           or a similar utility to extract the files.</li>
          <li>To run HP-AS, go to
            <strong>
              <code>( Start | Programs | HP Middleware | HP Application Server | System Console).</code>
            </strong>
            <br/>
            The HP-AS Console appears with a Log browser. As the HP-AS kernel
            starts and initializes, messages will appear in the status bar of the
            console. Wait for the message 'Kernel started' to appear in the Log
            browser. The following message should display:<br/>
            <br/>
            <code>[10/16/01 16:03:50][localhost_][S]:Kernel "kernel" started.</code>
            <br/>
            <br/>
          </li>
          <li>To verify that an instance of HP-AS is running,
            open a web browser and go to <code>http://localhost:9090/helloservlet/hello</code>
            <br/>
            An HTML page should appear containing the following message:
            <br/>
            <br/>
            <code>Congratulations!</code>
            <br/>
            <code>Congratulations from the HelloWorldServlet</code>
            <br/>
            <code>It appears you have the server running</code>
            <br/>
            <code>My servlet path is /hello</code>
            <br/>
            <br/>
            <strong>
              <code>This test is valid only if you've performed a full install of HP-AS</code>
            </strong>
            <br/>
            <br/>
          </li>
          <li>In the HP-AS console, select <strong>View | Deployment Window</strong>.
            In the <strong>Available Files</strong> pane on the right,
            browse to the the directory you extracted the <code>cocoon.war</code> file to.
            <br/>
            Expand this directory, and then drag and drop the
            <code>cocoon</code> sub-directory node to the <strong>kernel.j2ee-partition</strong> icon
            in the left pane.
          </li>
          <li>When prompted, answer <strong>Yes</strong> to the deployment question.<br/>
            This should create an appropriate entry in the HP-AS j2ee partition configuration file.<br/>
            <strong>
              <code>In the current version of the console, there is no
                indication that the operation succeeded. If you see a parser
                error in the Log browser, ignore it.
              </code>
            </strong>
          </li>
          <li>To test the deployment, open a web browser and go to the following URL:<br/>
            <br/>
            <code>http://localhost:9090/cocoon/welcome</code>
            <br/>
            <br/>
            Congratulations! (hopefully) you should see the Cocoon welcome page.
            (this request may take some time).
            <br/>
          </li>
        </ol>
      </s2>

      <s2 title="Installing on JRun 3.1">
        <p>
          This section describes the deployment of the Cocoon sample WAR with JRun 3.1,
          on its default server. It assumes that you built Cocoon as described above. All
          steps have been tested under Win2000.
        </p>
        <p>To get Cocoon running do the following:</p>
        <ul>
          <li>Stop the default and admin servers if they are running.</li>
          <li>Remove <code>jaxp.jar</code> and <code>parser.jar</code>
            files (Crimson XML parser) from the <code>jrun/lib/ext/</code> directory.
          </li>
          <li>Install Xerces as default XML parser for JRun by copying
            <code>xerces-XXX.jar</code> and <code>xml-apis.jar</code> JAR
            files from the <code>cocoon-2.1/lib/core/</code> to <code>jrun/lib/ext/</code>
            directory.
          </li>
          <li>Update Rhino shipped with JRun with newer version from the Cocoon by
            overwriting <code>jrun/lib/rhino.jar</code> JAR file
            with the <code>cocoon-2.1/lib/optional/rhino-1.5r3.jar</code> file.
          </li>
          <li>Start JRun admin server.</li>
          <li>Start JRun default server.</li>
          <li>Open JRun admin page:
            <code>http://localhost:8000/</code>
          </li>
          <li>Deploy cocoon.war webapp using console. Use same values for
            application name and URI prefix (e.g., application name "cocoon",
            URI "/cocoon").</li>
          <li>Open the Cocoon welcome page:
            <code>http://localhost:8100/cocoon/</code>
          </li>
          <li>Congratulations! (hopefully) you should see the Cocoon welcome page.</li>
        </ul>
        <note>Instead of deploying WAR file using console, same could be done by copying
          <code>cocoon-2.1/build/cocoon/webapp</code> under <code>jrun/servers/default/</code>
          directory and adding following lines to the <code>jrun/servers/default/local.properties</code>:
        </note>

        <source>
cocoon.rootdir=/absolute/path/to/jrun/servers/default/cocoon
cocoon.class={webapp.service-class}
webapp.mapping./cocoon=cocoon
        </source>
      </s2>

      <s2 title="Installing on iPlanet Web Server 4.x and other engines without context management">
        <p>
          iPlanet Web Server 4.x provides the servlet 2.2 API (<code>javax.servlet.*</code> classes),
          but the servlet engine doesn't handle servlet contexts. This means there is no classloader
          built with the contents of <code>WEB-INF/classes</code> and <code>WEB-INF/lib</code> and that
          resolution of context resources (using <code>ServletContext.getResource()</code>) doesn't give
          the expected results.
        </p>
        <p>
          To be able to run on such non-compliant engines, Cocoon provides a bootstrap servlet in
          <code>org.apache.cocoon.BootstrapServlet</code>that handles all the servlet context related
          behaviours needed for proper functioning.
        </p>
        <p>
          To use this bootstrap servlet, configure your servlet engine as follows (how to do it depends
          on the actual engine - see below for iPlanet) :
        </p>
        <ul>
          <li>add cocoon.jar (and only this one) in the engine's classpath,</li>
          <li>declare the <code>org.apache.cocoon.servlet.BootstrapServlet</code> servlet,</li>
          <li>add a "<code>context-directory</code>" parameter, whose value is the absolute path to Cocoon's
              context (e.g. "<code>/path/webapp/cocoon</code>"),</li>
          <li>add any other cocoon parameters you want to this servlet (see <code>web.xml</code> for a
              description of available parameters),</li>
          <li>configure a path translation from "/" to the servlet.</li>
        </ul>
        <p>For iPlanet Web Server 4.x, this translates to :</p>
        <ul>
          <li>connect to the administration server of your web server,</li>
          <li>in the "Servlet" tabs, select "Configure servlet attributes", and enter the following :
            <ul>
              <li>Servlet Name : <code>cocoon</code></li>
              <li>Servlet Code (class name) : <code>org.apache.cocoon.servlet.BootstrapServlet</code></li>
              <li>Servlet Classpath : <code>/path/webapp/cocoon/WEB-INF/lib/cocoon.jar</code></li>
              <li>Servlet Args : <code>context-directory=/path/webapp/cocoon</code>
                (and any other Cocoon parameters you want)</li>
            </ul>
          </li>
          <li>select "Configure Servlet Virtual Path Translation" and enter the following :
            <ul>
              <li>Virtual Path : <code>@/.*</code></li>
              <li>Servlet Name : <code>cocoon</code></li>
            </ul>
          </li>
          <li>save and apply your changes, and enjoy the latest Cocoon on an old-fashioned servlet engine!</li>
        </ul>
      </s2>

      <s2 title="Installing on WebSphere 4.0">
        <p>
          This section describes the deployment of the Cocoon sample WAR with WebSphere 4.0,
          on its default server. It assumes that you built Cocoon as described above. All
          steps have been tested under Win2000 and WebSphere AEs 4.0.1 a0136.02.
        </p>
        <p>To get Cocoon running do the following:</p>
        <ul>
          <li>Start the server using <code>startServer</code> startup script.</li>
          <li>Open admin page:
            <code>http://localhost:9090/admin/</code>
          </li>
          <li>Deploy cocoon.war webapp using console.</li>
          <li>Save server configuration file.</li>
          <li>Restart the server using <code>stopServer</code> and 
            <code>startServer</code> scripts.</li>
          <li>Open the Cocoon welcome page:
            <code>http://localhost:9080/cocoon/</code>
          </li>
          <li>Congratulations! (hopefully) you should see the Cocoon welcome page.</li>
        </ul>
        <note>WebSphere power users might deploy Cocoon by exploding cocoon.war into
          <code>installedApps</code> directory and editing
          <code>config/server-cfg.xml</code> file.
        </note>
      </s2>
    </s1>
  </body>
</document>

<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 1999-2004 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.0//EN" "document-v10.dtd">

<document>
  <header>
    <title>XML:DB Generator</title>
    <version>0.1</version>
    <type>Technical document</type>
    <authors>
      <person name="Gianugo Rabellino" email="gianugo@rabellino.it"/>
     </authors>
     <abstract>This document describes the XML:DB generator of Cocoon.</abstract>
  </header>
  <body>
    <s1 title="Warning!">
      <p>
        The XML:DB generators are currently unmaintained and going to be 
        deprecated soon. Please use the XML:DB pseudo-protocol instead.
      </p>  
    </s1>
    <s1 title="XML:DB Generator">
      <p>
         Generates XML documents out of an XML:DB compliant database. XML:DB
         is a generic API developed by the XML:DB group in order to allow access
         via a consistent API to the upcoming XML databases such as dbXML,
         Ozone and eXist (as of now only the first one has an almost compliant
         API implementation).
         For the sake of this document, an XML:DB compliant database can be 
         seen as a filesystem where directories are called "collections" and 
         files are called "resources".
      </p>
      <ul>
        <li>Name: xmldb</li>
        <li>Class: org.apache.cocoon.generation.XMLDBGenerator</li>
        <li>Cacheable: no</li>
      </ul>
      <p>
         The generator needs to be configured in a "JDBCish" way: a driver 
         (a class name) must be provided, together with a "base" URI. An example
         configuration, based on the stock dbXML implementation, will look like 
         this:
      </p>
<source><![CDATA[
<map:generator name="xmldb"
               src="org.apache.cocoon.generation.XMLDBGenerator"
               label="content">
  <driver>org.dbxml.client.xmldb.DatabaseImpl</driver>
  <base>xmldb:dbxml:///db/</base>
</map:generator>
]]></source>
      <p>
         Note that the content of the "base" tag will be prepended to the 
         requested resource. It's important to keep a trailing slash at the
         end of the <code>base</code> tag.
      </p>
    </s1>
  </body>
</document>

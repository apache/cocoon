<?xml version="1.0"?>
<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<document>
 <header>
  <title>Cocoon Installation Case</title>
  <authors>
   <person name="Mark Evans" email="mark.evans@dsto.defence.gov.au"/>
  </authors>
 </header>

 <body>

  <s1 title="Introduction - Cocoon Installation Case (Windows 2000)">
   <p>
    I have successfully been able to get <strong>Cocoon V1.7.4</strong> to work with the following combination
    of software :
   </p> 
 
   <ul>
    <li><strong>Jakarta-Tomcat V3.1</strong></li>
    <li><strong>Apache Web Server V1.3.12</strong></li>
    <li><strong>Sun Java SDK SE V1.3</strong></li>
    <li><strong>Windows 2000 Professional</strong></li>
    <li><strong>Microsoft Internet Explorer V5.50.4134.0600</strong></li>
   </ul>
  
   <p> 
    This information could be added to the <strong>Working Systems</strong> table within the
    Cocoon installation document at <code>http://xml.apache.org/cocoon/install.html</code>.
   </p>  
 
   <p>
    What follows is some step by step info on how I got it all working. I am submitting this
    for two reasons: one, as a reference for me for installations on other machines at a later
    date and two, to provide some help to poor (hardware) engineers like myself who expect install 
    instructions to include <strong>every</strong> step to actually get the product working !!
   </p>
 
   <p>
    Hope this is useful to someone.
   </p>
  </s1> 	 

  <s1 title="How to do it !"> 
   <p>
    I followed the standard Cocoon install instructions but without success. (Most of it is
    there but it could be a bit clearer.)
   </p>
   
   <p>
    I have listed below the <strong>key</strong> steps that actually got the combination shown 
    above to work.
   </p>

   <p>
    I have included sections on installing Java SDK, Apache and Jakarta-Tomcat to avoid
    any possible ambiguity. So, there may be more detail than is actually required - but
    why not - as long as it all works in the end !
   </p>
 
   <p>
    The relevant sections of the modified files mentioned have been partially listed. 
   </p>
 
   <p>
    The steps listed below mention my own machine name and my own specific paths. Substitute
    your own naturally. I thought it was better to leave them in to avoid the "path to your..."
    directives which can sometimes be ambiguous when it comes to how paths are specified within
    the Windows environment i.e forward ("/") and backward slashes ("\") etc ..
   </p>
 
   <note>
    Warning : This is long and verbose ! The steps and file listings should be read in the order given i.e top
    down to bottom.
   </note>
 
   <note>
    Before I started this setup on my machine, I did not have any pre-existing
    Java SDK, Apache Web Server, Jakarta-Tomcat, Cocoon,  or even anything in the
    <code>CLASSPATH </code> env variable. It was a completely new install on a fresh Windows
    2000 Professional machine. 
   </note>
 
   <p>
    OK lets go....
   </p>
  </s1>
   
 
  <s1 title="Java SDK SE V1.3">
   <ul>
    <li>Install Sun Java SDK SE V1.3 via the standard install procedure i.e execute the <code>.exe</code> file.</li>
  
    <li>I chose to install at path <code>C:\Program_Files\jdk1.3</code> - Note the underscore in <code>Program_Files</code>.</li>
  
    <li>No worries !</li>
   </ul>
  </s1>
 
  <s1 title="Apache V1.3.12 HTTP Server">
   <ul>
    <li>Install Apache V1.3.12 via the standard install procedure i.e execute the <code>.exe</code> file.</li>
  
    <li>I chose to install at path <code>C:\Program_Files\Apache Group</code></li>
  
    <li>Modify the <code>C:\Program_Files\Apache Group\Apache\conf\httpd.conf</code> file to
        include your machine DNS name. See code segment below.</li>

   <li><strong>Note:</strong> Your system may already have a number of <code>http</code> servers running. This
       is OK as long as there isn't a port clash. Ensure other httpd servers are <strong>not</strong>
       also using port <code>80</code>.</li>    
  
    <li>Run the <strong>Install Apache as a Service</strong> program from the <strong>Apache Web Server</strong> menu of the
        Windows 2000 Start Menu.</li>
  
    <li>Ensure Apache is actually running by opening up the Windows 2000 <strong>Control panel</strong>,
        double-left-clicking on <strong>Administrative Tools</strong> and through the <strong>Services</strong> program,
        highlight the <strong>Apache</strong> service and menu select <code>Action|Start</code> i.e start Apache.</li>
  
    <li>Try and access <code>http://shaggy.blimp.au</code>. You should get the
        standard <strong>"If you can see this, it means that the installation of the Apache
        web server software on this system was successful"</strong> page.</li>
  
    <li>No worries!</li>
   </ul>
     
   <p><code>C:\Program_Files\Apache Group\Apache\conf\httpd.conf</code></p>

    <source><![CDATA[
     ....................
     #
     # ServerName allows you to set a host name which is sent back to clients for
     # your server if it's different than the one the program would get (i.e., use
     # "www" instead of the host's real name).
     #
     # Note: You cannot just invent host names and hope they work. The name you 
     # define here must be a valid DNS name for your host. If you don't understand
     # this, ask your network administrator.
     # If your host doesn't have a registered DNS name, enter its IP address here.
     # You will have to access it by its address (e.g., http://123.45.67.89/)
     # anyway, and this will make redirections work in a sensible way.
     #
     ServerName shaggy.blimp.au
     ....................
     #
     # Port: The port to which the standalone server listens. For
     # ports < 1023, you will need httpd to be run as root initially.
     #
     Port 80
     ....................
     ]]></source>
      
  </s1>

  <s1 title="Jakarta-Tomcat V3.1">
   <ul> 
    <li>Install Jakarta-Tomcat via the standard install procedure.</li>

    <li>I chose to install (i.e unpack the zip) at path <code>C:\Program_Files\jakarta-tomcat</code> - Note
        the underscore in <code>Program_Files</code>.</li>

    <li>Go back to the Apache web site and grab the <code>ApacheModuleJServ.dll</code> file within the 
        <code>http://jakarta.apache.org/builds/tomcat/release/v3.1/bin/win32/i386/</code> directory.</li>

    <li>Copy this file into the <code>C:\Program_Files\Apache Group\Apache\modules</code> directory.</li>

    <li>Modify the Apache <code>httpd.conf</code> file to add the line "<code>include C:/Program_Files/jakarta-tomcat/conf/tomcat-apache.conf</code>"
        to the end of <code>httpd.conf</code>. See code segment below. Note the forward "<code>/</code>" slashes in the path name. Note that the 
	<code>tomcat-apache</code> file is automatically created when Jakarta-Tomcat starts.</li>
  
    <li>Modify <code>C:\Program_Files\jakarta-tomcat\bin\tomcat.bat</code> to add env variables <code>TOMCAT_HOME</code> 
        and <code>JAVA_HOME</code>. See code segment below.</li>

    <li>Open up the Windows 2000 <strong>Control Panel</strong>, double-left-click <strong>Administrative Tools</strong>
        and execute the <strong>Services</strong> program.</li>
	
    <li>Kill Apache - highlight the <strong>Apache</strong> service and menu select <code>Action|Stop</code> i.e stop Apache.</li> 
        
    <li>Now open up a Windows 2000 <strong>Command Prompt</strong> and cd to directory - <code>C:\Program_Files\jakarta-tomcat\bin</code></li>

    <li>Type <code>tomcat start</code>. Jakarta-Tomcat should start up in another Command Prompt window.</li>

    <li>Go back to the Windows 2000 <strong>Services</strong> program and start the <strong>Apache</strong> service i.e <code>Action|Start</code>.</li>

    <li>Start Internet Explorer.</li>

    <li>Try and access the Jakarta-Tomcat <em>JSP</em> test page <code>http://shaggy.blimp.au:8080/examples/jsp/</code>
        - Note the <code>8080</code> port in the address.</li>

    <li>Click on any of the JSP examples to test.</li>

    <li>Try and access the Jakarta-Tomcat <em>Servlet</em> test page <code>http://shaggy.blimp.au:8080/examples/servlets/</code>
        - Note the <code>8080</code> port in the address.</li>

    <li>Click on any of the servlet examples to test.</li>

    <li>Note: You <strong>don't</strong> have to copy the Jakarta-Tomcat <code>C:\Program_Files\jakarta-tomcat\webapps\examples</code> directory to the
        Apache <code>C:\Program_Files\Apache Group\Apache\htdocs</code> directory. Due to the <code>8080</code> port in the
        web addresses shown above, the files in directory <code>C:\Program_Files\jakarta-tomcat\webapps\examples</code>
        are actually referenced automatically by Jakarta-Tomcat.</li>

    <li>No worries !</li>
   </ul>

   <p><code>C:\Program_Files\Apache Group\Apache\conf\httpd.conf</code></p>
   
    <source><![CDATA[
     ...........
     #
     # VirtualHost example:
     # Almost any Apache directive may go into a VirtualHost container.
     #
     #<VirtualHost ip.address.of.host.some_domain.com>
     #    ServerAdmin webmaster@host.some_domain.com
     #    DocumentRoot /www/docs/host.some_domain.com
     #    ServerName host.some_domain.com
     #    ErrorLog logs/host.some_domain.com-error_log
     #    CustomLog logs/host.some_domain.com-access_log common
     #</VirtualHost>
     
     #<VirtualHost _default_:*>
     #</VirtualHost>
     
     include C:/Program_Files/jakarta-tomcat/conf/tomcat-apache.conf
     ]]></source>
   
   <p><code>C:\Program_Files\jakarta-tomcat\bin\tomcat.bat</code></p>

    <source><![CDATA[
     @echo off
     rem A batch file to start/stop tomcat server.

     rem This batch file written and tested under Windows NT
     rem Improvements to this file are welcome

     rem Guess TOMCAT_HOME if it is not present

     set TOMCAT_HOME=C:\Program_Files\jakarta-tomcat

     set JAVA_HOME=C:\Program_Files\jdk1.3

     .........
    ]]></source>
   
  </s1>

  <s1 title="Cocoon V1.7.4">
   <ul>
    <li>Install Cocoon via the standard install procedure.</li>

    <li>I chose to install (i.e unpack the zip) at path <code>C:\Program_Files\cocoon-1.7.4</code> - Note
        the underscore in <code>Program_Files.</code><em>(Actually the important files in the Cocoon
	distribution all end up being copied into the working Jakarta-Tomcat directories, so the unzipped
	Cocoon can be either deleted or left where it is after the files have been copied.)</em></li>
        
    <li>Copy the <code>xerces_1_0_3.jar</code>, <code>xalan_1_0_1.jar</code>, 
        <code>fop_0_12_1.jar</code> and <code>servlet_2_2.jar</code>
        files, found in the <code>C:\Program_Files\cocoon-1.7.4\lib</code> to the 
        <code>C:\Program_Files\jakarta-tomcat\lib</code> directory.

    <strong>NOTE:</strong> For Cocoon 1.8 and above, some of the version numbers have changed, 
     <strong>and turbine-pool.jar is now also required.</strong></li>
        
    <li>Copy the <code>C:\Program_Files\cocoon-1.7.4\bin\cocoon.jar</code> file to the
        <code>C:\Program_Files\jakarta-tomcat\lib</code> directory.</li>
        
    <li>Modify <code>C:\Program_Files\jakarta-tomcat\bin\tomcat.bat</code> to add the five Cocoon <code>.jar</code>
        files to the Jakarta-Tomcat <code>CLASSPATH</code> env variable. See code segment below.</li>
        
    <li>Note the "<code>remed</code>" out <code>set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\servlet.jar</code> line.</li>
        
    <li>Modify the <code>C:\Program_Files\jakarta-tomcat\conf\web.xml</code> file to add the Cocoon
        specific configuration directives. See code segment below.</li>
        
    <li>And now for the <strong>really really</strong> important step, copy the
        <code>C:\Program_Files\cocoon-1.7.4\conf\cocoon.properties</code> file to the
        <code>C:\Program_Files\jakarta-tomcat\webapps\ROOT</code> directory.</li>
        
    <li>Now, if everything has been performed as specified above and if the gods
        are smiling on you today, then (and you'll hate me if it doesn't) it should
        all work now.</li>
        
    <li>OK. To test it all, do the following :</li>
        
    <li>If Jakarta-Tomcat is still running, then kill it by typing <code>tomcat stop</code> in a
        Windows 2000 <strong>Command Prompt</strong> window which has been cded to <code>C:\Program_Files\jakarta-tomcat\bin</code>.</li>
        
    <li>If Apache is still running, then kill it by menu selecting <code>Action|Stop</code> 
        through the Windows 2000 <strong>Services</strong> program.</li>
        
    <li>Now, start up Jakarta-Tomcat as detailed in the <strong>Jakarta-Tomcat V3.1</strong> section shown above.</li>
        
    <li>Now, start up Apache as detailed in the <strong>Apache V1.3.12 HTTP Server</strong> section shown above.</li>
        
    <li>Start Internet Explorer.</li>
        
    <li>The big test - try and access <code>http://shaggy.blimp.au:8080/Cocoon.xml</code> - You
        should see the Cocoon V1.7.4 status page containing all of the internal configuration
        information and settings specific to Cocoon. Note the <code>8080</code> port number.</li>
        
    <li>Note the uppercase "<code>C</code>" in <code>Cocoon.xml</code>. Also, you won't find this file on the
        hard disk, it is an internal page and its name is set in the <code>cocoon.properties</code>
        file.</li>
        
    <li>OK, if the internal Cocoon status page is working then you can try and access the
        Cocoon examples as follows :</li>
 
    <li>Copy the <code>C:\Program_Files\cocoon-1.7.4\samples</code> directory to the
        <code>C:\Program_Files\jakarta-tomcat\webapps</code> directory.</li>
        
    <li>Copy the <code>cocoon.properties</code> file to the new <code>C:\Program_Files\jakarta-tomcat\webapps\samples</code>
        directory - again this is a <strong>really</strong> important step.</li>
 
    <li>Kill Jakarta-Tomcat.</li>
        
    <li>Kill Apache.</li>
        
    <li>Restart Jakarta-Tomcat.</li>
        
    <li>Restart Apache.</li>
        
    <li>Try and access <code>http://shaggy.blimp.au:8080/samples/index.xml</code>. Note the <code>8080</code> port number.</li>
        
    <li>You should see the Cocoon samples page.</li>
        
    <li>Thats it.</li>
        
    <li>Again, note that no files were copied into the <code>C:\Program_Files\Apache Group\Apache\htdocs</code>
        directory. The Cocoon samples are found via Jakarta-Tomcat and port <code>8080</code>.</li>
	
    <li>One last thing to try. Create a directory called <code>C:\Program_Files\jakarta-tomcat\webapps\gogo</code>.</li>
        
    <li>Copy the Cocoon <code>hello-page.xml</code> and <code>hello-page-html.xsl</code> files found in the  
       <code>C:\Program_Files\cocoon-1.7.4\samples\hello</code> directory into the new <code>gogo</code> directory.</li>
        
    <li>And again the <strong>really</strong> important step, copy the <code>cocoon.properties</code> file into the
        new <code>gogo</code> directory.</li>

    <li>Kill Jakarta-Tomcat.</li>
        
    <li>Kill Apache.</li>
        
    <li>Restart Jakarta-Tomcat.</li>
        
    <li>Restart Apache.</li>
        
    <li>Start Internet Explorer.</li>
        
    <li>Try and access <code>http://shaggy.blimp.au:8080/gogo/hello.xml</code>.</li>
        
    <li>You should see the Hello Page.</li>
        
    <li>The purpose of the last few steps was to show how a new auto context can be
        setup in the Jakarta-Tomcat <code>webapps</code> directory.
        As I see it, put your own custom XML/XSL files in a directory that lives within the Jakarta-Tomcat
        <code>webapps</code> directory. Make sure <code>cocoon.properites</code> is also in there.</li>
        
    <li>You could also put your custom XML/XSL work into just the Jakarta-Tomcat <code>webapps/ROOT</code> directory and
        as long as <code>cocoon.properties</code> is also in there (which it should be or else you won't be able
        to see the internal <code>Cocoon.xml</code> status page) then it should all work from that <code>ROOT</code> directory.</li>
        
    <li>In order to avoid Jakarta-Tomcat having to serve up everything on port <code>8080</code>, the  
	<code>C:\Program_Files\jakarta-tomcat\conf\tomcat-apache.conf</code> file can be modified by adding 
	the lines "<code>AddType text/xml .xml</code>" and "<code>AddHandler jserv-servlet .xml</code>". (Refer to the start of the listing for
	<code>C:\Program_Files\jakarta-tomcat\conf\tomcat-apache-cocoon.conf</code> below to see where the line should be.)</li>
 
    <li>After starting/stopping Jakarta-Tomcat and Apache in the same manner as described above you should now
        be able to access XML files without specifying port <code>8080</code>. e.g <code>http://shaggy.blimp.au/samples/index.xml</code>.
	<strong>Note :</strong> If your browser cannot find the file then make sure your <code>C:\Program_Files\jakarta-tomcat\conf\server.xml</code>
	file has alias directives for the <code>samples</code> directory or follow the procedure in the next few steps.</li>	

    <li><strong>Note :</strong> You must be careful when making modifications to <code>C:\Program_Files\jakarta-tomcat\conf\tomcat-apache.conf</code>
        because this file is automatically generated each time Jakarta-Tomcat starts and will therefore overwrite any
	modifications you have made. To complicate matters, the contents of <code>C:\Program_Files\jakarta-tomcat\conf\server.xml</code>,
	where you might specify some context "AutoSetup actions", determines some of the content of
	<code>C:\Program_Files\jakarta-tomcat\conf\tomcat-apache.conf</code>, so simply making a once off copy of
	<code>C:\Program_Files\jakarta-tomcat\conf\tomcat-apache.conf</code> and adding the "<code>AddHandler jserv-servlet .xml</code>"
	line and referencing the copied <code>.conf</code> file with the <code>include</code> statement in
	<code>C:\Program_Files\Apache Group\Apache\conf\httpd.conf</code> may also lead to problems.</li>

    <li>My solution was to eliminate all context AutoSetup actions in <code>C:\Program_Files\jakarta-tomcat\conf\server.xml</code>, then copy 
	a freshly generated version of <code>C:\Program_Files\jakarta-tomcat\conf\tomcat-apache.conf</code> to <code>C:\Program_Files\jakarta-tomcat\conf\tomcat-apache-cocoon.conf</code>, then
	add the line "<code>AddHandler jserv-servlet .xml</code>" to <code>C:\Program_Files\jakarta-tomcat\conf\tomcat-apache-cocoon.conf</code>, then
	modify the include statement in <code>C:\Program_Files\Apache Group\Apache\conf\httpd.conf</code> to read
	"<code>include C:/Program_Files/jakarta-tomcat/conf/tomcat-apache-cocoon.conf</code>". This method places the onus on the webmaster
	to make sure the copied and modified version of <code>C:\Program_Files\jakarta-tomcat\conf\tomcat-apache-cocoon.conf</code> is always
	up to date. See code segment below.</li>
	
    <li>I have listed my simplified <code>C:\Program_Files\jakarta-tomcat\conf\server.xml</code> file. Note the references to my test <code>gogo</code>
        directory in file <code>C:\Program_Files\jakarta-tomcat\conf\tomcat-apache-cocoon.conf</code> which are needed in order to get the
	<code>hello-page.xml</code> example working without using port <code>8080</code> in the address. See code segment below.</li>  	
        
    <li>Well, thats how I got it to work.</li>
        
    <li>Works for me and I hope for you too.</li>
        
    <li>Sorry for all the completely specfied file and directory paths, but it should at least be unambiguous. No worries !</li>

   </ul>


   <p><code>C:\Program_Files\jakarta-tomcat\bin\tomcat.bat</code></p>
   
    <source><![CDATA[
     .................

     set cp=%CLASSPATH%

     set CLASSPATH=.
     set CLASSPATH=%TOMCAT_HOME%\classes
          
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\xerces_1_0_3.jar
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\xalan_1_0_1.jar
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\fop_0_12_1.jar
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\servlet_2_2.jar
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\cocoon.jar
          
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\webserver.jar
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\jasper.jar
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\xml.jar
     rem set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\servlet.jar
     set CLASSPATH=%CLASSPATH%;%JAVA_HOME%\lib\tools.jar

     .................
    ]]></source>
  
   <p><code>C:\Program_Files\jakarta-tomcat\conf\web.xml</code></p>

    <source><![CDATA[
     <?xml version="1.0" encoding="ISO-8859-1"?>
     
     <!DOCTYPE web-app
         PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
         "http://java.sun.com/j2ee/dtds/web-app_2.2.dtd">
     
     <web-app>
         <servlet>
             <servlet-name>
                 default
             </servlet-name>
             <servlet-class>
                 org.apache.tomcat.servlets.DefaultServlet
             </servlet-class>
     	<load-on-startup>
                 -2147483646
     	</load-on-startup>
         </servlet>
         <servlet>
             <servlet-name>
                 invoker
             </servlet-name>
     <!--
                 org.apache.tomcat.servlets.NoInvokerServlet
     -->
             <servlet-class>
                 org.apache.tomcat.servlets.InvokerServlet
             </servlet-class>
         </servlet>
         <servlet>
             <servlet-name>
                 jsp
             </servlet-name>
             <servlet-class>
                 org.apache.jasper.runtime.JspServlet
             </servlet-class>
     
     <!-- uncomment the following to use Jikes for JSP compilation
     
       <init-param>
         <param-name>jspCompilerPlugin</param-name>
         <param-value>org.apache.jasper.compiler.JikesJavaCompiler</param-value>
       </init-param>
     
     -->
     
     	<load-on-startup>
                 -2147483646
     	</load-on-startup>
         </servlet>
         <servlet-mapping>
             <servlet-name>
                 invoker
             </servlet-name>
             <url-pattern>
                 /servlet/*
             </url-pattern>
         </servlet-mapping>
         <servlet-mapping>
             <servlet-name>
                 jsp
             </servlet-name>
             <url-pattern>
                 *.jsp
             </url-pattern>
         </servlet-mapping>
         <session-config>
             <session-timeout>
                 30
             </session-timeout>
         </session-config>
     

<!-- Start Cocoon Section -->

         <servlet>
          <servlet-name>org.apache.cocoon.Cocoon</servlet-name>
          <servlet-class>org.apache.cocoon.Cocoon</servlet-class>
          <init-param>
           <param-name>properties</param-name>
           <param-value>
            cocoon.properties 
           </param-value>
          </init-param>
         </servlet>
         
         
         <servlet-mapping>
          <servlet-name>org.apache.cocoon.Cocoon</servlet-name>
          <url-pattern>*.xml</url-pattern>
         </servlet-mapping>

<!-- End Cocoon Section -->

     
         <mime-mapping>
             <extension>
                 txt
             </extension>
             <mime-type>
                 text/plain
             </mime-type>
         </mime-mapping>
     
     ..........
     
    ]]></source>


   <p><code>C:\Program_Files\jakarta-tomcat\conf\tomcat-apache-cocoon.conf</code></p>

    <source><![CDATA[
     LoadModule jserv_module modules/ApacheModuleJServ.dll
     ApJServManual on
     ApJServDefaultProtocol ajpv12
     ApJServSecretKey DISABLED
     ApJServMountCopy on
     ApJServLogLevel notice
     
     ApJServDefaultPort 8007
     
     AddType text/xml .xml
     AddHandler jserv-servlet .xml
     
     AddType test/jsp .jsp
     AddHandler jserv-servlet .jsp
     
     Alias /examples C:\Program_Files\jakarta-tomcat\webapps\examples
     <Directory "C:\Program_Files\jakarta-tomcat\webapps\examples">
         Options Indexes FollowSymLinks
     </Directory>
     ApJServMount /examples/servlet /examples
     <Location /examples/WEB-INF/ >
         AllowOverride None
         deny from all
     </Location>
     
     Alias /test C:\Program_Files\jakarta-tomcat\webapps\test
     <Directory "C:\Program_Files\jakarta-tomcat\webapps\test">
         Options Indexes FollowSymLinks
     </Directory>
     ApJServMount /test/servlet /test
     <Location /test/WEB-INF/ >
         AllowOverride None
         deny from all
     </Location>
     
     Alias /admin C:\Program_Files\jakarta-tomcat\webapps\admin
     <Directory "C:\Program_Files\jakarta-tomcat\webapps\admin">
         Options Indexes FollowSymLinks
     </Directory>
     ApJServMount /admin/servlet /admin
     <Location /admin/WEB-INF/ >
         AllowOverride None
         deny from all
     </Location>
     
     Alias /samples C:\Program_Files\jakarta-tomcat\webapps\samples
     <Directory "C:\Program_Files\jakarta-tomcat\webapps\samples">
         Options Indexes FollowSymLinks
     </Directory>
     ApJServMount /samples/servlet /samples
     <Location /samples/WEB-INF/ >
         AllowOverride None
         deny from all
     </Location>
     
     Alias /gogo C:\Program_Files\jakarta-tomcat\webapps\gogo
     <Directory "C:\Program_Files\jakarta-tomcat\webapps\gogo">
         Options Indexes FollowSymLinks
     </Directory>
     ApJServMount /gogo/servlet /gogo
     <Location /gogo/WEB-INF/ >
         AllowOverride None
         deny from all
     </Location>
     
     ApJServMount /servlet /ROOT
    ]]></source>

   <p><code>C:\Program_Files\jakarta-tomcat\conf\server.xml</code></p>

    <source><![CDATA[
     <?xml version="1.0" encoding="ISO-8859-1"?>
     
     <Server>
         <!-- Debug low-level events in XmlMapper startup -->
         <xmlmapper:debug level="0" />
     
         <!-- This is quite flexible; we can either have a log file per
              module in Tomcat (example: ContextManager) or we can have
              one for Servlets and one for Jasper, or we can just have
     	 one tomcat.log for both Servlet and Jasper.
     
     	 If you omit "path" there, then stderr should be used.
     
     	 verbosityLevel values can be: 
     	    FATAL
     	    ERROR
     	    WARNING 
                 INFORMATION
                 DEBUG
              -->
     
         <Logger name="tc_log" 
                 path="logs/tomcat.log"
                 customOutput="yes" />
     
         <Logger name="servlet_log" 
                 path="logs/servlet.log"
                 customOutput="yes" />
     
         <Logger name="JASPER_LOG" 
     	    path="logs/jasper.log"
                 verbosityLevel = "INFORMATION" />
     
         <!-- Add "home" attribute if you want tomcat to be based on a 
              different directory
              "home" is used to create work and to read webapps, but not 
              for libs or CLASSPATH.
              Note that TOMCAT_HOME is where tomcat is installed, while 
              ContextManager home is the
              base directory for contexts, webapps/ and work/
           -->
         <ContextManager debug="0" workDir="work" >
             <!-- ContextInterceptor className="org.apache.tomcat.context.LogEvents" / -->
             <ContextInterceptor className="org.apache.tomcat.context.AutoSetup" />
             <ContextInterceptor className="org.apache.tomcat.context.DefaultCMSetter" />
             <ContextInterceptor className="org.apache.tomcat.context.WorkDirInterceptor" />
             <ContextInterceptor className="org.apache.tomcat.context.WebXmlReader" />
             <ContextInterceptor className="org.apache.tomcat.context.LoadOnStartupInterceptor" />
             <!-- Request processing -->
             <RequestInterceptor className="org.apache.tomcat.request.SimpleMapper" 
               debug="0" />
             <RequestInterceptor className="org.apache.tomcat.request.SessionInterceptor" />
             <RequestInterceptor className="org.apache.tomcat.request.SecurityCheck" />
             <RequestInterceptor className="org.apache.tomcat.request.FixHeaders" />
     
             <Connector className="org.apache.tomcat.service.SimpleTcpConnector">
                 <Parameter name="handler" 
                   value="org.apache.tomcat.service.http.HttpConnectionHandler"/>
                 <Parameter name="port" value="8080"/>
             </Connector>
     
             <Connector className="org.apache.tomcat.service.SimpleTcpConnector">
                 <Parameter name="handler" 
                   value="org.apache.tomcat.service.connector.Ajp12ConnectionHandler"/>
                 <Parameter name="port" value="8007"/>
             </Connector>
     
         </ContextManager>
     </Server>
    ]]></source>

   <p><code>C:\Program_Files\Apache Group\Apache\conf\httpd.conf</code></p>
   
    <source><![CDATA[
     ...........
     #
     # VirtualHost example:
     # Almost any Apache directive may go into a VirtualHost container.
     #
     #<VirtualHost ip.address.of.host.some_domain.com>
     #    ServerAdmin webmaster@host.some_domain.com
     #    DocumentRoot /www/docs/host.some_domain.com
     #    ServerName host.some_domain.com
     #    ErrorLog logs/host.some_domain.com-error_log
     #    CustomLog logs/host.some_domain.com-access_log common
     #</VirtualHost>
     
     #<VirtualHost _default_:*>
     #</VirtualHost>
     
     include C:/Program_Files/jakarta-tomcat/conf/tomcat-apache-cocoon.conf
     ]]></source>

  </s1>

  <s1 title="Hints and Tips">
    <p>Being bit of a XML/XSL/JAVA etc novice, here are some hints that I now know but it would have
        made life a lot easier if I knew them before I attempted Cocoon/Jakarta-Tomcat/Apache etc..</p>

   <ul>
    <li>Don't be fooled...use the refresh button on the web browser when fiddling about. The cache is 
        your enemy in the early days !</li>

    <li>Always stop/start Jakarta-Tomcat and Apache if you are adding/deleting files from the Jakarta-Tomcat <code>webapps</code> directory.</li>

    <li>Understanding how Cocoon finds the <code>cocoon.properties</code> file is the key.</li>

    <li>In order to make the starting and stopping of Apache/Jakarta-Tomcat/Cocoon a bit easier on my Windows 2000 Professional machine, I created two 
        Command Prompt shortcuts on my main desktop. One is called "Start Tomcat", the other is called "Stop Tomcat". These two shorcuts
	both call <code>C:\Program_Files\jakarta-tomcat\bin\tomcat.bat</code> but with different arguments i.e for "Start Tomcat" I use 
	<code>%SystemRoot%\system32\cmd.exe /c "c:\program_files\jakarta-tomcat\bin\tomcat start"</code> and for "Stop Tomcat" I use
	<code>%SystemRoot%\system32\cmd.exe /c "c:\program_files\jakarta-tomcat\bin\tomcat stop"</code>. The complete file listing for  
	<code>C:\Program_Files\jakarta-tomcat\bin\tomcat.bat</code> is shown below. I find these two shortcuts quite useful since they start and
	stop the Apache service and Jakarta-Tomcat in the correct order and generally just makes life a little easier.</li> 
   </ul>

   <p>Regards - mark.evans@dsto.defence.gov.au</p>


   <p><code>C:\Program_Files\jakarta-tomcat\bin\tomcat.bat</code></p>

   <note>Indented lines are meant to be part of the previous line. This formatting
    is done for legibility.</note>
   
    <source><![CDATA[

     @echo off
     rem A batch file to start/stop tomcat server.
     
     rem This batch file written and tested under Windows NT
     rem Improvements to this file are welcome
     
     rem Guess TOMCAT_HOME if it is not present
     
     
     set TOMCAT_HOME=c:\program_files\jakarta-tomcat
     
     set JAVA_HOME=c:\program_files\jdk1.3
     
     
     
     if not "%TOMCAT_HOME%" == "" goto gothome
     
     SET TOMCAT_HOME=.
     if exist %TOMCAT_HOME%\bin\tomcat.bat goto gothome
     
     SET TOMCAT_HOME=..
     if exist %TOMCAT_HOME%\bin\tomcat.bat goto gothome
     
     SET TOMCAT_HOME=
     echo Unable to determine the value of TOMCAT_HOME.
     goto eof
     
     :gothome
     
     rem Set up the CLASSPATH that we need
     
     set cp=%CLASSPATH%
     
     rem set CLASSPATH=.
     set CLASSPATH=%TOMCAT_HOME%\classes
     
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\xerces_1_0_3.jar
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\xalan_1_0_1.jar
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\fop_0_12_1.jar
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\servlet_2_2.jar
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\cocoon.jar
     
     
     
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\webserver.jar
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\jasper.jar
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\xml.jar
     rem set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\servlet.jar
     set CLASSPATH=%CLASSPATH%;%JAVA_HOME%\lib\tools.jar
     
     if "%cp%" == "" goto next
     
     rem else
     set CLASSPATH=%CLASSPATH%;%cp%
     
     :next
     if "%1" == "start" goto startServer
     if "%1" == "stop" goto stopServer
     if "%1" == "run" goto runServer
     if "%1" == "env" goto setupEnv
     if "%1" == "ant" goto runAnt
     if "%1" == "jspc" goto runJspc
     
     echo Usage:
     echo tomcat (start^|run^|env^|stop)
     echo         start - start tomcat in a separate window
     echo         run   - start tomcat in the current window
     echo         env   - setup the environment for tomcat
     echo         stop  - stop tomcat
     echo         ant   - run ant with tomcat context
     echo         jspc  - run jsp pre compiler
     goto cleanup
     
     :startServer
     echo __________________________
     echo Stopping Apache Web Server
     echo __________________________
     net stop apache
     rem echo Using classpath: %CLASSPATH%
     echo _______________________________________
     echo Starting JAKARTA-TOMCAT in a new window
     echo _______________________________________
     start "TOMCAT is RUNNING" /min java %TOMCAT_OPTS% 
       -Dtomcat.home="%TOMCAT_HOME%" org.apache.tomcat.startup.Tomcat 
       %2 %3 %4 %5 %6 %7 %8 %9
     echo __________________________
     echo Starting Apache Web Server
     echo __________________________
     net start apache
     goto cleanup
     
     :runServer
     rem Start the Tomcat Server
     echo Using classpath: %CLASSPATH%
     java %TOMCAT_OPTS% -Dtomcat.home="%TOMCAT_HOME%" 
       org.apache.tomcat.startup.Tomcat %2 %3 %4 %5 %6 %7 %8 %9
     goto cleanup
     
     :stopServer
     rem Stop the Tomcat Server
     rem echo Using classpath: %CLASSPATH%
     echo ______________________
     echo Sopping JAKARTA-TOMCAT
     echo ______________________
     java %TOMCAT_OPTS% -Dtomcat.home="%TOMCAT_HOME%" 
       org.apache.tomcat.startup.Tomcat -stop %2 %3 %4 %5 %6 %7 %8 %9
     goto cleanup
     
     :runAnt
     rem Run ant
     set CLASSPATH=%CLASSPATH%;%TOMCAT_HOME%\lib\ant.jar
     echo Using classpath: %CLASSPATH%
     java %ANT_OPTS% -Dant.home="%TOMCAT_HOME%" 
       -Dtomcat.home="%TOMCAT_HOME%" org.apache.tools.ant.Main 
       %2 %3 %4 %5 %6 %7 %8 %9
     goto cleanup
     
     :runJspc
     rem Run ant
     echo Using classpath: %CLASSPATH%
     java %JSPC_OPTS% -Dtomcat.home="%TOMCAT_HOME%" org.apache.jasper.JspC 
       %2 %3 %4 %5 %6 %7 %8 %9
     goto cleanup
     
     :setupEnv
     set cp=%CLASSPATH%
     
     :cleanup
     rem clean up
     
     set CLASSPATH=%cp%
     set port=
     set host=
     set test=
     set jsdkJars=
     set jspJars=
     set beanJars=
     set miscJars=
     set appJars=
     set appClassPath=
     set cp=
     
     rem pause
     :eof
    ]]></source>

  </s1>

 </body>

</document>

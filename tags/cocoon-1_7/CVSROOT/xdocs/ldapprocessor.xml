<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<document>
	<header>
		<title>LDAP Processor</title>
		<authors>
			<person name="James M. Birchfield" email="jmbirchfield@proteus-technologies.com"/>
		</authors>
	</header>
	<body>
		<s1 title="Description">
			<p>LdapProcessor is a processor for Cocoon that performs LDAP queries, translates the resultset into an XML fragment, and inserts the fragment in the original document.The Ldap Processor was written for a project where I work, and carried back over into the Cocoon project.  </p>
		</s1>
		<s1 title="Installation">
			<p>Check your cocoon.properties for this line and add it if it's not already there:</p>
			<source>processor.type.ldap = org.apache.cocoon.processor.ldap.LdapProcessor</source>
		</s1>
		<s1 title="Configuration">
			<p>Add this PI to the XML files to which you wish to add LDAP queries:</p>
			<source>&lt;?cocoon:process type="ldap"?&gt;</source>
			<p>You probably want this before any "xslt" processing directives. Then add LDAP connection information to your XML files. The tagset for LDAP server defitions looks like this:</p>
			<source>&lt;ldap-defs&gt;
 &lt;ldap-server name=foo_server"&gt;
  &lt;initializer&gt;com.sun.jndi.ldap.LdapCtxFactory&lt;/initializer&gt;
  &lt;ldap-serverurl&gt;ldap://ldap.weber.edu&lt;/ldap-serverurl&gt;
 &lt;/ldap-server&gt;
&lt;/ldap-defs&gt;
</source>
			<p>This tagset will be removed from the document after processing.</p>
			<p>In addition to the ldap-server element, you can also have querydefs tags in your ldap-defs node. A ldap-defs node must have a unique name attribute. ldap-query tags (described below) may reference a querydefs tag in their defs attribute, which causes the ldap-query tag's attributes to default to the attributes of the querydefs tag. This is useful for setting commonly used groups of attributes. You may also specify a default querydefs. Here is an example:</p>
			<source>&lt;querydefs name="standard" doc-element="options" 
  row-element="option" server="foo"/&gt;
&lt;query defs="standard"/&gt;</source>
			<p>is equivalent to</p>
			<source>&lt;ldap-query doc-element="options" row-element="option" connection="foo"/&gt;</source>
			<p>You can also flag a querydefs node as the default for all query tags by setting the default attribute to yes. Note that ldap-query tags can always override the defaults.</p>
		</s1>
		<s1 title="Usage">
			<p>Add LDAP queries to your XML files. The tagset looks like this:</p>
			<source>&lt;ldap-query server="foo_server"&gt;
 sn=*Green*
&lt;/ldap-query&gt;</source>
			<p>This will be replaced by a tagset that looks something like this:</p>
			<source>&lt;ldapsearch&gt;
 &lt;searchresult ID="CN=DGREEN,OU=TBE,OU=AST,OU=ACAD,O=WSU"&gt;
  &lt;telephonenumber&gt;801-626-6821&lt;/telephonenumber&gt;
  &lt;facsimiletelephonenumber&gt;801-626-6650&lt;/facsimiletelephonenumber&gt;
  &lt;title&gt;PROFESSOR/TELECOMMUNICATIONS AND BUSINESS EDUCATION&lt;/title&gt;
  &lt;givenname&gt;Diana&lt;/givenname&gt;
  &lt;sn&gt;Green&lt;/sn&gt;
  &lt;l&gt;B2 218&lt;/l&gt;
  &lt;ou&gt;TELECOM &amp; BUSINESS ED &lt;/ou&gt;
  &lt;mail&gt;DGREEN@weber.edu&lt;/mail&gt;
  &lt;initials&gt;J&lt;/initials&gt;
  &lt;cn&gt;DGREEN&lt;/cn&gt;
  &lt;objectclass&gt;newPilotPerson&lt;/objectclass&gt;
  &lt;objectclass&gt;organizationalPerson&lt;/objectclass&gt;
  &lt;objectclass&gt;person&lt;/objectclass&gt;
  &lt;objectclass&gt;top&lt;/objectclass&gt;
 &lt;/searchresult&gt;
&lt;/ldapsearch&gt;</source>
			<p>You can also have the LdapProcessor substitute values from the servlet request into your query. The syntax for that is:</p>
			<source>&lt;ldap-query name="foo_server"&gt;
 sn=*{@name}*
&lt;/ldap-query&gt;</source>
			<p>This is, of course, highly configurable by setting attributes of the query tag. A partial list of attributes is:</p>
			<dl>
				<dt>doc-element</dt>
				<dd>The tag with which to wrap the whole shebang. Default is ldapresults. If an empty string is specified, e.g. doc-element="", the whole shebang will not be wrapped.</dd>
				<dt>row-element</dt>
				<dd>The tag with which to wrap each row. Default is searchresult. Same deal as with doc-element.</dd>
				<dt>id-attribute</dt>
				<dd>What is the name of the attribute that uniquely identifies the rows? Default is ID. This is, of course, meaningless if row-element is set to an empty string.</dd>
				<dt>variable-left-delimiter</dt>
				<dd>What string delimits variables in the query on the left side? Default is {@.</dd>
				<dt>variable-right-delimiter</dt>
				<dd>What string delimits variables in the query on the right side? Default is }.</dd>
			</dl>
		</s1>
		<s1 title="Error Handling">
			<p>In a perfect world, nothing would ever go wrong in your queries but this is not a perfect world. In our world, you can check for Exceptions in your stylesheets and present them to your users in a nice way. The tags used to render the error are configurable using attributes from the query tag. The attributes in question are:</p>
			<dl>
				<dt>error-element</dt>
				<dd>The name of the error-element to create, default is error.</dd>
				<dt>error-message-attribute</dt>
				<dd>The name of the attribute of the error-element in which to put the Exception's message. Default is message.</dd>
				<dt>error-message-element</dt>
				<dd>The name of the child element of the error-element in which to put the Exception's message. The default is to not do so.</dd>
				<dt>error-stacktrace-attribute</dt>
				<dd>The name of the attribute of the error-element in which to put the Exception's stacktrace. The default is to not do so.</dd>
				<dt>error-stacktrace-element</dt>
				<dd>The name of the child element of the error-element in which to put the Exception's stacktrace. The default is to not do so.</dd>
				<dt>error-message-text</dt>
				<dd>The text to pass out as an error message instead of the Exception's own message. This is useful for displaying user friendly error messages. The default is to use the Exception's message.</dd>
			</dl>
			<p>So by default, when an Exception occurs, the processor generates this XML:</p>
			<source>&lt;error message="The server is on fire."/&gt;</source>
		</s1>
		<s1 title="Notes and Disclaimers">
			<p>The LdapProcessor was written borrowing a lot of ideas and code form Donald Ball's SQLProcessor.  Any similarity to his code is purely intended...:)  Thanks to Donald for writing good, clean code, and being a good sport about me plagerizing in the name of ultimate 'code re-use'.</p>
		</s1>
		<s1 title="Planned Features">
			<ul>
				<li>support for different context paramaters such as authtype, protocol, and principal.</li>
				<li>the ability to retrieve binary objects such as certificates and images.</li>
				<li>the ability to add different Contols such as a SortContorl for server side sorting.</li>
			</ul>
		</s1>
	</body>
</document>

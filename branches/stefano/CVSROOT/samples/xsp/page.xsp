<?xml version="1.0"?>

<!-- Note: this page was rendered with Cocoon as application from the -->
<!-- command line and printed with the OpenXML printer. Its indentation --> 
<!-- was cleaned up by hand since whitespace handling is not yet properly -->
<!-- implemented and CDATA sections are expanded.  We are currently working
<!-- to render the whole process automatic. -->

<xsp:page language="java" xmlns:xsp="http://java.apache.org/DTD/WD-xsp">
 
    <?cocoon-format type="text/xsp"?>
 
    <xsp:logic xml:space="preserve">
      static private int counter = 0; 
      private synchronized int count() { 
        return counter++; 
      }
    </xsp:logic>
    
    <xsp:content>
        <page>
            <title>First Page</title>
            <author>
                <name>Stefano Mazzocchi</name>
                <address>stefano@apache.org</address>
            </author>
            <version>$Id: page.xsp,v 1.1.1.1 1999-11-09 01:51:35 stefano Exp $</version>
                
            <p>Hi, I'm the first XSP page ever.</p>
            
            <p>This page is an example of usage for XSP technology which
                is being designed to add dynamic XML capabilities to the
                Cocoon publishing framework. Note: Cocoon will not be
                able to work with XSP pages until its second generation,
                starting from Cocoon 2.0</p>
                
            <p>In this page, the content is automatically generated by
                translating this template page into some source code
                (Java in this case) and then executed at request time
                (as servlet). The separation between content and logic
                is done using the transformation capabilities of XSL,
                tranforming the template elements used to create this
                page into XSP elements which discriminate the content
                from the logic and are correctly interpretable from an
                XSP engine.</p>
                
             <list>
                <title>Request Data</title>
                <element name="Request method">
                    <xsp:expr>request.getMethod()</xsp:expr>
                </element>
                <element name="Request URI">
                    <xsp:expr>request.getRequestURI()</xsp:expr>
                </element>
                <element name="Request protocol">
                    <xsp:expr>request.getProtocol()</xsp:expr>
                </element>
                <element name="Servlet path">
                    <xsp:expr>request.getServletPath()</xsp:expr>
                </element>
                <element name="Path info">
                    <xsp:expr>request.getPathInfo()</xsp:expr>
                </element>
                <element name="Path translated">
                    <xsp:expr>request.getPathTranslated()</xsp:expr>
                </element>
                <element name="Query string">
                    <xsp:expr>request.getQueryString()</xsp:expr>
                </element>
                <element name="Content length">
                    <xsp:expr>request.getContentLength()</xsp:expr>
                </element>
                <element name="Content type">
                    <xsp:expr>request.getContentType()</xsp:expr>
                </element>
                <element name="Server name">
                    <xsp:expr>request.getServerName()</xsp:expr>
                </element>
                <element name="Server port">
                    <xsp:expr>request.getServerPort()</xsp:expr>
                </element>
                <element name="Remote user">
                    <xsp:expr>request.getRemoteUser()</xsp:expr>
                </element>
                <element name="Remote address">
                    <xsp:expr>request.getRemoteAddr()</xsp:expr>
                </element>
                <element name="Remote host">
                    <xsp:expr>request.getRemoteHos()</xsp:expr>
                </element>
                <element name="Authorization scheme">
                    <xsp:expr>request.getAuthType()</xsp:expr>
                </element>
            </list>
            
            <xsp:logic xml:space="preserve"><![CDATA[
             Enumeration e = request.getHeaderNames(); 
             if ((e != null) && (e.hasMoreElements())) { ]]>
                <xsp:content>
                    <list>
                        <title>Request Headers</title>
                        <xsp:logic xml:space="preserve"><![CDATA[
                          while (e.hasMoreElements()) {  
                            String k = (String) e.nextElement(); ]]>
                            <xsp:element name="element">
                                <xsp:attribute name="name">
                                    <xsp:expr>k</xsp:expr>
                                </xsp:attribute>
                                <xsp:expr>request.getHeader(k)</xsp:expr>
                            </xsp:element>
                          }
                        </xsp:logic>
                    </list>
                </xsp:content>
              }
            </xsp:logic>
            
            <xsp:logic xml:space="preserve"><![CDATA[
              e = request.getParameterNames(); 
              if ((e != null) && (e.hasMoreElements())) { ]]>
                <xsl:content>
                    <list>
                        <title>Servlet Parameters</title>
                        <xsp:logic xml:space="preserve"><![CDATA[
                          while (e.hasMoreElements()) { 
                            String k = (String) e.nextElement();
                            String val = request.getParameter(k); 
                            String vals[] = request.getParameterValues(k); ]]>
                            <xsp:element name="element">
                                <xsp:attribute name="name">
                                    <xsp:expr>k</xsp:expr>
                                </xsp:attribute>
                                <xsp:logic xml:space="preserve"><![CDATA[
                                  for(int i = 0; i < vals.length; i++) { ]]>
                                    <item>
                                        <xsp:expr>vals[i]</xsp:expr>
                                    </item>
                                  }
                                </xsp:logic>
                            </xsp:element>
                          }
                        </xsp:logic>
                    </list>
                </xsl:content>
              } 
            </xsp:logic>
        </page>
    </xsp:content>
</xsp:page>
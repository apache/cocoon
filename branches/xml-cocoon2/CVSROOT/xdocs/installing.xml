<?xml version="1.0"?>

<!DOCTYPE document SYSTEM "./dtd/document-v10.dtd">

<document>
 <header>
  <title>Installing Cocoon</title>
  <authors>
   <person name="Stefano Mazzocchi" email="stefano@apache.org"/>
  </authors>
 </header>

 <body>

 <s1 title="System Requirements">
  <p>
   Cocoon requires the following systems to be already installed in your
   system:
  </p>

  <ul>
   <li><strong>Java Virtual Machine</strong>
    A Java 1.2 or greater compatible virtual machine must be present for both
    command line and servlet type usage of Cocoon. Note that all servlet engines
    require a JVM to run so if you are already using servlets you already have
    one installed.
   </li>
   <li><strong>Servlet Engine</strong>
    A Servlet 2.x compliant servlet engine  must be present in order to support
    servlet operation and dynamic request handling. Note that this requirement
    is optional for command line operation.
   </li>
  </ul>
 </s1>

 <s1 title="Required Components">
  <p>
   Cocoon is a publishing framework and was designed to be highly modular to
   allow users to choose their preferred implementation for the required
   component and to allow better and faster parallel development.
  </p>

  <p>
   Previous releases of Cocoon forced you to download all the basic required
   packages for the installation, but this generated lots of problems for
   lack of synch between the projects and the complexity of the operation.
   For this reason, Cocoon now ships with all the required packages,
   a sort of a simple distribution to make things easier for you. We apologize
   for the increased size of the distribution, but we think this will be
   worthwhile even for users with low bandwidth.
  </p>

  <p>
   In the <code>/lib</code> directory you'll find all the required packages.
   Now jump to the installation instructions for your servlet engine.
  </p>

  <note>
   The Ant and Stylebook packages are only used in the build system and
   are <strong>not</strong> used by Cocoon at run-time. So you can safely
   ignore them in the installation.
  </note>
 </s1>

 <s1 title="Installing Cocoon">
  <p>
   Being Cocoon a servlet, you should be able to install it on every compliant
   servlet engine by associating the "org.apache.cocoon.Cocoon" servlet
   with the requests you want it to handle. In order to do this, there is no
   standard way, so we try to provide detailed information for the most used
   servlet systems.
  </p>

  <s2 title="Installing Cocoon on Apache JServ">
   <p>
    First thing to do is to make sure that Cocoon and all the needed components
    (as explained in the previous section) are visible. This implies adding
    this to the servlet engine classpath by adding a bunch of classpath lines
    to your <code>jserv.properties</code> file for each jar package.
   </p>

<source>wrapper.classpath=[path-to-jar]/[jar-name].jar</source>

   <p>
    Here is an example:
   </p>

<source>
wrapper.classpath=/usr/local/java/jdk/lib/tools.jar
wrapper.classpath=/usr/local/java/lib/cocoon.jar
wrapper.classpath=/usr/local/java/lib/xerces.jar
wrapper.classpath=/usr/local/java/lib/xalan.jar
wrapper.classpath=/usr/local/java/lib/fop.jar
...
</source>

   <note>
    from this version of Cocoon the <code>cocoon.jar</code>
    package should be added to the servlet engine classpath as any other
    required package (as shown above).
   </note>

   <note>
    JServ is a Servlet 2.0 compliant servlet engine and will not work if you
    place the Servlet_2.2.jar in its classpath. So ignore the servlet_2.2.jar
    package that is shipped with Cocoon if you use Jserv.
   </note>

   <p>
    At this point, you must set the Cocoon configurations. To do this, you
    must choose the servlet zone(s) where you want Cocoon to reside.
    If you don't know what a servlet zone is, open the
    <code>zone.properties</code> file.
   </p>

   <p>
    To configure Cocoon, you must pass the <code>cocoon.properties</code>
    file location to the servlet by adding the following line to the servlet zone:
   </p>

<source>servlet.org.apache.cocoon.Cocoon.initArgs=properties=[path-to-cocoon]/bin/cocoon.properties</source>

   <p>
    Note that you should not need to change anything from the template
    properties file found in the distribution (under <code>/conf/</code>),
    but you must edit it for more complex operation. Please refer directly to
    the file that contains breaf indications and comments on the different
    configurations, but you don't need to care about that at this point.
   </p>

   <p>
    Now your cocoon servlet is properly configured, but you should tell Apache
    to direct any call to an XML file (or any other file you want Cocoon to
    process) to the Cocoon servlet. To do this, you should add the following line
    to your <code>jserv.conf</code> file:
   </p>

<source>Action cocoon /servlet/org.apache.cocoon.Cocoon
AddHandler cocoon xml</source>

   <p>
    where <em>xml</em> is the file extention you want Cocoon to handle
    and <em>/servlet/</em> is the mount point of your servlet zone (and the
    above is the standard name for servlet mapping for Apache JServ).
   </p>

   <p>
    Restart both Apache and Apache JServ and try accessing the Cocoon status page:
   </p>

<source>http://localhost/Cocoon.xml</source>

   <p>
    Cocoon will show you how it's configured.
   </p>

   <p>
    If the page above is working, place the samples contained in the distribution
    (under <code>./samples</code>) in your web server URI space and call
    <code>index.xml</code> to see Cocoon in action.
   </p>

   <note>
    For any problem, please go to the FAQ list before submitting a bug
    report or a request for help on the mail lists. Thank you.
   </note>
  </s2>
 </s1>
</body>
</document>
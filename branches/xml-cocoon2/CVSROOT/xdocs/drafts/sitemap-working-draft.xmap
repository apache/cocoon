<?xml version="1.0"?>

<!-- =============== Cocoon Sitemap Working Draft ============================

 Copyright (C) 2000 The Apache Software Foundation. All rights reserved.
 
 Redistribution of this document is permitted provided that the following 
 conditions are met:
 
 1. Redistributions must retain the above copyright notice,
    this list of conditions and the following disclaimer.
 
 2. This document is referred to and considered only as "working draft".
 
 3. Any software implementation inspired by this document must indicate
    in its documentation: 

     "inspired by research and development on behalf of the 
      Apache Software Foundation"
 
 4. The names "Cocoon" and  "Apache Software Foundation"  must not be used to
    endorse  or promote  products inspired  from this  document without  prior
    written permission. For written permission, please contact
    apache@apache.org.
 
 5. Products  derived from this document may not  be called "Cocoon", nor may
    "Cocoon" nor "Apache" appear in their name, without prior written 
    permission  of the Apache Software Foundation.
 
 THIS DOCUMENT IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS  FOR A PARTICULAR  PURPOSE ARE  DISCLAIMED.  IN NO  EVENT SHALL  THE
 APACHE SOFTWARE  FOUNDATION  OR ITS CONTRIBUTORS  BE LIABLE FOR  ANY DIRECT,
 INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLU-
 DING, BUT NOT LIMITED TO, PROCUREMENT  OF SUBSTITUTE GOODS OR SERVICES; LOSS
 OF USE, DATA, OR  PROFITS; OR BUSINESS  INTERRUPTION)  HOWEVER CAUSED AND ON
 ANY  THEORY OF LIABILITY,  WHETHER  IN CONTRACT,  STRICT LIABILITY,  OR TORT
 (INCLUDING  NEGLIGENCE OR  OTHERWISE) ARISING IN  ANY WAY OUT OF THE  USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 This document  consists of voluntary contributions made  by many individuals
 on  behalf of the Apache Software  Foundation. For more information on the 
 Apache Software Foundation, please see <http://www.apache.org/>.

==============================================================================

This document contains an example used as a working draft for 
Cocoon architects to test and understand the issues associated with 
sitemaps and XML publishing in general. It must be considered as a working 
draft and may be updated at any time.

This document is based on ideas and design patterns inspired by Stefano 
Mazzocchi (stefano@apache.org) and Pierpaolo Fumagalli (pier@apache.org)
but grew as a collaborative effort to provide a solid foundation of
design patterns and usability guidelines to create a solid foundation
of sitemap programmability and usability to the Cocoon Publishing 
Framework.

This is one of the few examples where open source is transformed into
"open development" leading both the implementation and the pure research
around software development and usability.

The goal of the sitemap is to allow non-programmers to create web sites
and web applications built from logic components and XML documents.

It finds inspiration from both Apache's httpd.conf/.htaccess files as well
as from Servlet API 2.2 WAR archives. It uses concepts such as Cascading
from W3C CSS, as well as declarative approaches integrated into the W3C 
XSLT language. It also uses some element/attribute equivalence patterns 
used in W3C RDF.

The following goals were identified as engineering constraints:

1) minimal verbosity is of maximum importance.
2) the schema should be sufficiently expressive to allow learning by
examples.
3) sitemap authoring should not require assistive tools, but be
sufficiently future-compatible to allow them.
4) sitemaps must scale along with the site and should not impose growth
limitation to the site as a whole nor limit its administration with size
increase.
5) sitemaps should contain all the information required to Cocoon to
generate all the requests it receives.
6) sitemaps should contain information for both dynamic operation as
well as offline generation.
7) uri mapping should be powerful enough to allow every possible mapping
need.
8) basic web-serving functionalities (redirection, error pages,
resource authorisation) should be provided.
9) sitemaps should not limit Cocoon's intrinsic modular extensibility.
10) resources must be matched with all possible state variables, not
only with URI (http parameters, enviornment variables, server
parameters, time, etc...).
11) sitemaps should embed the notion of °semantic resources° to be
future-compatible with sematic crawling and indexing.
12) sitemaps should be flexible enough to allow a complete web site to
be built with Cocoon.

======================================================================= -->

<!-- 

  The default namespaces are used mainly for versioning, instead of using 
  attributes such as version="2.0" which could create confusion. People are 
  used to writing URIs with no spelling mistakes, while versioning could be 
  used for their own sitemap versions and this might break operation.
  
  The versioning schema will be "major.minor" where major will be increased
  by one each time a new release breaks back compatibility, while minor
  is increased each time a change has been made that doesn't create
  back incompatible problems.
  
  The "src:" namespace is associated with loaders. This implies a schema for
  loaders to be maintained by the Cocoon project if the indicated namespace
  for loaders is used.
  
  In the future if the need for custom loaders emerges, we'll provide
  ways to extend this, but for now we'll assume Cocoon maintains the list
  of resource loaders.
  
  The "local" attribute is used when the resource is _local_ to the
  sitemap. This doesn't have an absolute meaning, but depends on the _where_
  the sitemap was found. For example, if the root sitemap was found on a
  file system, all local resources are interpreted as files and passed
  to the "local" loader. While, if the "file" attribute is used, the file
  loader is always used. This is mostly important when the sitemap is
  found inside compressed archives or loaded with non-standard loading
  methods such as CVS, WebDAV or other forms of databases.
  
  NOTE (SM)
  
  Note that sitemap operation is URI based and relativity is always based
  on URI locations (for example, there is no language-relativity or 
  machine-load-relativity for mounted sitemaps). This might considered
  an asymmetry in respect to the uri-abstracted conditional model, but
  I think that providing uri-abstracted way of doing sitemap mounting is
  FS.

-->

<!--
<sitemap 
    xmlns="http://xml.apache.org/cocoon/sitemap/1.0" 
    xmlns:src="http://xml.apache.org/cocoon/loaders/1.0"
>

 <!-- 
      Pipeline components
  -->
 <components>

   <!-- 
       Generators generate XML content as SAX events and initialize the 
       pipeline processing. 
   -->
  <generators>
   <generator type="parser" src:class="org.apache.cocoon.generator.FileGenerator"/>
   <generator type="dir"    src:file="/home/mystuff/java/MyDirGenerator.class"/>
   <generator type="xsp"    src:class="org.apache.cocoon.generators.XSPGenerator">
    ...
   </generator>
  </generators>

   <!-- 
       Filters transform SAX events in SAX events.
   -->
  <filters>
   <filter type="xslt" src:class="org.apache.cocoon.filter.XSLTFilter"/>
   <filter type="xinclude" src:class="org.apache.cocoon.filter.XIncludeFilter"/>
  </filters>

   <!-- 
       Serializers transform SAX events in binary or char streams for 
       final client consumption.
   -->
  <serializers>
   <serializer type="html" mime-type="text/html" src:class="org.apache.cocoon.serializer.HTMLSerializer">
    <param name="doctype-public" value="-//W3C//DTD HTML 4.0 Transitional//EN"/>
    <param name="doctype-system" value="http://www.w3.org/TR/REC-html40/loose.dtd"/>
    <param name="preserve-space" value="true"/>
    <param name="encoding" value="UTF-8"/>
    <param name="indent" value="1"/>
    <param name="line-width" value="120"/>
   </serializer>

   <serializer type="wap" mime-type="text/vnd.wap.wml" src:class="org.apache.cocoon.serializer.XMLSerializer">
    <param name="doctype-public" value="-//WAPFORUM//DTD WML 1.1//EN"/>
    <param name="doctype-system" value="http://www.wapforum.org/DTD/wml_1.1.xml"/>
    <param name="encoding" value="UTF-8"/>
   </serializer>

   <serializer type="svg2jpg" mime-type="image/jpg" src:class="org.apache.cocoon.serializer.SVGSerializer">
    <param name="format" value="jpg"/>
    <param name="compression-level" value="80%"/>
   </serializer>

   <serializer type="svg2png" mime-type="image/png" src:class="org.apache.cocoon.serializer.SVGSerializer">
    <param name="format" value="png"/>
    <param name="color-depth" value="24"/>
   </serializer>
  </serializers>

   <!-- 
       Choosers are classes that contain programming logic that perform
       matching based on variable contained in the request, in the server state
       or generally based on any information available during the matching evaluation.

       The main matching type, URI matching, is hardcoded into the sitemap schema
       because, by far, the most used. But it was identified as a clear need the
       ability to extend such matching capabilities to "react" on different
       parameters. Choosers are components invoked at runtime and returning
       a boolean value indicating the class matched the request or not depending
       on internal logic, configuration parameters and current state.
       
       [FIXME] (SM) should we use a better name for this?
       
   -->
  <choosers>
   <chooser type="browser" src:class="org.apache.cocoon.chooser.BrowserChooser">
    ...
   </chooser>

   <chooser type="load" src:class="org.apache.cocoon.chooser.MachineLoadChooser">
    ...
   </chooser>

   <chooser type="user" src:class="org.apache.cocoon.chooser.AuthenticationChooser">
    ...
   </chooser>

   <chooser type="ip-filter" src:local="./classes/IPValidityChooser.class">
    ...
   </chooser>

   <chooser type="semantic-view" src:class="org.apache.cocoon.chooser.SemanticView">
    ...
   </chooser>
  </choosers>

 </components>


 <!-- 

     the <resource> element is used as a placeholder for pipelines
     that are used several times inside the document. This element
     is redundant and its functionality is not directly related
     to the sitemap, but could be cloned by the use of internal
     XInclude, for example
   
         <xinclude:include href="#xpointer(resource[@name='Access refused'])"/>
   
     but given the usability constraints and very specific operation
     it is much easier to include such an element instead of forcing
     the use of xinclude/xpointer.
 -->
 <resources>
  
  <resource name="Access refused">
   <generator type="parser" src:local="./error-pages/restricted.xml"/>
   <filter type="xslt" src:local="./stylesheets/general-browser.xsl"/>
   <serializer type="html" status-code="401"/>
  </resource>
    
 </resources>
 
  <!-- 
      Mount points allow sitemaps to be cascaded and site management 
      workload to be parallelized.
  -->
 <mounts>
  <mount uri="regexp('^/xerces-(j|c|p)/(.*)$')" src:cvs=":pserver:anonymous@xml.apache.org:/home/cvs/xerces-{1}/xdocs/{2}" />
  <mount uri="cocoon/*" src:cvs=":pserver:anonymous@xml.apache.org:/home/cvs/cocoon/xdocs/{1}" />
  <mount uri="bugs/*"   src:jar="./apps/bugs.cocoon#{1}" />
  <mount uri="dist/*"   src:local="./dist/{1}" />
  <mount uri="faq/*"    src:jar="./apps/faq-o-matic.cocoon#{1}" />
 </mounts>

 
 <!--
     the pipeline is the collection of declarative instructions for the
     engine to generate the resources out of the declared components.
  -->  
 <pipeline>

  <!-- 
      The choose element executes the specified matching test and performs the 
      resource construction based on the pipeline routing information it 
      contains. Mapping  rules for <mount> apply here as well.
  -->
  <choose type="uri">
    <when test="cocoon/dist/*">
      <choose type="ip-filter">
        <when test="allowsAddress()">
        <!-- 
             the <redirect> element is used to redirect one requested URI 
             to another. This is somewhat equivalent to URI rewriting.
        -->
          <redirect to="dist/cocoon/{1}"/>
        </when>
        <default>
          <resource name="Access refused"/>
        </default>
      </choose>
    </when>

    <when test="printer-friendly/*">
      <generate type="parser" src:local="{1}.xml"/>
      <filter type="xslt" src:local="./stylesheet/printer-friendly.xsl"/>
      <serialize type="html"/>
    </when>

    <when test="images/logo">
      <choose type="browser">
        <when test="accepts('image/svg')">
          <!-- 
              the <read> element is used to read the src directly without 
              applying any processing. This is mostly useful when clients
              are capable of handling XML content directly.
          -->
          <read src:local="./images/logo.svg"/>
        </when>
        <default>
          <generate type="parser" src:local="./images/logo.svg"/>
          <choose type="browser">
            <when test="accepts('image/png')">
              <serialize type="svg2png"/>
            </when>
            <default>
              <serialize type="svg2jpg"/>
            </default>
          </choose>
        </default>
      </choose>
    </when>

    <when test="restricted/*">
      <choose type="user">
        <when test="is('administrator')">
          <generate type="parser" src:local="./restricted/{1}"/>
          <filter type="xslt" src:local="./stylesheets/restricted.xsl"/>
          <serialize type="html"/>
        </when>
        <default>
          <resource name="Access refused"/>
        </default>
      </choose>
    </when>

    <when test="complex-semantics/*">
     <generate type="parser" src:local="./complex-semantics/{1}"/>
     <filter type="xslt" src:local="./stylesheet/rdf-izer.xsl"/>
     <filter type="xslt" src:local="./stylesheet/xlink-izer.xsl"/>
     <!--
         The semantic view should contain all the information that semantic
         crawlers need to fully understand this resource. It normally means
         that RDF, XLink and PI are contained in this view of the resource
         and Cocoon will be able to interrupt the pipeline at this point
         if the client is requesting this.
         
         This will be used for offline crawlers, metadata indexers and
         XML-capable browsers.
     -->
         
     <!-- NOTE (SM)
        
         The semantic-view element might become too specific if the new 
         CC/PP (http://www.w3.org/TR/CCPP-ra/) user-agent capabilities
         architecture proposal is implemented. If this happens, the need for
         multiple pipeline exit points depending on the requestor capabilities
         will emerge. But this is clearly _way_ too early to expect, anyway...
              
     -->

     <choose type="view">
      <when test="isSemantic()">
       <serialize type="xml"/>
      </when>
      <default>                 
       <choose type="browser">
        <when test="accepts('text/vnd.wap.wml')">
          <filter type="xslt" src:local="./stylesheet/rdf2wml.xsl"/>
          <serialize type="xml"/>
        </when>
        <default>
          <filter type="xslt" src:local="./stylesheet/rdf2html.xsl"/>
          <serialize type="html"/>
        </default>
       </choose>
      </default>
     </choose>
    </when>

    <when test="regexp('/\([0-9]\{4\}\)/\([0-9]\{2\}\)/\([0-9]\{2\}\)/')">
      <!--
           Here we implement the ability to indicate semantic information
           on the processed URI. This is mostly used to avoid to encode
           URI specific information in the XSP since the sitemap maintainer
           is the only one responsible to manage the URI space. This removes
           a URI contract between the XSP writer and the URI space manager, 
           moving it to parameter names which normally change less frequently.
      -->
      <set-parameter name="year" value="{1}"/>
      <set-parameter name="month" value="{2}"/>
      <set-parameter name="day" value="{3}"/>
      
      <generator name="serverpages" src="/dailynews.xsp"/>
      <filter type="xslt" src:local="./stylesheet/{1}/news.xsl"/>
      <serializer type="html"/>
    </when>

    <default>
      <generate type="parser" src:local="{1}.xml"/>
      <choose type="load">
        <when test="greaterThen('2.5')">
          <filter type="xslt" src:local="./stylesheet/low-graphics.xsl"/>
        </when>
        <default>
          <choose type="browser">
            <when test="is('Mozilla5')">
              <filter type="xslt" src:local="./stylesheet/xul-enabled.xsl"/>
            </when>
            <default>
              <filter type="xslt" src:local="./stylesheet/general-browser.xsl"/>
            </default>
          </choose>
        </default>
      </choose>
      <serializer type="html"/>
    </default>
    
   </choose>
  
 </pipeline>

</sitemap>

<!-- end of file -->
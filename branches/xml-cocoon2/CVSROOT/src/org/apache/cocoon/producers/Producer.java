/*****************************************************************************
 * Copyright (C) The Apache Software Foundation. All rights reserved.        *
 * ------------------------------------------------------------------------- *
 * This software is published under the terms of the Apache Software License *
 * version 1.1, a copy of which has been included  with this distribution in *
 * the LICENSE file.                                                         *
 *****************************************************************************/

package org.apache.cocoon.producers;

import java.io.*;
import org.apache.arch.*;
import org.apache.cocoon.*;

/**
 * The Producer interface is the class involved in primary document production.
 *
 * @author <a href="mailto:stefano@apache.org">Stefano Mazzocchi</a>
 * @version CVS $Revision: 1.1.2.1 $ $Date: 1999-12-11 23:28:52 $
 * @since 2.0
 */
 
public interface Producer extends Changeable {

	/**
	 * This method makes available to this class all the required information
	 * following an improved Servlet model that better separates contexts.
	 * 
	 * @param request The request wrapper
	 * @param request The response wrapper
	 * @param request The context wrapper
	 */    
    void set(Request request, Response response, Context context);
    
	/**
	 * This method triggers the production of XML which is output thru the
	 * given writer. It should be considered a legacy method that provides
	 * a way for SAX-unaware code (such as servlets or JSP) to work in the 
	 * Cocoon environment. Since XML production thru streams requires
	 * parsing to generate SAX events, it is highly suggested that producers
	 * implement directly the toSAX() method instead.
	 * 
	 * @param writer The writer that receives produced XML text.
	 * @throws ProcessingException if some error is encountered
	 * during production and the producer doesn't know how to handle it.
	 */
	void produce(PrintWriter writer) throws ProcessingException;
	
	/**
	 * Set the DocumentHandler receiving SAX events generated by this producer.
	 *
	 * @param listener The event listener receiving SAX events.
	 * @throws ProcessingException if some error is encountered
	 * during production and the producer doesn't know how to handle it.
	 */
    void produce(EventListener listener) throws ProcessingException;

}
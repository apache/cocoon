<!-- ===========================================================================


                       * =========================== *
                       |  Apache Cocoon Build System |
                       * =========================== *

                                     by

                     Stefano Mazzocchi <stefano@apache.org>


Installing the build tools
==========================

The Cocoon build system is based on Ant, which is a Java building tool
originally developed for the Tomcat project but now used in many other
Apache projects and extended by many developers.

Ant is a little but very handy tool that uses a build file written in XML
(this file) as building instructions. For more information refer to
"http://jakarta.apache.org/ant/".

To make things easier for you, the Cocoon distribution contains a precompiled
version of Ant and the build scripts take care of all the classpath issues.

The only thing that you have to make sure, is the "JAVA_HOME" environment
property should be set to match the JVM you want to use. That's all you have
to do.


Building instructions
=====================

Ok, let's build the baby. First, make sure your current working directory is
where this very file is located. Then type

  ./build.sh (unix)
  .\build.bat (win32)

if everything is right and all the required packages are visible, this action
will generate a file called "cocoon.jar" in the "./build/cocoon" directory.
Note, that if you do further development, compilation time is reduced since
Ant is able of detecting which files have changed an to recompile them at need.

Also, you'll note that reusing a single JVM instance for each task, increases
tremendously the performance of the whole build system, compared to other
tools (i.e. make or shell scripts) where a new JVM is started for each task.


Building on another directory
=============================

Sometimes you might want to build on an external directory to keep the 
distribution clean: no worries, this is just an environment property away.
Suppose you want to use the "../build" directory instead you simply tipe

 [unix]  ./build.sh  -Dbuild.root=../build
 [win32] .\build.bat -Dbuild.root=..\build

By using the -Dxxx=yyy argument, you are setting environments in the JVM: Ant
is designed to give higher priority to system environments to allow you to
modify _any_ <property> that you can find in the building instructions below,
so it's just a matter of understanding what property you want to change
and you don't have to touch this file.


Build targets
=============

The build system is not only responsible of compiling Cocoon into a jar file,
but is also responsible for creating the HTML documentation, javadocs,
distributions and web site. In fact, the file you have here is _exactly_ what
is used by cocoon maintainers to take care of everything in the Cocoon
project, no less and no more.

To know more about the available targets take a look at this file, which is
pretty self-explanatory or type

 [unix]  ./build.sh  -projecthelp
 [win32] .\build.bat -projecthelp
 

Install target
==============

The install target is mainly a facility to allow you to install a newly build
cocoon + web application in your servlet container. If called normally it
doesn't do anything, but if you type

 [unix]  ./build.sh  -Dinstall.lib="../tomcat/lib" -Dinstall.war="../tomcat/webapps" install
 [win32] .\build.bat -Dinstall.lib="..\tomcat\lib" -Dinstall.war="..\tomcat\webapps" install

overriding the installation properties, it copies all the required libraries
and the default web application so that you just have to fire up your servlet
container without doing anything else. Pretty slick, isn't it?

That's all you have to know to start hacking Cocoon... so what are you 
waiting for? C'mon, dive in and have fun. 

                               Happy hacking from the Apache Cocoon Dev Team:)

============================================================================ -->

<project default="package" basedir=".">

  <!-- =================================================================== -->
  <!-- Indentify Classpath                                                 -->
  <!-- =================================================================== -->
  <path id="classpath">
    <fileset dir="./lib">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init" description="Sets the build properties">
    <tstamp/>
    <property name="fullname" value="Apache Cocoon"/>
    <property name="Name"     value="Cocoon"/>
    <property name="name"     value="cocoon"/>
    <property name="version"  value="2.0a2"/>
    <property name="year"     value="1999-2000"/>

    <echo message="------------------- ${fullname} ${version} [${year}] ----------------"/>

    <property name="debug"          value="on"/>
    <property name="optimize"       value="off"/>
    <property name="deprecation"    value="off"/>
    <property name="build.compiler" value="classic"/>
    <property name="target.vm"      value="1.2"/>

    <property name="src.dir"      value="./src"/>
    <property name="lib.dir"      value="./lib"/>
    <property name="docs.dir"     value="./xdocs"/>
    <property name="dtd.dir"      value="./xdocs/dtd"/>
    <property name="skins.dir"    value="./skins"/>
    <property name="images.dir"   value="./xdocs/images"/>
    <property name="webapp.dir"   value="./webapp"/>
    <property name="resource.dir" value="./resources"/>
    <property name="packages"     value="org.apache.*"/>

    <property name="browser.skin" value="${skins.dir}/xml.apache.org/"/>
    <property name="printer.skin" value="${skins.dir}/printer/"/>
    <property name="doc.generator" value="org.apache.stylebook.StyleBook"/>

    <property name="build.root"     value="./build"/>
    <property name="build.dir"      value="${build.root}/${name}"/>
    <property name="build.src"      value="${build.dir}/src"/>
    <property name="build.dest"     value="${build.dir}/classes"/>
    <property name="build.docs"     value="${build.dir}/docs"/>
    <property name="build.docs.printer" value="${build.dir}/printer-docs"/>
    <property name="build.war"      value="${build.dir}/webapp"/>
    <property name="build.javadocs" value="${build.dir}/javadocs"/>

    <property name="dist.root"   value="./dist"/>
    <property name="dist.dir"    value="${dist.root}/${name}-${version}"/>
    <property name="dist.target" value="${dist.root}"/>

    <property name="site" value="../xml-site/targets/${name}"/>
    
    <filter token="name"    value="${fullname}"/>
    <filter token="year"    value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date"    value="${TODAY}"/>
    <filter token="log"     value="true"/>
    <filter token="verbose" value="true"/>

    <available property="servlet.present" classname="javax.servlet.http.HttpServlet">
      <classpath refid="classpath"/>
    </available>
    <available property="php.present" classname="net.php.servlet">
      <classpath refid="classpath"/>
    </available>
    <available property="xt.present" classname="com.jclark.xsl.sax.XMLProcessorImpl">
      <classpath refid="classpath"/>
    </available>
    <available property="svg.present" classname="org.csiro.svg.dom.SVGDocumentImpl">
      <classpath refid="classpath"/>
    </available>
    <available property="rhino.present" classname="org.mozilla.javascript.tools.jsc.Main">
      <classpath refid="classpath"/>
    </available>
    <available property="jstyle.present" classname="jstyle.JSFormatter">
      <classpath refid="classpath"/>
    </available>
    <available property="fop.present" classname="org.apache.fop.apps.Driver">
      <classpath refid="classpath"/>
    </available>
    <available property="jpeg.present" classname="com.sun.image.codec.jpeg.JPEGCodec">
      <classpath refid="classpath"/>
    </available>
    <available property="png.present" classname="com.keypoint.PngEncoder">
      <classpath refid="classpath"/>
    </available>
    <available property="jai.present" classname="com.sun.media.jai.codec.ImageCodec">
      <classpath refid="classpath"/>
    </available>
    <available property="action.present"  file="action.inc"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init" description="Prepares the build directory">
    <mkdir dir="${build.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the source code                                            -->
  <!-- =================================================================== -->
  <target name="prepare-src" depends="prepare" description="Copies and filters the source code into the build directory">
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>
    <copydir src="${src.dir}" dest="${build.src}" filtering="on"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare-src" description="Compiles the source code">
    <copydir src="${build.src}" dest="${build.dest}">
      <include name="**/Manifest.mf"/>
      <include name="**/*.xsl"/>
    </copydir>

    <copydir src="proposals/actions" dest="${build.src}/org/apache/cocoon/acting">
      <include name="*.java" if="action.present"/>
    </copydir>
    <copydir src="proposals/actions"
        dest="${build.src}/org/apache/cocoon/components/language/makeup/sitemap/java">
      <include name="sitemap.xsl" if="action.present"/>
    </copydir>

    <javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}"
           target="${target.vm}">
      <classpath refid="classpath"/>
      <exclude name="**/*.html"/>
      <exclude name="**/CocoonServlet*.java" unless="servlet.present"/>
      <exclude name="**/XT*.java"            unless="xt.present"/>
      <exclude name="**/SVG*.java"           unless="svg.present"/>
      <exclude name="**/Javascript*"         unless="rhino.present"/>
      <exclude name="**/Jstyle*"             unless="jstyle.present"/>
      <exclude name="**/FOP*"                unless="fop.present"/>
      <exclude name="**/Php*"                unless="php.present"/>
      <exclude name="**/JPEGEncoder*.java"   unless="jpeg.present"/>
      <exclude name="**/PNGEncoder*.java"    unless="png.present"/>
      <exclude name="**/JAI*.java"           unless="jai.present"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the jar file                                                -->
  <!-- =================================================================== -->
  <target name="package" depends="compile" description="Generates the jar package">
    <jar jarfile="${build.dir}/${name}.jar"
         basedir="${build.dest}"
         manifest="${build.src}/Manifest.mf"
         includes="org/**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prapares the webapp directories                                     -->
  <!-- =================================================================== -->
  <target name="prepare-webapp" depends="prepare" description="Prepares the web application">
    <mkdir dir="${build.war}"/>

    <copydir src="${webapp.dir}" dest="${build.war}" filtering="on">
      <exclude name="**/*.gif"/>
      <exclude name="**/*.jpg"/>
      <exclude name="**/*.png"/>
    </copydir>

    <copydir src="${webapp.dir}" dest="${build.war}" filtering="off">
      <include name="**/*.gif"/>
      <include name="**/*.jpg"/>
      <include name="**/*.png"/>
    </copydir>

    <copydir src="proposals/actions"
             dest="${build.war}">
      <include name="sitemap.xmap" if="action.present"/>
    </copydir>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the war file                                                -->
  <!-- =================================================================== -->
  <target name="webapp" depends="prepare-webapp" description="Generates the war package">
    <jar jarfile="${build.dir}/${name}.war" basedir="${build.war}" includes="**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Installs Cocoon file                                                -->
  <!-- =================================================================== -->
  <target name="install" depends="package, webapp" if="install.lib" description="Installs all jar and war packages">
    <copydir src="${lib.dir}" dest="${install.lib}">
      <include name="*.jar"/>
      <exclude name="ant*.jar"/>
      <exclude name="stylebook*.jar"/>
      <exclude name="servlet*.jar"/>
    </copydir>
    <copyfile src="${build.dir}/${name}.jar" dest="${install.lib}/${name}.jar"/>
    <copyfile src="${build.dir}/${name}.war" dest="${install.war}/${name}.war"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the docs                                                   -->
  <!-- =================================================================== -->
  <target name="prepare-docs" depends="init" description="Prepares the documentation source files">
    <copyfile src="changes.xml" dest="${docs.dir}/changes.xml" filtering="on"/>
    <copyfile src="todo.xml"    dest="${docs.dir}/todo.xml"/>

    <replace file="${docs.dir}/changes.xml" token="./xdocs/dtd/" value="dtd/"/>
    <replace file="${docs.dir}/todo.xml"    token="./xdocs/dtd/" value="dtd/"/>
  </target>

  <!-- =================================================================== -->
  <!-- Generate HTML docs                                                  -->
  <!-- =================================================================== -->
  <target name="docs" depends="prepare-docs" description="Generates the documentation">
    <mkdir dir="${build.docs}"/>
    <copyfile src="${docs.dir}/docs-book.xml" dest="${docs.dir}/book.xml" filtering="on"/>
    <java classname="${doc.generator}">
      <classpath refid="classpath"/>
      <arg line="targetDirectory=${build.docs} ${docs.dir}/book.xml ${browser.skin}"/>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Generate printer-friendly HTML docs                                 -->
  <!-- =================================================================== -->
  <target name="printer-docs" depends="prepare-docs" description="Generates printer-friendly documentation">
    <mkdir dir="${build.docs.printer}"/>
    <copyfile src="${docs.dir}/docs-book.xml" dest="${docs.dir}/book.xml" filtering="on"/>
    <java classname="${doc.generator}">
      <classpath refid="classpath"/>
      <arg line="targetDirectory=${build.docs.printer} ${docs.dir}/book.xml ${printer.skin}"/>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the web site                                                -->
  <!-- =================================================================== -->
  <target name="site" depends="prepare-docs" description="Generates the web site (for site maintainers only)">
    <mkdir dir="${site}"/>
    <copyfile src="${docs.dir}/site-book.xml" dest="${docs.dir}/book.xml" filtering="on"/>
    <java classname="${doc.generator}">
      <classpath refid="classpath"/>
      <arg line="targetDirectory=${site} ${docs.dir}/book.xml ${browser.skin}"/>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="prepare-src" description="Generates the API documentation">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} Apache Software Foundation. All Rights Reserved."
             stylesheetfile="${resource.dir}/javadoc.css">
      <classpath refid="classpath"/>
    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist" depends="package, webapp, docs, javadocs" description="Prepares the distribution">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/lib"/>
    <mkdir dir="${dist.dir}/src"/>
    <mkdir dir="${dist.dir}/conf"/>
    <mkdir dir="${dist.dir}/docs"/>
    <mkdir dir="${dist.dir}/docs/api"/>
    <mkdir dir="${dist.dir}/skins"/>
    <mkdir dir="${dist.dir}/webapp"/>
    <mkdir dir="${dist.dir}/xdocs"/>

    <copyfile src="${build.dir}/${name}.jar" dest="${dist.dir}/lib/${name}.jar"/>
    <copyfile src="${build.war}/${name}.war" dest="${dist.dir}/webapp/${name}.war"/>

    <copydir src="${build.src}"      dest="${dist.dir}/src"/>
    <copydir src="${webapp.dir}"     dest="${dist.dir}/conf" includes="*.x*" excludes="*/**"/>
    <copydir src="${build.docs}"     dest="${dist.dir}/docs"/>
    <copydir src="${build.javadocs}" dest="${dist.dir}/docs/api"/>
    <copydir src="${docs.dir}"       dest="${dist.dir}/xdocs" excludes="book.xml, changes.xml, todo.xml"/>
    <copydir src="${docs.dir}"       dest="${dist.dir}" includes="changes.xml, todo.xml"/>
    <copydir src="${skins.dir}"      dest="${dist.dir}/skins"/>
    <copydir src="${lib.dir}"        dest="${dist.dir}/lib"/>

    <copydir src="." dest="${dist.dir}" includes="README, LICENSE, build.*, index.html" filtering="on"/>
    <copydir src="${build.war}"      dest="${dist.dir}/webapp"/>

    <chmod perm="+x" file="${dist.dir}/build.sh"/>
    <fixcrlf srcdir="${dist.dir}" includes="build.sh"  cr="remove"/>
    <fixcrlf srcdir="${dist.dir}" includes="build.bat" cr="add"/>
    <fixcrlf srcdir="${dist.dir}" includes="lcp.bat"   cr="add"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution as .zip                                   -->
  <!-- =================================================================== -->
  <target name="dist-zip" depends="dist" description="Generates the distribution as a .zip file">
    <zip zipfile="${dist.target}/${Name}-${version}.zip" basedir="${dist.dir}" includes="**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution with .tar.gzip                            -->
  <!-- =================================================================== -->
  <target name="dist-tgz" depends="dist" description="Generates the distribution as a .tar.gz file">
    <tar tarfile="${dist.target}/${Name}-${version}.tar" basedir="${dist.root}" includes="**"/>
    <gzip zipfile="${dist.target}/${Name}-${version}.tar.gz" src="${dist.target}/${Name}-${version}.tar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init" description="Cleans the build directories">
    <delete file="${docs.dir}/changes.xml"/>
    <delete file="${docs.dir}/todo.xml"/>
    <delete file="${docs.dir}/book.xml"/>
    <deltree dir="${build.dir}"/>
  </target>

  <target name="distclean" depends="clean" description="Cleans everything to the original state">
    <deltree dir="${build.root}"/>
    <delete file="${dist.target}/${Name}-${version}.tar.gz"/>
    <delete file="${dist.target}/${Name}-${version}.tar"/>
    <delete file="${dist.target}/${Name}-${version}.zip"/>
    <deltree dir="${dist.root}"/>
  </target>

</project>

<!-- End of file -->

<!-- ===========================================================================


                           * ==================== *
                           |  How to build Cocoon |
                           * ==================== *

                                     by

                     Stefano Mazzocchi <stefano@apache.org>
                     

Installing the build tools
==========================

The Cocoon build system is based on Ant, which is a Java building tool
originally developed for the Tomcat project but now used in many other
Apache projects and extended by many developers.

Ant is a little but very handy tool that uses a build file written in XML
(this file) as building instructions. For more information refer to
"http://jakarta.apache.org/ant/".

To make things easier for you, the Cocoon distribution contains a precompiled
version of Ant and the build scripts take care of all the classpath issues.

The only thing that you have to make sure, is the "JAVA_HOME" environment
property should be set to match the JVM you want to use. That's it.


Building instructions
=====================

Ok, let's build the baby. First, make sure your current working directory is
where this very file is located. Then type

  ./build.sh (unix)
  .\build.bat (win32)

if everything is right and all the required packages are visible, this action
will generate a file called "cocoon.jar" in the "./build/cocoon" directory. 
Note, that if you do further development, compilation time is reduced since 
Ant is able of detecting which files have changed an to recompile them at need.

Also, you'll note that reusing a single JVM instance for each task, increases
tremendously the performance of the whole build system, compared to other
tools (i.e. make or shell scripts) where a new JVM is started for each task.


Build targets
=============

The build system is not only responsible of compiling Cocoon into a jar file,
but is also responsible for creating the HTML documentation, javadocs,
distributions and web site. In fact, the file you have here is _exactly_ what
is used by cocoon maintainers to take care of everything in the Cocoon
project, no less and no more.

These are the meaningful targets for this build file:

 - package [default] -> creates ./build/cocoon/cocoon.jar
 - webapp -> creates ./build/webapp/cocoon.war
 - docs -> generates the HTML documentation in ./build/cocoon/docs
 - printer-docs -> generates printer friendly HTML documentation in ./build/printer-docs
 - javadocs -> generates the API documentation in ./build/cocoon/javadocs
 - dist-zip -> generates the Cocoon distribution in ./dist
 - dist-tgz -> generates the Cocoon distribution in ./dist
 - clean -> cleans the distribution after builds
 - distclean -> restores the distribution to its original and clean state
 - site -> generates the web site in ../xml-site/targets/cocoon
 
NOTE: the "site" target is only useful for site mantainers.

============================================================================ -->

<project default="package" basedir=".">

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
    <property name="fullname" value="Apache Cocoon"/>
    <property name="Name"     value="Cocoon"/>
    <property name="name"     value="cocoon"/>
    <property name="version"  value="2.0a2"/>
    <property name="year"     value="1999-2000"/>

    <echo message="------------------- ${fullname} ${version} [${year}] ----------------"/>

    <property name="debug"       value="on"/>
    <property name="optimize"    value="on"/>
    <property name="deprecation" value="off"/>

    <property name="src.dir"      value="./src"/>
    <property name="lib.dir"      value="./lib"/>
    <property name="docs.dir"     value="./xdocs"/>
    <property name="dtd.dir"      value="./xdocs/dtd"/>
    <property name="skins.dir"    value="./skins"/>
    <property name="images.dir"   value="./xdocs/images"/>
    <property name="webapp.dir"   value="./webapp"/>
    <property name="resource.dir" value="./resources"/>
    <property name="packages"     value="org.apache.*"/>

    <property name="browser.skin" value="${skins.dir}/xml.apache.org/"/>
    <property name="printer.skin" value="${skins.dir}/printer/"/>
    <property name="doc.generator" value="org.apache.stylebook.StyleBook"/>
    <property name="doc.generator.package" value="${lib.dir}/stylebook-1.0-b2.jar"/>

    <property name="build.root"     value="./build"/>
    <property name="build.dir"      value="${build.root}/${name}"/>
    <property name="build.src"      value="${build.dir}/src"/>
    <property name="build.dest"     value="${build.dir}/classes"/>
    <property name="build.docs"     value="${build.dir}/docs"/>
    <property name="build.docs.printer" value="${build.dir}/printer-docs"/>
    <property name="build.war"      value="${build.dir}/webapp"/>
    <property name="build.javadocs" value="${build.dir}/javadocs"/>

    <property name="dist.root"   value="./dist"/>
    <property name="dist.dir"    value="${dist.root}/${name}-${version}"/>
    <property name="dist.target" value="${dist.root}"/>

    <property name="site" value="../xml-site/targets/${name}"/>

    <filter token="name"    value="${fullname}"/>
    <filter token="year"    value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date"    value="${TODAY}"/>
    <filter token="log"     value="true"/>
    <filter token="verbose" value="true"/>
 
    <available property="php.present"     classname="net.php.servlet"/>
    <available property="servlet.present" classname="javax.servlet.http.HttpServlet"/>
    <available property="svg.present"     classname="org.csiro.svg.tools.SvgToImageConverter"/>
    <available property="rhino.present"   classname="org.mozilla.javascript.tools.jsc.Main"/>
    <available property="jstyle.present"  classname="jstyle.JSFormatter"/>
    <available property="fop.present"     classname="org.apache.fop.apps.Driver"/>
    
  </target>

  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message=""/>
    <echo message=""/>
    <echo message="Cocoon Build file"/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=" available targets are:"/>
    <echo message=""/>
    <echo message="   package   --> generates the cocoon.jar file (default)"/>
    <echo message="   webapp    --> generates the cocoon.war file"/>
    <echo message="   compile   --> compiles the source code"/>
    <echo message="   docs      --> generates the HTML documentation"/>
    <echo message="   printer-docs --> generates printer-friendly HTML documentation"/>
    <echo message="   javadocs  --> generates the API documentation"/>
    <echo message="   dist-zip  --> generates the Cocoon distribution as .zip"/>
    <echo message="   dist-tgz  --> generates the Cocoon distribution as .tar.gz"/>
    <echo message="   clean     --> cleans up the directory after building"/>
    <echo message="   distclean --> cleans up to original CVS state"/>
    <echo message="   site      --> generates the Cocoon web site"/>
    <echo message=""/>
    <echo message=" See the comments inside the build.xml file for more details."/>
    <echo message="-------------------------------------------------------------"/>
    <echo message=""/>
    <echo message=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the source code                                            -->
  <!-- =================================================================== -->
  <target name="prepare-src" depends="prepare">
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>
    <copydir src="${src.dir}" dest="${build.src}" filtering="on"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare-src">
    <copydir src="${build.src}" dest="${build.dest}">
      <include name="**/Manifest.mf"/>
      <include name="**/*.xsl"/>
    </copydir>

    <javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}">
      <exclude name="**/*.html"/>
      <exclude name="**/CocoonServlet*.java" unless="servlet.present"/>
      <exclude name="**/SVGSerializer.java" unless="svg.present"/>
      <exclude name="**/Javascript*" unless="rhino.present"/>
      <exclude name="**/Jstyle*" unless="jstyle.present"/>
      <exclude name="**/FO2*" unless="fop.present"/>
      <exclude name="**/Php*" unless="php.present"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the jar file                                                -->
  <!-- =================================================================== -->
  <target name="package" depends="compile">
    <jar jarfile="${build.dir}/${name}.jar"
         basedir="${build.dest}"
         manifest="${build.src}/Manifest.mf"
         includes="org/**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the war file                                                -->
  <!-- =================================================================== -->
  <target name="webapp" depends="prepare">
    <mkdir dir="${build.war}"/>

    <copydir src="${webapp.dir}" dest="${build.war}" filtering="on"/>

    <copydir src="${webapp.dir}" dest="${build.war}" filtering="on">
      <exclude name="**/*.gif"/>
      <exclude name="**/*.jpg"/>
      <exclude name="**/*.png"/>
    </copydir>

    <copydir src="${webapp.dir}" dest="${build.war}" filtering="off">
      <include name="**/*.gif"/>
      <include name="**/*.jpg"/>
      <include name="**/*.png"/>
    </copydir>

    <jar jarfile="${build.dir}/${name}.war" basedir="${build.war}" includes="**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the docs                                                   -->
  <!-- =================================================================== -->
  <target name="prepare-docs" depends="init">
    <copyfile src="changes.xml" dest="${docs.dir}/changes.xml" filtering="on"/>
    <copyfile src="todo.xml"    dest="${docs.dir}/todo.xml"/>

    <replace file="${docs.dir}/changes.xml" token="./xdocs/dtd/" value="dtd/"/>
    <replace file="${docs.dir}/todo.xml"    token="./xdocs/dtd/" value="dtd/"/>
  </target>

  <!-- =================================================================== -->
  <!-- Generate HTML docs                                                  -->
  <!-- =================================================================== -->
  <target name="docs" depends="prepare-docs">
    <mkdir dir="${build.docs}"/>
    <copyfile src="${docs.dir}/docs-book.xml" dest="${docs.dir}/book.xml" filtering="on"/>
    <java fork="yes" 
          classpath="${java.class.path}:${doc.generator.package}" 
          classname="${doc.generator}"
          args="targetDirectory=${build.docs} ${docs.dir}/book.xml ${browser.skin}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Generate printer-friendly HTML docs                                 -->
  <!-- =================================================================== -->
  <target name="printer-docs" depends="prepare-docs">
    <mkdir dir="${build.docs.printer}"/>
    <copyfile src="${docs.dir}/docs-book.xml" dest="${docs.dir}/book.xml" filtering="on"/>
    <java fork="yes" 
          classpath="${java.class.path}:${doc.generator.package}" 
          classname="${doc.generator}"
          args="targetDirectory=${build.docs.printer} ${docs.dir}/book.xml ${printer.skin}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the web site                                                -->
  <!-- =================================================================== -->
  <target name="site" depends="prepare-docs">
    <mkdir dir="${site}"/>
    <copyfile src="${docs.dir}/site-book.xml" dest="${docs.dir}/book.xml" filtering="on"/>
    <java fork="yes" 
          classpath="${java.class.path}:${doc.generator.package}" 
          classname="${doc.generator}"
          args="targetDirectory=${site} ${docs.dir}/book.xml ${skin}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="prepare-src">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} Apache Software Foundation. All Rights Reserved."
             stylesheetfile="${resource.dir}/javadoc.css"
    />
  </target>

  <!-- =================================================================== -->
  <!-- Creates the distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist" depends="package, webapp, docs, javadocs">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/bin"/>
    <mkdir dir="${dist.dir}/lib"/>
    <mkdir dir="${dist.dir}/src"/>
    <mkdir dir="${dist.dir}/conf"/>
    <mkdir dir="${dist.dir}/docs"/>
    <mkdir dir="${dist.dir}/docs/api"/>
    <mkdir dir="${dist.dir}/skins"/>
    <mkdir dir="${dist.dir}/webapp"/>
    <mkdir dir="${dist.dir}/xdocs"/>

    <copyfile src="${build.dir}/${name}.jar" dest="${dist.dir}/bin/${name}.jar"/>
    <copyfile src="${build.war}/${name}.war" dest="${dist.dir}/webapp/${name}.war"/>

    <copydir src="${build.src}"      dest="${dist.dir}/src"/>
    <copydir src="${webapp.dir}"     dest="${dist.dir}/conf" includes="*.x*" excludes="*/**"/>
    <copydir src="${build.docs}"     dest="${dist.dir}/docs"/>
    <copydir src="${build.javadocs}" dest="${dist.dir}/docs/api"/>
    <copydir src="${docs.dir}"       dest="${dist.dir}/xdocs" excludes="book.xml, changes.xml, todo.xml"/>
    <copydir src="${docs.dir}"       dest="${dist.dir}" includes="changes.xml, todo.xml"/>
    <copydir src="${skins.dir}"      dest="${dist.dir}/skins"/>
    <copydir src="${lib.dir}"        dest="${dist.dir}/lib"/>

    <copydir src="." dest="${dist.dir}" includes="README, LICENSE, build.*, index.html" filtering="on"/>
    <copydir src="${build.wap}"      dest="${dist.dir}/webapp"/>

    <chmod perm="+x" file="${dist.dir}/build.sh"/>
    <fixcrlf srcdir="${dist.dir}" includes="build.sh"  cr="remove"/>
    <fixcrlf srcdir="${dist.dir}" includes="build.bat" cr="add"/>
    <fixcrlf srcdir="${dist.dir}" includes="lcp.bat"   cr="add"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution as .zip                                   -->
  <!-- =================================================================== -->
  <target name="dist-zip" depends="dist">
    <zip zipfile="${dist.target}/${Name}-${version}.zip" basedir="${dist.dir}" includes="**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution with .tar.gzip                            -->
  <!-- =================================================================== -->
  <target name="dist-tgz" depends="dist">
    <tar tarfile="${dist.target}/${Name}-${version}.tar" basedir="${dist.root}" includes="**"/>
    <gzip zipfile="${dist.target}/${Name}-${version}.tar.gz" src="${dist.target}/${Name}-${version}.tar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init">
    <delete file="${docs.dir}/changes.xml"/>
    <delete file="${docs.dir}/todo.xml"/>
    <delete file="${docs.dir}/book.xml"/>
    <deltree dir="${build.dir}"/>
  </target>

  <target name="distclean" depends="clean">
    <delete file="${dist.target}/${Name}-${version}.tar.gz"/>
    <delete file="${dist.target}/${Name}-${version}.tar"/>
    <delete file="${dist.target}/${Name}-${version}.zip"/>
    <deltree dir="${dist.root}"/>
  </target>

</project>

<!-- End of file -->
